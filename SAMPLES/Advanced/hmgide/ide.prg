/*----------------------------------------------------------------------------
 HMG - Harbour Windows GUI library source code

 Copyright 2002-2016 Roberto Lopez <mail.box.hmg@gmail.com>
 http://sites.google.com/site/hmgweb/

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation; either version 2 of the License, or (at your option) any later
 version.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along with
 this software; see the file COPYING. If not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA (or
 visit the web site http://www.gnu.org/).

 As a special exception, you have permission for additional uses of the text
 contained in this release of HMG.

 The exception is that, if you link the HMG library with other
 files to produce an executable, this does not by itself cause the resulting
 executable to be covered by the GNU General Public License.
 Your use of that executable is in no way restricted on account of linking the
 HMG library code into it.

 Parts of this project are based upon:

    "Harbour GUI framework for Win32"
    Copyright 2001 Alexander S.Kresin <alex@kresin.ru>
    Copyright 2001 Antonio Linares <alinares@fivetech.com>
    www - https://harbour.github.io/

    "Harbour Project"
    Copyright 1999-2020, https://harbour.github.io/

    "WHAT32"
    Copyright 2002 AJ Wos <andrwos@aust1.net>

    "HWGUI"
    Copyright 2001-2018 Alexander S.Kresin <alex@kresin.ru>

---------------------------------------------------------------------------*/

#pragma -w3

#pragma DEBUGINFO=OFF   // ADD, March 2017

// PRIVATE vars defined in StatusBarBuilder()
MEMVAR _StCaptions
MEMVAR _StActions
MEMVAR _StWidths
MEMVAR _StIcons
MEMVAR _StToolTips
MEMVAR _StStyles
MEMVAR _StFont
MEMVAR _StTop

// PUBLIC vars defined in LoadUserComponents()
MEMVAR nComponentCount
MEMVAR aComponentFileNames
MEMVAR aComponentNames
MEMVAR aComponentProperties
MEMVAR aComponentEvents
MEMVAR aComponentPropValues
MEMVAR aComponentEvtValues

// PRIVATE vars defined in _Open()
MEMVAR Name
MEMVAR MacroVar
// MEMVAR _hmgide_CurrentMainMenu
// MEMVAR _hmgide_CurrentContextMenu
// MEMVAR _hmgide_CurrentNotifyMenu
// MEMVAR _hmgide_CurrentStatusBar
// MEMVAR _hmgide_CurrentToolBar
// MEMVAR _hmgide_CurrentToolBar
// MEMVAR _hmgide_aDropDownMenus
MEMVAR _hmgide_CurrentSplitBox

// PRIVATE var defined in AddControl()
// MEMVAR MacroVar

// PRIVATE vars defined in EditTabOrder()
MEMVAR aTree
MEMVAR aTreeTabIndex
MEMVAR aTreeTabPage
MEMVAR aTreeTabPos
MEMVAR aTreeTabPageLength

// PRIVATE vars defined in ContextMenuBuilder()
MEMVAR _MenuCaptions
MEMVAR _MenuActions
MEMVAR _MenuNames
MEMVAR _MenuImages
MEMVAR _MenuChecked

// PRIVATE vars defined in MainMenuBuilder()
// MEMVAR _MenuCaptions
// MEMVAR _MenuActions
// MEMVAR _MenuNames
// MEMVAR _MenuImages
// MEMVAR _MenuChecked

// PRIVATE vars defined in ToolBarBuilder()
MEMVAR _TbName
MEMVAR _TbNames
MEMVAR _TbCaptions
MEMVAR _TbPictures
MEMVAR _TbActions
MEMVAR _TbToolTips
MEMVAR _TbSeparators
MEMVAR _TbChecks
MEMVAR _TbAutoSizes
MEMVAR _TbGroups
MEMVAR _TbDropDowns
MEMVAR _TbWholeDropDowns
MEMVAR _TbFontName
MEMVAR _TbFontSize
MEMVAR _TbFontBold
MEMVAR _TbFontItalic
MEMVAR _TbFontUnderLine
MEMVAR _TbFontStrikeout
MEMVAR _TbButtonWidth
MEMVAR _TbButtonHeight
MEMVAR _TbButtonImageWidth
MEMVAR _TbButtonImageHeight
MEMVAR _TbToolTip
MEMVAR _TbFlat
MEMVAR _TbBottom
MEMVAR _TbRightText
MEMVAR _TbBorder
MEMVAR _TbStrictWidth

// PUBLIC vars defined in hmgMake()
MEMVAR cProjectFile
MEMVAR cLibraries
MEMVAR cLinkerLibraries
MEMVAR lDebuggerSupport
MEMVAR lFullBuild
MEMVAR FullBuild
MEMVAR aParams
MEMVAR cProjectBaseName
MEMVAR aModifiedFiles
MEMVAR aFilesToCompile
MEMVAR aFormsModified
MEMVAR aProjectModuleFiles
MEMVAR cProjectFolder
MEMVAR cBackupFolder
MEMVAR aDependences
MEMVAR lConsoleMode
MEMVAR cInclude

// PRIVATE vars defined in _Spx_ToolBarBuilder()
// MEMVAR _TbName
// MEMVAR _TbNames
// MEMVAR _TbCaptions
// MEMVAR _TbPictures
// MEMVAR _TbActions
// MEMVAR _TbToolTips
// MEMVAR _TbSeparators
// MEMVAR _TbChecks
// MEMVAR _TbAutoSizes
// MEMVAR _TbGroups
// MEMVAR _TbDropDowns
// MEMVAR _TbWholeDropDowns
// MEMVAR _TbFontName
// MEMVAR _TbFontSize
// MEMVAR _TbFontBold
// MEMVAR _TbFontItalic
// MEMVAR _TbFontUnderLine
// MEMVAR _TbFontStrikeout
// MEMVAR _TbButtonWidth
// MEMVAR _TbButtonHeight
// MEMVAR _TbButtonImageWidth
// MEMVAR _TbButtonImageHeight
// MEMVAR _TbToolTip
// MEMVAR _TbFlat
// MEMVAR _TbBottom
// MEMVAR _TbRightText
// MEMVAR _TbBorder
// MEMVAR _TbStrictWidth
MEMVAR _TbBreak

// PUBLIC var defined in GetErrorProcName()
MEMVAR cCurrentFixedFile


#include "IDE.ch"
#define _NO_BTN_PICTURE_
#include "hmg.ch"


DECLARE WINDOW FormSplash
DECLARE WINDOW rep_build_step_1
DECLARE WINDOW rep_build_step_2
DECLARE WINDOW rep_build_step_3
DECLARE WINDOW reportsummaryoptions
DECLARE WINDOW reporttitlesoptions
DECLARE WINDOW ReportFormatOptions
DECLARE WINDOW fieldselector
DECLARE WINDOW FormBuildLog


*------------------------------------------------------------------------------*
FUNCTION Main ( xProject, cPar )
*------------------------------------------------------------------------------*
   LOCAL hFactor
   LOCAL nDeltaProp
   LOCAL cTemp, nTemp
   LOCAL lFlagBuildLog := .F.
   LOCAL cFileName, cIconName

   PUBLIC cFileBuildBat := 'UseBuildBat.ini'
   PUBLIC cFileLanguage


   #define IDE_NUMBER_VERSION 'Version: ' + hb_dtoc( GetFileDate(App.ExeName), "yyyy.mm.dd" ) + "  " + GetFileTime(App.ExeName)
   #define IDE_VERSION  "ANSI  " + IDE_NUMBER_VERSION

   cFileName := "HMG_ANSI"
   cIconName := "HMG_ANSI_icon"

   PUBLIC _GCN := '* HMG-IDE ANSI Form Designer Generated Code' + CRLF + '* (c) Roberto Lopez - http://sites.google.com/site/hmgweb'
   cFileLanguage := "language.ini"

   SET WINDOW MAIN OFF
   CreateScreenSplash ( cFileName )
   SET WINDOW MAIN ON

   PUBLIC RESETINCREMENTAL := .F.
   PUBLIC ENABLEDEBUGGER := .F.

   PUBLIC docpath
   PUBLIC aMsgs[ 512 ]
   PUBLIC cSourceBuffer := ''
   PUBLIC nParameterCount := PCount()
   PUBLIC cParameters := {}
   PUBLIC lForceFullWarning := .T.
   PUBLIC nVersion := WINMAJORVERSIONNUMBER() + ( WINMINORVERSIONNUMBER() / 10 )
   PUBLIC _InsertActive := .F.
   PUBLIC _REPORTTYPE := 'NEW'
   PUBLIC aTables
   PUBLIC cCurrentReportFileName

   PUBLIC _ReportFontName := 'Arial'
   PUBLIC _ReportFontSize := 9
   PUBLIC _ReportFontBold := .F.
   PUBLIC _ReportFontItalic := .F.
   PUBLIC _ReportBuilderActive := .F.

   IF ( ValType( xProject ) == 'C' .AND. AllTrim( HMG_UPPER( xProject ) ) == '/C' ) .OR. ( ValType( cPar ) == 'C' .AND. AllTrim( HMG_UPPER( cPar ) ) == '/C' )
      REQUEST DBFCDX, DBFFPT
      rddSetDefault( "DBFCDX" )

      IF nParameterCount == 1
         nParameterCount := 0
      ENDIF
   ENDIF

   AAdd ( cParameters, xProject )

   SET CENTURY ON
   SET DATE ANSI
   SET AUTOSCROLL OFF
   SET PROGRAMMATICCHANGE OFF

   PUBLIC _EAT := "HMG-IDE  " + IDE_VERSION + "  "
   PUBLIC Author := '(c) Roberto Lopez - FREEWARE -'
   PUBLIC _HLK := 'http://sites.google.com/site/hmgweb'

#ifdef _DEBUG_
   PUBLIC cUserLog := ''
#endif
   PUBLIC lVirtualForm := .F.
   PUBLIC ResetProjectInfo := .F.
   PUBLIC _hmgide_aDropDownMenus := {}
   PUBLIC _hmgide_CurrentNotifyMenu := ''
   PUBLIC _hmgide_CurrentMainMenu := ''
   PUBLIC _hmgide_CurrentContextMenu := ''
   PUBLIC _hmgide_CurrentStatusBar := ''
   PUBLIC _hmgide_CurrentToolBar := ''
   PUBLIC _hmgide_CurrentToolBar := ''
   PUBLIC Processing := .F.
   PUBLIC StartUpFolder := GetStartUpFolder() + '\'
   PUBLIC DebuggerSupport := .F.


   StartUpFolder := hb_ULeft ( StartUpFolder, hb_utf8RAt ( '\', StartUpFolder ) )


   IF .NOT. File ( StartUpFolder + 'hmg.ini' )

      cTemp := AllTrim( StartUpFolder )

      IF hb_URight ( cTemp, 1 ) == '\'
         cTemp := hb_ULeft ( cTemp, HMG_LEN( cTemp ) - 1 )
      ENDIF

      nTemp := hb_utf8RAt ( '\', cTemp )
      cTemp := hb_ULeft ( cTemp, nTemp )

      IF hb_URight ( cTemp, 1 ) == '\'
         cTemp := hb_ULeft ( cTemp, HMG_LEN( cTemp ) - 1 )
      ENDIF

      SaveString ( StartUpFolder + 'hmg.ini', cTemp )

   ENDIF


   IF .NOT. File ( StartUpFolder + 'editor.ini' )
      ProgramEditor := HMG_GetFileAssociatedWithExtension ( ".prg" )
      IF .NOT. File ( ProgramEditor )
         ProgramEditor := GetSystemDir() + "\notepad.exe" // Note Block of Windows
      ELSEIF "OpenWith" $ ProgramEditor
         ProgramEditor := GetProgramFilesFolder() + "\Notepad++\notepad++.exe"
      ENDIF
      SaveString ( StartUpFolder + 'editor.ini', ProgramEditor )
   ENDIF


   IF .NOT. File ( StartUpFolder + cFileLanguage )
      SaveString ( StartUpFolder + cFileLanguage, 'english.lng' )
   ENDIF


   PUBLIC MiniGUIFolder := AllTrim ( hb_utf8StrTran ( hb_MemoRead ( StartUpFolder + 'hmg.ini' ), Chr( 26 ), ' ' ) )
   PUBLIC ProgramEditor := AllTrim ( hb_utf8StrTran ( hb_MemoRead ( StartUpFolder + 'editor.ini' ), Chr( 26 ), ' ' ) )
   PUBLIC Language := AllTrim ( hb_utf8StrTran ( hb_MemoRead ( StartUpFolder + cFileLanguage ), Chr( 26 ), ' ' ) )

   IF .NOT. File ( ProgramEditor )
      ProgramEditor := HMG_GetFileAssociatedWithExtension ( ".prg" )
      IF .NOT. File ( ProgramEditor )
         ProgramEditor := GetSystemDir() + "\notepad.exe" // Note Block of Windows
      ENDIF
   ENDIF

   PUBLIC cHmgFolder := MiniGUIFolder

   PUBLIC CompilerVersion := ""

   PUBLIC MixedMode := .F.

   PUBLIC AddIncPaths := ''
   PUBLIC BccFolder := ''
   PUBLIC AddLibs := ''

   PUBLIC SnapToGrid := .T.

   PUBLIC ProjectName := ''
   PUBLIC DesignFormModified := .F.

   PUBLIC OpenFormName := ''
   PUBLIC _pr := 0
   PUBLIC _pc := 0
   PUBLIC WindowWidth := 550
   PUBLIC WindowHeight := 550
   PUBLIC SelectedControlName := ''
   PUBLIC SelectedControlType := ''
   PUBLIC MoveIndex := 0
   PUBLIC SizeStarted := .F.
   PUBLIC MoveStarted := .F.
   PUBLIC MoveCol := 0
   PUBLIC MoveRow := 0
   PUBLIC MoveWidth := 0
   PUBLIC MoveHeight := 0
   PUBLIC BrowseCount := 0
   PUBLIC TreeCount := 0
   PUBLIC DesignFormhandle := 0
   PUBLIC DesignForm := 'Form_1'
   PUBLIC CurrentControl := 0
   PUBLIC ButtonCount := 0
   PUBLIC CheckBoxCount := 0
   PUBLIC ListBoxCount := 0
   PUBLIC ComboBoxCount := 0
   PUBLIC CheckButtonCount := 0
   PUBLIC GridCount := 0
   PUBLIC FrameCount := 0
   PUBLIC TabCount := 0
   PUBLIC ImageCount := 0
   PUBLIC AnimateCount := 0
   PUBLIC DatepickerCount := 0
   PUBLIC TextBoxCount := 0
   PUBLIC EditBoxCount := 0
   PUBLIC LabelCount := 0
   PUBLIC PlayerCount := 0
   PUBLIC ProgressBarCount := 0
   PUBLIC RadioGroupCount := 0
   PUBLIC SliderCount := 0
   PUBLIC SpinnerCount := 0
   PUBLIC HyperLinkCount := 0
   PUBLIC MonthCalendarCount := 0
   PUBLIC RichEditCount := 0
   PUBLIC IpAddressCount := 0
   PUBLIC TimerCount := 0
   PUBLIC ActivexCount := 0
   PUBLIC ChildWindowCount := 0

   PUBLIC SelectedControlIndex := 0

   PUBLIC MainHeight := 89 + GetTitleHeight() + GetBorderHeight() + GetMenuBarHeight()

   __mvPublic ( DesignForm + 'WindowType' )

   LoadUserComponents()

   LOAD_LANGUAGE_MESSAGE ()


   docpath := MiniGUIFolder + '\doc\hmgdoc.htm'
   hb_utf8StrTran ( docpath, '\\', '\' )


   DEFINE WINDOW Form_Main ;
         AT 0, 0 ;
         WIDTH Min( 1024, GetDeskTopWidth() ) ;
         HEIGHT MainHeight ;
         TITLE _EAT ;
         ICON cIconName ;
         MAIN ;
         NOMAXIMIZE ;
         NOSIZE ;
         ON RELEASE SaveProject() ;
         ON INTERACTIVECLOSE MsgYesNo( aMsgs[ 099 ], aMsgs[ 006 ] ) ;
         ON INIT {|| FormSplash.HIDE, AutoBuild() }

      ON KEY F2 OF Form_Main ACTION OpenProject()
      ON KEY F5 OF Form_Main ACTION RunApplication()
      ON KEY F8 OF Form_Main ACTION ( ENABLEDEBUGGER := .T., RunApplication() )
      ON KEY F9 OF Form_Main ACTION NewForm()
      ON KEY F11 OF Form_Main ACTION NewModule()

      DEFINE FRAME FRAME_1
         ROW 33
         COL 575
         WIDTH 210
         HEIGHT 30
      END FRAME

      DEFINE LABEL label_User
         PARENT Form_Main
         ROW 41
         COL 580
         WIDTH 120
         VALUE 'User Components:'
      END LABEL

      DEFINE COMBOBOX User
         PARENT Form_Main
         ROW 37
         COL 690
         WIDTH 90
         TOOLTIP 'User Components...'
         DROPPEDWIDTH 150
      END COMBOBOX

      FillUserComponents()

      Form_main.user.VALUE := 0
      Form_main.user.enabled := .F.


      #define STATUSITEM_OFFSET 1
      DEFINE STATUSBAR
         STATUSITEM CompilerVersion DEFAULT
         STATUSITEM aMsgs[ 048 ] WIDTH 420
         STATUSITEM '' WIDTH 170
         STATUSITEM '' WIDTH 75
      END STATUSBAR


      @ 003, 5 BUTTON New ;
         PICTURE 'NEW' ;
         ACTION NewProject() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 049 ]

      @ 003, 35 BUTTON Open ;
         PICTURE 'OPEN' ;
         ACTION OpenProject() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 050 ]

      @ 003, 65 BUTTON Close ;
         PICTURE 'XCLOSE' ;
         ACTION CloseProject() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 051 ]

      @ 033, 5 BUTTON NewForm ;
         PICTURE 'NEWFORM' ;
         ACTION ( lVirtualForm := .F., NewForm() ) ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 052 ]

      @ 033, 35 BUTTON NewModule ;
         PICTURE 'NMODULE' ;
         ACTION NewModule() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 053 ]

      @ 033, 65 BUTTON NewReport ;
         PICTURE 'REPORT' ;
         ACTION NewReport() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 028 ]

      @ 003, 105 BUTTON Run ;
         PICTURE 'RUN' ;
         ACTION RunApplication() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 054 ]


      @ 033, 105 CHECKBUTTON Control_01 ;
         PICTURE 'SELECT' ;
         VALUE .T. WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 055 ] ;
         ON CHANGE Control_01_Click()


      // Form Controls ToolBar

      @ 003, 145 CHECKBUTTON Control_36 ;
         PICTURE 'CHILDWINDOW' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Panel Window' ;
         ON CHANGE Control_36_Click()

      @ 033, 145 CHECKBUTTON Control_35 ;
         PICTURE 'ACTIVEX' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Activex' ;
         ON CHANGE Control_35_Click()

      @ 003, 175 CHECKBUTTON Control_02 ;
         PICTURE 'ZBUTTON' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Button' ;
         ON CHANGE Control_02_Click()

      @ 003, 205 CHECKBUTTON Control_03 ;
         PICTURE 'XCHECK' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'CheckBox' ;
         ON CHANGE Control_03_Click()

      @ 003, 235 CHECKBUTTON Control_04 ;
         PICTURE 'XLIST' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'ListBox' ;
         ON CHANGE Control_04_Click()

      @ 003, 265 CHECKBUTTON Control_05 ;
         PICTURE 'XCOMBO' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'ComboBox' ;
         ON CHANGE Control_05_Click()

      @ 003, 295 CHECKBUTTON Control_06 ;
         PICTURE 'CHECKBUTTON' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'CheckButton' ;
         ON CHANGE Control_06_Click()

      @ 003, 325 CHECKBUTTON Control_07 ;
         PICTURE 'GRID' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Grid' ;
         ON CHANGE Control_07_Click()

      @ 003, 355 CHECKBUTTON Control_08 ;
         PICTURE 'SLIDER' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Slider' ;
         ON CHANGE Control_08_Click()

      @ 003, 385 CHECKBUTTON Control_09 ;
         PICTURE 'SPINNER' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Spinner' ;
         ON CHANGE Control_09_Click()

      @ 003, 415 CHECKBUTTON Control_10 ;
         PICTURE 'IMAGE' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Image' ;
         ON CHANGE Control_10_Click()

      @ 003, 445 CHECKBUTTON Control_11 ;
         PICTURE 'TREE' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Tree' ;
         ON CHANGE Control_11_Click()

      @ 003, 475 CHECKBUTTON Control_12 ;
         PICTURE 'DATEPICKER' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'DatePicker' ;
         ON CHANGE Control_12_Click()

      @ 003, 505 CHECKBUTTON Control_13 ;
         PICTURE 'TEXTBOX' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'TextBox' ;
         ON CHANGE Control_13_Click()

      @ 003, 535 CHECKBUTTON Control_14 ;
         PICTURE 'EDITBOX' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'EditBox' ;
         ON CHANGE Control_14_Click()

      @ 033, 175 CHECKBUTTON Control_15 ;
         PICTURE 'LABEL' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Label' ;
         ON CHANGE Control_15_Click()


      @ 033, 235 CHECKBUTTON Control_17 ;
         PICTURE 'RADIOGROUP' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'RadioGroup' ;
         ON CHANGE Control_17_Click()

      @ 033, 265 CHECKBUTTON Control_18 ;
         PICTURE 'FRAME' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Frame' ;
         ON CHANGE Control_18_Click()

      @ 033, 295 CHECKBUTTON Control_19 ;
         PICTURE 'TAB' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Tab' ;
         ON CHANGE Control_19_Click()

      @ 033, 325 CHECKBUTTON Control_20 ;
         PICTURE 'ANIMATEBOX' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'AnimateBox' ;
         ON CHANGE Control_20_Click()

      @ 033, 355 CHECKBUTTON Control_21 ;
         PICTURE 'HYPERLINK' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Hyperlink' ;
         ON CHANGE Control_21_Click()

      @ 033, 385 CHECKBUTTON Control_22 ;
         PICTURE 'MonthCalendar' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'MonthCalendar' ;
         ON CHANGE Control_22_Click()

      @ 033, 415 CHECKBUTTON Control_23 ;
         PICTURE 'RICHEDIT' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'RichEditBox' ;
         ON CHANGE Control_23_Click()

      @ 033, 445 CHECKBUTTON Control_24 ;
         PICTURE 'PROGRESSBAR' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'ProgressBar' ;
         ON CHANGE Control_24_Click()

      @ 033, 475 CHECKBUTTON Control_25 ;
         PICTURE 'PLAYER' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Player' ;
         ON CHANGE Control_25_Click()

      @ 033, 505 CHECKBUTTON Control_26 ;
         PICTURE 'IPADDRESS' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'IP Address' ;
         ON CHANGE Control_26_Click()

      @ 033, 205 CHECKBUTTON Control_27 ;
         PICTURE 'TIMER' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Timer' ;
         ON CHANGE Control_27_Click()


      @ 033, 535 CHECKBUTTON Control_16 ;
         PICTURE 'BROWSE' ;
         VALUE .F. WIDTH 29 HEIGHT 29 ;
         TOOLTIP 'Browse' ;
         ON CHANGE Control_16_Click()

/*
  @ 003,535 BUTTON DeleteControl ;
   PICTURE 'DELETE' ;
   ACTION  DeleteControl() ;
   WIDTH 29 HEIGHT 29 ;
   TOOLTIP aMsgs [ 056 ]

  @ 033,535 BUTTON TabOrder ;
   PICTURE 'TABORDER' ;
   ACTION EditTabOrder()  ;
   WIDTH 29 HEIGHT 29 ;
   TOOLTIP aMsgs [ 057 ]

*/

      //

      @ 003, 575 BUTTON Control_28 ;
         PICTURE 'XMENU' ;
         ACTION MainMenuBuilder() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 058 ]

      @ 003, 605 BUTTON Control_31 ;
         PICTURE 'CONTEXTMENU' ;
         ACTION ContextMenuBuilder() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 059 ]

      @ 003, 635 BUTTON Control_30 ;
         PICTURE 'STATUSBAR' ;
         ACTION StatusBarBuilder() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 060 ]

      @ 003, 665 BUTTON Control_29 ;
         PICTURE 'TLBAR' ;
         ACTION ToolBarBuilder() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 061 ]

      @ 003, 695 BUTTON Control_32 ;
         PICTURE 'NOTIFY' ;
         ACTION ContextMenuBuilder( 'N' ) ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 062 ]

      @ 003, 725 BUTTON Control_33 ;
         PICTURE 'DROPDOWN' ;
         ACTION DropDownMenuBuilder() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 063 ]

      @ 003, 755 BUTTON Control_34 ;
         PICTURE 'SPLITBOX' ;
         ACTION SplitBoxBuilder() ;
         WIDTH 29 HEIGHT 29 ;
         TOOLTIP aMsgs[ 064 ]

      // End

      @ 003, 800 BUTTON Button_BuildLog CAPTION " Build   Log " WIDTH 59 HEIGHT 59 MULTILINE ;
         ACTION {|| lFlagBuildLog := .NOT. ( lFlagBuildLog ), IF ( lFlagBuildLog, FormBuildLog.SHOW, FormBuildLog.HIDE ) }

      Form_Main.Button_BuildLog.ENABLED := .F.

      @ 003, 875 BUTTON Button_Debug PICTURE "_dbgbutton" WIDTH 59 HEIGHT 59 TOOLTIP "Debug" ACTION ( ENABLEDEBUGGER := .T., RunApplication() )

      Proc_DEFINE_MAIN_MENU ()
      Form_Main.SnapToGrid.Checked := .T.

   END WINDOW


   DEFINE WINDOW FormBuildLog ;
         AT 0, 0 ;
         WIDTH 800 ;
         HEIGHT 600 ;
         TITLE "HMG-IDE: Build.log" ;
         WINDOWTYPE STANDARD ;
         FONTNAME "Courier New" FONTSIZE 12 ;
         NOMINIMIZE NOMAXIMIZE ;
         NOAUTORELEASE ;
         NOSHOW ;
         ONINTERACTIVECLOSE {|| lFlagBuildLog := .F., .T. } ;
         ONSIZE {|| FormBuildLog.EditBox1.WIDTH := ( FormBuildLog.WIDTH - 30 ), FormBuildLog.EditBox1.HEIGHT := ( FormBuildLog.HEIGHT - 60 ) } ;
         ONMAXIMIZE {|| FormBuildLog.EditBox1.WIDTH := ( FormBuildLog.WIDTH - 30 ), FormBuildLog.EditBox1.HEIGHT := ( FormBuildLog.HEIGHT - 60 ) }
      @ 10, 10 EDITBOX EditBox1 WIDTH ( FormBuildLog.WIDTH - 30 ) HEIGHT ( FormBuildLog.HEIGHT - 60 ) VALUE ""
   END WINDOW

   FormBuildLog.CENTER


   DEFINE WINDOW loading AT 0, 0 WIDTH 310 HEIGHT 85 + IF ( IsVistaOrLater() .AND. IsAppThemed(), 5, 0 ) TITLE '' child noshow nocaption

      DEFINE LABEL label_1
         ROW 12
         COL 86
         WIDTH 200
         HEIGHT 30
         VALUE aMsgs[ 083 ]
      END LABEL

      DEFINE PROGRESSBAR progress_1
         ROW 35
         COL 15
         WIDTH 272
         HEIGHT 30
         RANGEMIN 1
         RANGEMAX 100
         VALUE 1
         SMOOTH .T.
      END PROGRESSBAR

   END WINDOW

   loading.CENTER

   DEFINE WINDOW building AT 0, 0 WIDTH 310 HEIGHT 85 + IF ( IsVistaOrLater() .AND. IsAppThemed(), 5, 0 ) TITLE '' child noshow nocaption
      DEFINE LABEL label_1
         ROW 30
         COL 85
         WIDTH 200
         HEIGHT 30
         VALUE aMsgs[ 084 ]
      END LABEL
   END WINDOW

   Building.CENTER


   PUBLIC ProjectHeight := 130 + GetTitleHeight() + GetBorderHeight()


   hFactor := ( GetDesktopHeight() - 600 ) / 2

   DEFINE WINDOW Project ;
         AT MainHeight + 1 + IF ( IsVistaOrLater() .AND. IsAppThemed(), 10, 0 ), 0 ;
         WIDTH 302 ;
         HEIGHT ProjectHeight + hFactor ;
         TITLE aMsgs[ 065 ] ;
         CHILD ;
         NOMAXIMIZE ;
         NOMINIMIZE ;
         NOSYSMENU ;
         NOSIZE

      ON KEY ALT + F4 OF project ACTION NIL

      ON KEY F2 OF project ACTION OpenProject()
      ON KEY F5 OF project ACTION RunApplication()
      ON KEY F8 OF project ACTION ( ENABLEDEBUGGER := .T., RunApplication() )
      ON KEY F9 OF project ACTION NewForm()
      ON KEY F11 OF project ACTION NewModule()

      DEFINE TAB Tab_1 AT 3, 3 WIDTH 290 HEIGHT 123 + hFactor MULTILINE

         PAGE aMsgs[ 066 ]

            DEFINE LISTBOX List_1
               ROW 47
               COL 5
               WIDTH 278
               HEIGHT 70 + hFactor
               ON DBLCLICK EditFile()
               TOOLTIP aMsgs[ 070 ]
            END LISTBOX

            Project.List_1.DeleteAllItems

         END PAGE

         PAGE aMsgs[ 067 ]

            DEFINE LISTBOX List_2
               ROW 47
               COL 5
               WIDTH 278
               HEIGHT 70 + hFactor
               ON DBLCLICK EditFile()
               TOOLTIP aMsgs[ 070 ]
            END LISTBOX

            Project.List_2.DeleteAllItems

         END PAGE

         PAGE aMsgs[ 068 ]

            DEFINE EDITBOX Edit_1
               ROW 47
               COL 5
               WIDTH 278
               HEIGHT 70 + hFactor
               FONTNAME "COURIER NEW"
               FONTSIZE 9
               TOOLTIP aMsgs[ 072 ]
            END EDITBOX

         END PAGE

         PAGE aMsgs[ 069 ]

            DEFINE LISTBOX List_3
               ROW 47
               COL 5
               WIDTH 278
               HEIGHT 70 + hFactor
               ON DBLCLICK EditFile()
               TOOLTIP aMsgs[ 070 ]
            END LISTBOX

         END PAGE

         PAGE aMsgs[ 278 ]

            DEFINE EDITBOX config
               ROW 47
               COL 5
               WIDTH 278
               HEIGHT 70 + hFactor
               FONTNAME "COURIER NEW"
               FONTSIZE 9
               TOOLTIP '.hbc options (they should come in separate lines): libs=[<libname[s]>],hbcs=[<.hbc file[s]>], gt=[gtname], syslibs=[<libname[s]>],frameworks=[<framework[s]>], prgflags=[Harbour flags], cflags=[C compilerflags], resflags=[resource compiler flags], ldflags=[linker flags], pflags=[flags for plugins], libpaths=[paths], sources=[source files],psources=[source files for plugins], incpaths=[paths], requests=[func],instfiles=[files], instpaths=[paths], autohbcs=[<.ch>:<.hbc>],plugins=[plugins],gui|mt|pic|shared|nulrdd|nodefgt|debug|opt|map|strip|hbcppmm|winuni|implib|run|inc=[yes|no], cpp=[yes|no|def], warn=[max|yes|low|no|def],compr=[yes|no|def|min|max], head=[off|full|native|dep], skip=<reason>,stop=<reason>, echo=<text>'
            END EDITBOX

         END PAGE

         PAGE aMsgs[ 279 ]

            DEFINE LISTBOX List_4
               ROW 47
               COL 5
               WIDTH 278
               HEIGHT 70 + hFactor
               ON DBLCLICK EditFile()
               TOOLTIP aMsgs[ 070 ]
            END LISTBOX

         END PAGE

         PAGE aMsgs[ 095 ]

            DEFINE LISTBOX tables
               ROW 47
               COL 5
               WIDTH 278
               HEIGHT 70 + hFactor
               ON DBLCLICK EditFile()
               TOOLTIP aMsgs[ 070 ]
            END LISTBOX

            Project.tables.DeleteAllItems

         END PAGE

      END TAB

   END WINDOW

   IF WinMajorVersionNumber() >= 6 .AND. WinMinorVersionNumber() >= 1

      nDeltaProp := 25

   ELSE

      nDeltaProp := 0

   ENDIF

   DEFINE WINDOW Properties ;
         AT mainHeight + ProjectHeight + 1 + IF ( IsVistaOrLater() .AND. IsAppThemed(), 20, 0 ) + hFactor, 0 ;
         WIDTH 302 ;
         HEIGHT 230 + GetTitleHeight() + GetBorderHeight() + 1 + hFactor - nDeltaProp ;
         TITLE aMsgs[ 074 ] ;
         CHILD ;
         NOMAXIMIZE ;
         NOMINIMIZE ;
         NOSYSMENU ;
         NOSIZE

      ON KEY ALT + F4 OF properties ACTION NIL

      ON KEY F2 OF properties ACTION OpenProject()
      ON KEY F5 OF properties ACTION RunApplication()
      ON KEY F8 OF properties ACTION ( ENABLEDEBUGGER := .T., RunApplication() )
      ON KEY F9 OF properties ACTION NewForm()
      ON KEY F11 OF properties ACTION NewModule()

      DEFINE COMBOBOX Combo_1
         ROW 3
         COL 3
         WIDTH 290
         ITEMS { '' }
         VALUE 1
         ONCHANGE IF ( Properties.Combo_1.Item ( Properties.Combo_1.Value ) = 'Form', ( UpdateDesignFormProperties(), SelectControl ( '' ) ), SelectControl ( Properties.Combo_1.Item ( Properties.Combo_1.Value ) ) )
      END COMBOBOX

      Properties.Combo_1.DeleteAllItems

      DEFINE TAB Tab_1 AT 29, 3 WIDTH 290 HEIGHT 198 + hFactor - nDeltaProp

         PAGE aMsgs[ 075 ]

            DEFINE GRID Grid_1
               ROW 27
               COL 5
               WIDTH 278
               HEIGHT 164 + hFactor - nDeltaProp
               HEADERS { aMsgs[ 077 ], aMsgs[ 078 ] }
               WIDTHS { 125, 122 }
               ITEMS { { '', '' }, { '', '' }, { '', '' }, { '', '' }, { '', '' } }
               FONTNAME 'Arial'
               FONTSIZE 9
               ON DBLCLICK PropertyEdit()
               TOOLTIP aMsgs[ 079 ]
            END GRID

            Properties.Grid_1.DeleteAllItems

         END PAGE

         PAGE aMsgs[ 076 ]

            DEFINE GRID Grid_2
               ROW 27
               COL 5
               WIDTH 278
               HEIGHT 164 + hFactor - nDeltaProp
               HEADERS { aMsgs[ 080 ], aMsgs[ 081 ], '', '', '' }
               WIDTHS { 105, 90, 20, 20, 20 }
               ITEMS { { '', '', '', '', '' }, { '', '', '', '', '' }, { '', '', '', '', '' }, { '', '', '', '', '' }, { '', '', '', '', '' } }
               FONTNAME 'Arial'
               FONTSIZE 9
               ON DBLCLICK EventEdit()
               TOOLTIP aMsgs[ 082 ]
            END GRID

            Properties.Grid_2.DeleteAllItems

         END PAGE

      END TAB

   END WINDOW


   LOAD WINDOW rep_build_step_1
   LOAD WINDOW rep_build_step_2
   LOAD WINDOW rep_build_step_3
   LOAD WINDOW reportsummaryoptions
   LOAD WINDOW reporttitlesoptions
   LOAD WINDOW ReportFormatOptions
   LOAD WINDOW groupingOptions

   ACTIVATE WINDOW Building, Loading, Properties, Project, rep_build_step_1, rep_build_step_2, rep_build_step_3, reportsummaryoptions, reporttitlesoptions, ReportFormatOptions, groupingoptions, Form_Main

RETURN NIL


//------------------------------------------------
PROCEDURE BuildIn64bits ( lBuild64 )
//------------------------------------------------
   Form_Main.IsBuild32.CHECKED := ! lBuild64
   Form_Main.IsBuild64.CHECKED := lBuild64
   IF lBuild64 == .T.
      SaveString ( StartUpFolder + cFileBuildBat, '64-bits' )
      CompilerVersion := HMG_GetCompileVersion64 ()

   ELSE
      SaveString ( StartUpFolder + cFileBuildBat, '32-bits' )
      CompilerVersion := HMG_GetCompileVersion32 ()
   ENDIF
   Form_Main.StatusBar.Item ( 0 + STATUSITEM_OFFSET ) := CompilerVersion

RETURN


//------------------------------------------------
PROCEDURE CHANGE_TITLES()
//------------------------------------------------
   Form_Main.StatusBar.Item ( 1 + STATUSITEM_OFFSET ) := aMsgs[ 048 ]

   Project.TITLE := aMsgs[ 065 ]
   Project.Tab_1.CAPTION ( 1 ) := aMsgs[ 066 ]
   Project.Tab_1.CAPTION ( 2 ) := aMsgs[ 067 ]
   Project.Tab_1.CAPTION ( 3 ) := aMsgs[ 068 ]
   Project.Tab_1.CAPTION ( 4 ) := aMsgs[ 069 ]
   Project.Tab_1.CAPTION ( 5 ) := aMsgs[ 278 ]
   Project.Tab_1.CAPTION ( 6 ) := aMsgs[ 279 ]
   Project.Tab_1.CAPTION ( 7 ) := aMsgs[ 095 ]

   Properties.TITLE := aMsgs[ 074 ]
   Properties.Tab_1.CAPTION ( 1 ) := aMsgs[ 075 ]
   Properties.Tab_1.CAPTION ( 2 ) := aMsgs[ 076 ]
   Properties.Grid_1.ColumnHEADER ( 1 ) := aMsgs[ 077 ]
   Properties.Grid_1.ColumnHEADER ( 2 ) := aMsgs[ 078 ]
   Properties.Grid_2.ColumnHEADER ( 1 ) := aMsgs[ 080 ]
   Properties.Grid_2.ColumnHEADER ( 2 ) := aMsgs[ 081 ]

   Form_Main.New.TOOLTIP := aMsgs[ 049 ]
   Form_Main.Open.TOOLTIP := aMsgs[ 050 ]
   Form_Main.Close.TOOLTIP := aMsgs[ 051 ]
   Form_Main.NewForm.TOOLTIP := aMsgs[ 052 ]
   Form_Main.NewModule.TOOLTIP := aMsgs[ 053 ]
   Form_Main.NewReport.TOOLTIP := aMsgs[ 028 ]
   Form_Main.Run.TOOLTIP := aMsgs[ 054 ]
   Form_Main.Control_01.TOOLTIP := aMsgs[ 055 ]
   Form_Main.Control_28.TOOLTIP := aMsgs[ 058 ]
   Form_Main.Control_31.TOOLTIP := aMsgs[ 059 ]
   Form_Main.Control_30.TOOLTIP := aMsgs[ 060 ]
   Form_Main.Control_29.TOOLTIP := aMsgs[ 061 ]
   Form_Main.Control_32.TOOLTIP := aMsgs[ 062 ]
   Form_Main.Control_33.TOOLTIP := aMsgs[ 063 ]
   Form_Main.Control_34.TOOLTIP := aMsgs[ 064 ]

   Project.List_1.TOOLTIP := aMsgs[ 070 ]
   Project.List_2.TOOLTIP := aMsgs[ 070 ]
   Project.Edit_1.TOOLTIP := aMsgs[ 072 ]
   Project.List_3.TOOLTIP := aMsgs[ 070 ]
   Project.List_4.TOOLTIP := aMsgs[ 070 ]
   Project.tables.TOOLTIP := aMsgs[ 070 ]

   Properties.Grid_1.TOOLTIP := aMsgs[ 079 ]
   Properties.Grid_2.TOOLTIP := aMsgs[ 082 ]

RETURN


//-------------------------------------------
PROCEDURE LOAD_LANGUAGE_MESSAGE()
//-------------------------------------------
   LOCAL i, nNum, cText, cMsgs, cLin

   cMsgs := hb_MemoRead ( StartUpFolder + 'lng\' + AllTrim ( hb_utf8StrTran ( hb_MemoRead (StartUpFolder + cFileLanguage ), Chr(26 ), ' ' ) ) )

   AFill ( aMsgs, "XXX" )

   FOR i := 1 TO HMG_LEN ( cMsgs )
      cLin := AllTrim( MemoLine ( cMsgs, 254, i ) )
      nNum := Val ( hb_ULeft ( cLin, 3 ) )
      IF nNum > 0
         cText := AllTrim ( hb_USubStr ( cLin, 5, 254 ) )
         aMsgs[ nNum ] := cText
      ENDIF
   NEXT i

RETURN


//---------------------------------------------
PROCEDURE Proc_DEFINE_MAIN_MENU()
//---------------------------------------------
   LOCAL cMsgs, lBuild64Bits

   IF IsMainMenuDefined ( "Form_Main" ) == .T.
      lBuild64Bits := Form_Main.IsBuild64.CHECKED
      RELEASE MAIN MENU OF Form_Main
   ELSE
      cMsgs := hb_USubStr ( AllTrim ( hb_MemoRead ( StartUpFolder + cFileBuildBat ) ), 1, 7 )
      IF HMG_UPPER ( cMsgs ) == HMG_UPPER ( "64-bits" )
         lBuild64Bits := .T.
      ELSE
         lBuild64Bits := .F.
      ENDIF
   ENDIF

   DEFINE MAIN MENU OF Form_Main

      POPUP aMsgs[ 045 ]
         ITEM aMsgs[ 001 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'MNEW', 'NEW' ) ACTION NewProject()
         ITEM aMsgs[ 002 ] + Chr( 8 ) + 'F2' IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'MOPEN', 'OPEN' ) ACTION OpenProject()
         ITEM aMsgs[ 003 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'MXCLOSE', 'XCLOSE' ) ACTION CloseProject()
         SEPARATOR
         ITEM aMsgs[ 006 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XEXIT', 'EXIT' ) ACTION Exit()
      END POPUP

      POPUP aMsgs[ 046 ]
         ITEM aMsgs[ 007 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XDELETE', 'DELETE' ) ACTION DeleteControl()
         SEPARATOR
         ITEM aMsgs[ 008 ] ACTION EditTabOrder()
         SEPARATOR
         ITEM aMsgs[ 009 ] ACTION if ( SnapToGrid == .T., ( SnapToGrid := .F., Form_Main.SnapToGrid.Checked := .F. ), ( SnapToGrid := .T., Form_Main.SnapToGrid.Checked := .T. ) ) NAME SnapToGrid
         SEPARATOR
         POPUP aMsgs[ 010 ]
            ITEM aMsgs[ 011 ] ACTION Proc_DeleteMainMenu()
            ITEM aMsgs[ 012 ] ACTION Proc_DeleteToolBar()
            ITEM aMsgs[ 013 ] ACTION Proc_DeleteContextMenu()
            ITEM aMsgs[ 014 ] ACTION Proc_DeleteStatusBar()
            ITEM aMsgs[ 015 ] ACTION Proc_DeleteNotifyMenu()
            ITEM aMsgs[ 016 ] ACTION Proc_DeleteSplitBox()
         END POPUP
      END POPUP

      POPUP aMsgs[ 017 ]
         ITEM aMsgs[ 018 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XVIEW', 'VIEW' ) ACTION ViewCode()
      END POPUP

      POPUP aMsgs[ 019 ]
         ITEM aMsgs[ 021 ] + Chr( 8 ) + 'F5' IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XRUN', 'RUN' ) ACTION ( MixedMode := .F., RunApplication() )
         ITEM aMsgs[ 023 ] ACTION ( RESETINCREMENTAL := .T., RunApplication(), MsgInfo( 'Operation Completed.' ) )
         SEPARATOR
         ITEM aMsgs[ 022 ] + Chr( 8 ) + 'F8' ACTION ( ENABLEDEBUGGER := .T., RunApplication() )
         SEPARATOR
         ITEM aMsgs[ 026 ] + Chr( 8 ) + 'F11' IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XNMODULE', 'NMODULE' ) ACTION NewModule()
         ITEM aMsgs[ 024 ] + Chr( 8 ) + 'F9' IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XNEWFORM', 'NEWFORM' ) ACTION ( lVirtualForm := .F., NewForm() )
         ITEM aMsgs[ 028 ] ACTION NewReport()
         ITEM aMsgs[ 280 ] ACTION NewInclude()
         ITEM aMsgs[ 096 ] ACTION NewTable()
         SEPARATOR
         ITEM aMsgs[ 027 ] ACTION AddItem()
         ITEM aMsgs[ 030 ] ACTION EditFile()
         ITEM aMsgs[ 031 ] ACTION ExcludeFile()
         ITEM aMsgs[ 029 ] ACTION refreshproject()
         SEPARATOR
         ITEM aMsgs[ 004 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XSAVE', 'SAVE' ) ACTION Save()
         ITEM aMsgs[ 005 ] ACTION if ( _IsWIndowDefined ( DesignForm ), DoMethod ( DesignForm, 'Release' ), MsgStop( aMsgs[ 086 ], 'HMG IDE' ) )
         SEPARATOR
         ITEM aMsgs[ 032 ] ACTION SetMain()
      END POPUP


      POPUP aMsgs[ 033 ]
         POPUP aMsgs[ 034 ]
            ITEM aMsgs[ 035 ] ACTION MainMenuBuilder()
            ITEM aMsgs[ 036 ] ACTION StatusBarBuilder()
            ITEM aMsgs[ 037 ] ACTION ContextMenuBuilder()
            ITEM aMsgs[ 038 ] ACTION ToolBarBuilder()
            ITEM aMsgs[ 039 ] ACTION DropDownMenuBuilder()
            ITEM aMsgs[ 040 ] ACTION ContextMenuBuilder( 'N' )
            ITEM aMsgs[ 041 ] ACTION SplitBoxBuilder()
         END POPUP
         SEPARATOR
         ITEM aMsgs[ 042 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XPREFERENCES', 'PREFERENCES' ) ACTION Preferences()
      END POPUP

      POPUP "Build"
         ITEM "32-bits" ACTION BuildIn64bits( .F. ) NAME IsBuild32 CHECKED
         ITEM "64-bits" ACTION BuildIn64bits( .T. ) NAME IsBuild64 CHECKED
      END POPUP

      POPUP aMsgs[ 043 ]
         ITEM aMsgs[ 020 ] ACTION {|| ShellExecute( 0, "open", "rundll32.exe", "url.dll,FileProtocolHandler " + docpath, , 1 ) }
         ITEM aMsgs[ 044 ] IMAGE If ( nVersion < 6.0 .OR. .NOT. IsAppThemed(), 'XXHELP', 'XHELP' ) ACTION msginfo ( Author + CRLF + _HLK, 'HMG-IDE' )
      END POPUP

   END MENU

   BuildIn64bits ( lBuild64Bits )

RETURN


//---------------------------------------------
PROCEDURE AutoBuild()
//---------------------------------------------
   IF nParameterCount == 1
      OpenProject()
   ENDIF

RETURN


//---------------------------------------------
PROCEDURE ResetProjectIncrementalBuildData()
//---------------------------------------------
   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF
   IF lForceFullWarning == .T.
      IF MsgYesNo ( aMsgs[ 098 ] + CRLF + CRLF + aMsgs[ 099 ] )
         ResetProjectInfo := .T.
      ENDIF
   ELSE
      ResetProjectInfo := .T.
   ENDIF

RETURN


//-------------------------------------------
PROCEDURE LoadUserComponents()
//-------------------------------------------
   LOCAL cCurrentDataType, cTemp
   LOCAL i
   LOCAL cComponentInfo
   LOCAL j
   LOCAL cComponentLine

	*** User Components Load	

   PUBLIC nComponentCount := ADir ( StartUpFolder + "*.UCI" )

   PUBLIC aComponentFileNames[ nComponentCount ]
   PUBLIC aComponentNames[ nComponentCount ]
   PUBLIC aComponentProperties[ nComponentCount ]
   PUBLIC aComponentEvents[ nComponentCount ]

   PUBLIC aComponentPropValues[ nComponentCount ]
   PUBLIC aComponentEvtValues[ nComponentCount ]

   ADir ( StartUpFolder + '*.UCI', aComponentFileNames )

   FOR i := 1 TO nComponentCount

      aComponentNames[ i ] := hb_ULeft ( aComponentFileNames[ i ], HMG_LEN ( aComponentFileNames[ i ] ) - 4 )
      aComponentProperties[ i ] := {}
      aComponentEvents[ i ] := {}

      aComponentPropValues[ i ] := {}

      aComponentEvtValues[ i ] := {}

      __mvPublic ( aComponentNames[ i ] + 'Count' )
      __mvPut ( aComponentNames[ i ] + 'Count', 0 )

      cComponentInfo := hb_MemoRead ( aComponentFileNames[ i ] )

      FOR j := 1 TO MLCount ( cComponentInfo )

         cComponentLine := AllTrim ( MemoLine ( cComponentInfo, , j ) )

         IF HMG_UPPER ( cComponentLine ) == '[PROPERTIES]'

            cCurrentDataType := 'Property'

         ELSEIF HMG_UPPER ( cComponentLine ) == '[EVENTS]'

            cCurrentDataType := 'Event'

         ELSE

            IF .NOT. Empty ( cComponentLine )

               IF cCurrentDataType == 'Property'

                  IF hb_UAt( ",", cComponentLine ) <> 0

                     cTemp := hb_ULeft ( cComponentLine, hb_UAt( ",", cComponentLine ) - 1 )
                     AAdd ( aComponentProperties[ i ], cTemp )

                     cTemp := hb_USubStr ( cComponentLine, hb_UAt( ",", cComponentLine ) + 1, 255 )
                     AAdd ( aComponentPropValues[ i ], cTemp )

                  ELSE

                     cTemp := cComponentLine

                     AAdd ( aComponentProperties[ i ], cTemp )

                     AAdd ( aComponentPropValues[ i ], '' )

                  ENDIF

               ELSEIF cCurrentDataType == 'Event'

                  IF hb_UAt( ",", cComponentLine ) <> 0

                     cTemp := hb_ULeft ( cComponentLine, hb_UAt( ",", cComponentLine ) - 1 )
                     AAdd ( aComponentEvents[ i ], cTemp )

                     cTemp := hb_USubStr ( cComponentLine, hb_UAt( ",", cComponentLine ) + 1, 255 )
                     AAdd ( aComponentEvtValues[ i ], cTemp )

                  ELSE

                     cTemp := cComponentLine

                     AAdd ( aComponentEvents[ i ], cTemp )

                     AAdd ( aComponentEvtValues[ i ], '' )

                  ENDIF

               ENDIF

            ENDIF

         ENDIF

      NEXT j

   NEXT i

RETURN


PROCEDURE FillUserComponents()

   LOCAL i

   IF nComponentCount > 0

      Form_main.user.deleteallitems

      FOR i := 1 TO nComponentCount
         Form_main.user.additem ( aComponentNames[ i ] )
      NEXT i

   ENDIF

RETURN


PROCEDURE Proc_DeleteMainMenu()

   IF ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Empty( _hmgide_CurrentMainMenu )
      MsgStop ( aMsgs[ 100 ], 'HMG IDE' )
   ELSE
      IF MsgYesNo( aMsgs[ 099 ], 'HMG IDE' )
         _hmgide_CurrentMainMenu := ''
         DesignFormModified := .T.
      ENDIF
   ENDIF

RETURN

PROCEDURE Proc_DeleteToolBar()

   IF ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Empty( _hmgide_CurrentToolBar )
      MsgStop ( aMsgs[ 100 ], 'HMG IDE' )
   ELSE
      IF MsgYesNo( aMsgs[ 99 ], 'HMG IDE' )
         _hmgide_CurrentToolBar := ''
         DesignFormModified := .T.
      ENDIF
   ENDIF

RETURN

PROCEDURE Proc_DeleteContextMenu()

   IF ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Empty( _hmgide_CurrentContextMenu )
      MsgStop ( aMsgs[ 100 ], 'HMG IDE' )
   ELSE
      IF MsgYesNo( aMsgs[ 099 ], 'HMG IDE' )
         _hmgide_CurrentContextMenu := ''
         DesignFormModified := .T.
      ENDIF
   ENDIF

RETURN


PROCEDURE Proc_DeleteStatusBar()

   IF ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Empty( _hmgide_CurrentStatusBar )
      MsgStop ( aMsgs[ 100 ], 'HMG IDE' )
   ELSE
      IF MsgYesNo( aMsgs[ 099 ], 'HMG IDE' )
         _hmgide_CurrentStatusBar := ''
         DesignFormModified := .T.
      ENDIF
   ENDIF

RETURN

PROCEDURE Proc_DeleteNotifyMenu()

   IF ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Empty( _hmgide_CurrentNotifyMenu )
      MsgStop ( aMsgs[ 100 ], 'HMG IDE' )
   ELSE
      IF MsgYesNo( aMsgs[ 099 ], 'HMG IDE' )
         _hmgide_CurrentNotifyMenu := ''
         DesignFormModified := .T.
      ENDIF
   ENDIF

RETURN

PROCEDURE Proc_DeleteSplitBox()

   IF ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Empty( _hmgide_CurrentSplitBox )
      MsgStop ( aMsgs[ 100 ], 'HMG IDE' )
   ELSE
      IF MsgYesNo( aMsgs[ 099 ], 'HMG IDE' )
         _hmgide_CurrentSplitBox := ''
         DesignFormModified := .T.
      ENDIF
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE SetPropertyVirtualOn
*------------------------------------------------------------------------------*
   LOCAL k
   LOCAL wh
   LOCAL VirtualHeight
   LOCAL VirtualWidth
   LOCAL w
   LOCAL h

   VirtualHeight := GetProperty ( DesignForm, 'Height' ) * 2
   VirtualWidth := GetProperty ( DesignForm, 'Width' ) * 2

   lVirtualForm := .T.

   __mvPut ( DesignForm + 'VirtualWidth', AllTrim ( Str ( VirtualWidth ) ) )
   __mvPut ( DesignForm + 'VirtualHeight', AllTrim ( Str ( VirtualHeight ) ) )
   __mvPut ( DesignForm + 'VirtualSized', '.T.' )

   k := GetFormIndex ( DesignForm )
   wh := GetFormHandle ( DesignForm )

   w := GetWIndowWidth ( wh )
   h := GetWindowHeight ( wh )

   _HMG_aFormVirtualHeight[ k ] := VirtualHeight
   _HMG_aFormVirtualWidth[ k ] := VirtualWidth

   SetVirtualOn ( GetFormHandle ( DesignForm ) )

   SetScrollRange ( wh, SB_VERT, 0, VirtualHeight - h, 1 )

   SetScrollRange ( wh, SB_HORZ, 0, VirtualWidth - w, 1 )

   UpdateDesignFormProperties()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE SetPropertyVirtualOff
*------------------------------------------------------------------------------*
   LOCAL k

   DO WHILE .T.

      IF GetScrollPos ( DesignFormhandle, SB_HORZ ) == 0 .AND. GetScrollPos ( DesignFormhandle, SB_VERT ) == 0
         EXIT
      ENDIF

      SendMessage ( DesignFormHandle, WM_VSCROLL, SB_PAGEUP, 0 )
      DO EVENTS

      SendMessage ( DesignFormHandle, WM_HSCROLL, SB_PAGELEFT, 0 )
      DO EVENTS

   ENDDO

   lVirtualForm := .F.

   __mvPut ( DesignForm + 'VirtualWidth', 'Nil' )
   __mvPut ( DesignForm + 'VirtualHeight', 'Nil' )
   __mvPut ( DesignForm + 'VirtualSized', '.F.' )

   k := GetFormIndex ( DesignForm )

   SetVirtualOff ( GetFormHandle ( DesignForm ) )

   _HMG_aFormVirtualHeight[ k ] := 0
   _HMG_aFormVirtualWidth[ k ] := 0

   UpdateDesignFormProperties()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE DropDownMenuBuilder()
*------------------------------------------------------------------------------*
   LOCAL aList

   IF ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   aList := FillDropDownMenuList()

   DEFINE WINDOW DropDownMenuBuilder ;
         AT 0, 0 ;
         WIDTH 305 ;
         HEIGHT 250 + GetTitleHeight() + GetBorderHeight() ;
         TITLE aMsgs[ 101 ] ;
         MODAL ;
         NOSIZE

      DEFINE LISTBOX List1
         ROW 10
         COL 10
         WIDTH 170
         HEIGHT 227
         ITEMS aList
         VALUE 1
         ON DblClick ContextMenuBuilder( 'D', DropDownMenuBuilder.List1.VALUE, DropDownMenuBuilder.List1.Item ( DropDownMenuBuilder.List1.Value ) )
      END LISTBOX

      DEFINE BUTTON NEW
         ROW 10
         COL 190
         CAPTION aMsgs[ 102 ]
         ACTION NewDropDownMenu()
      END BUTTON

      DEFINE BUTTON EDIT
         ROW 40
         COL 190
         CAPTION aMsgs[ 103 ]
         ACTION ContextMenuBuilder( 'D', DropDownMenuBuilder.List1.VALUE, DropDownMenuBuilder.List1.Item ( DropDownMenuBuilder.List1.Value ) )
      END BUTTON

      DEFINE BUTTON DELETE
         ROW 70
         COL 190
         CAPTION aMsgs[ 104 ]
         ACTION DeleteDropDownMenu()
      END BUTTON

      DEFINE BUTTON ChangeOwner
         ROW 100
         COL 190
         CAPTION aMsgs[ 105 ]
         ACTION ChangeDropDownOwner()
      END BUTTON

      DEFINE BUTTON CLOSE
         ROW 210
         COL 190
         CAPTION aMsgs[ 106 ]
         ACTION ThisWindow.RELEASE
      END BUTTON

   END WINDOW

   DropDownMenuBuilder.CENTER

   DropDownMenuBuilder.ACTIVATE

   DoMethod ( DesignForm, 'SetFocus' )

   DrawGrid()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE ChangeDropDownOwner()
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL x
   LOCAL cOldName
   LOCAL cNewName
   LOCAL cNewMenu := ''
   LOCAL Line
   LOCAL LineCount

   i := DropDownMenuBuilder.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   cOldName := DropDownMenuBuilder.List1.Item( i )

   cNewName := AllTrim ( InputBox( aMsgs[ 107 ], aMsgs[ 108 ], cOldName ) )

   cNewName := AllTrim ( cNewName )

   IF Empty ( cNewName )
      RETURN
   ENDIF

   DropDownMenuBuilder.List1.Item( i ) := cNewName

   DropDownMenuBuilder.List1.VALUE := i

   // Update Menu

   LineCount := MLCount ( _hmgide_aDropDownMenus[ i ] )

   FOR x := 1 TO LineCount

      IF x == 1

         cNewMenu := cNewMenu + '    DEFINE DROPDOWN MENU BUTTON ' + cNewName + CRLF

      ELSE

         Line := MemoLine ( _hmgide_aDropDownMenus[ i ], 1024, x, 4, .T. )

         cNewMenu := cNewMenu + Line + CRLF

      ENDIF

   NEXT x

   _hmgide_aDropDownMenus[ i ] := cNewMenu

RETURN

*------------------------------------------------------------------------------*
PROCEDURE NewDropDownMenu()
*------------------------------------------------------------------------------*
   LOCAL cNewName
   LOCAL nBackItem

   cNewName := AllTrim ( InputBox( aMsgs[ 107 ], aMsgs[ 110 ] ) )

   IF Empty ( cNewName )
      RETURN
   ENDIF

   nBackItem := DropDownMenuBuilder.List1.VALUE

   AAdd ( _hmgide_aDropDownMenus, '' )

   DropDownMenuBuilder.List1.AddItem( cNewName )

   DropDownMenuBuilder.List1.VALUE := DropDownMenuBuilder.List1.ItemCount

   ContextMenuBuilder( 'D', HMG_LEN ( _hmgide_aDropDownMenus ), cNewName )

   IF _HMG_DialogCancelled == .T.

      DropDownMenuBuilder.List1.DeleteItem ( HMG_LEN ( _hmgide_aDropDownMenus ) )

      ADel ( _hmgide_aDropDownMenus, HMG_LEN ( _hmgide_aDropDownMenus ) )
      ASize ( _hmgide_aDropDownMenus, HMG_LEN ( _hmgide_aDropDownMenus ) - 1 )

      DropDownMenuBuilder.List1.VALUE := nBackItem

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE DeleteDropDownMenu()
*------------------------------------------------------------------------------*
   LOCAL i

   i := DropDownMenuBuilder.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   if ! MsgYesNo( aMsgs[ 099 ] )
      RETURN
   ENDIF

   ADel ( _hmgide_aDropDownMenus, i )
   ASize ( _hmgide_aDropDownMenus, HMG_LEN ( _hmgide_aDropDownMenus ) - 1 )

   DropDownMenuBuilder.List1.DeleteItem( i )
   DropDownMenuBuilder.List1.VALUE := 1

RETURN

*------------------------------------------------------------------------------*
FUNCTION FillDropDownMenuList
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL cName
   LOCAL aTemp := {}

   FOR i := 1 TO HMG_LEN ( _hmgide_aDropDownMenus )

      cName := AllTrim ( MemoLine ( _hmgide_aDropDownMenus[ i ], 1024, 1, 4, .T. ) )

      cName := hb_URight ( cName, HMG_LEN ( cName ) - 28 )

      AAdd ( atemp, cName )

   NEXT i

RETURN aTemp

*------------------------------------------------------------------------------*
PROCEDURE New ( Activate )
*------------------------------------------------------------------------------*

   IF IsWindowDefined( &DesignForm )
      DoMethod ( DesignForm, 'Release' )
   ENDIF

   OpenFormName := ''
   DesignFormModified := .T.

*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

   Properties.Combo_1.DeleteAllItems
   Properties.Combo_1.AddItem ( 'Form' )

*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

   __mvPublic ( DesignForm + 'Icon' )
   __mvPut ( DesignForm + 'Icon', '' )

   __mvPublic ( DesignForm + 'GripperText' )
   __mvPut ( DesignForm + 'GripperText', '' )

   __mvPublic ( DesignForm + 'Break' )
   __mvPut ( DesignForm + 'Break', '.F.' )

   __mvPublic ( DesignForm + 'Focused' )
   __mvPut ( DesignForm + 'Focused', '.F.' )

   __mvPublic ( DesignForm + 'TitleBar' )
   __mvPut ( DesignForm + 'TitleBar', '.T.' )

   __mvPublic ( DesignForm + 'SysMenu' )
   __mvPut ( DesignForm + 'SysMenu', '.T.' )

   __mvPublic ( DesignForm + 'Sizable' )
   __mvPut ( DesignForm + 'Sizable', '.T.' )

   __mvPublic ( DesignForm + 'Visible' )
   __mvPut ( DesignForm + 'Visible', '.T.' )

   __mvPublic ( DesignForm + 'Topmost' )
   __mvPut ( DesignForm + 'Topmost', '.F.' )

   __mvPublic ( DesignForm + 'AutoRelease' )
   __mvPut ( DesignForm + 'AutoRelease', '.T.' )

   __mvPublic ( DesignForm + 'MaxButton' )
   __mvPut ( DesignForm + 'MaxButton', '.T.' )

   __mvPublic ( DesignForm + 'MinButton' )
   __mvPut ( DesignForm + 'MinButton', '.T.' )

   __mvPublic ( DesignForm + 'Cursor' )
   __mvPut ( DesignForm + 'Cursor', '' )

   __mvPublic ( DesignForm + 'OnInit' )
   __mvPut ( DesignForm + 'OnInit', 'Nil' )

   __mvPublic ( DesignForm + 'OnRelease' )
   __mvPut ( DesignForm + 'OnRelease', 'Nil' )

   __mvPublic ( DesignForm + 'OnInteractiveClose' )
   __mvPut ( DesignForm + 'OnInteractiveClose', 'Nil' )

   __mvPublic ( DesignForm + 'OnMouseClick' )
   __mvPut ( DesignForm + 'OnMouseClick', 'Nil' )

   __mvPublic ( DesignForm + 'OnMouseDrag' )
   __mvPut ( DesignForm + 'OnMouseDrag', 'Nil' )

   __mvPublic ( DesignForm + 'OnMouseMove' )
   __mvPut ( DesignForm + 'OnMouseMove', 'Nil' )

   __mvPublic ( DesignForm + 'OnSize' )
   __mvPut ( DesignForm + 'OnSize', 'Nil' )

   __mvPublic ( DesignForm + 'OnMaximize' )
   __mvPut ( DesignForm + 'OnMaximize', 'Nil' )

   __mvPublic ( DesignForm + 'OnMinimize' )
   __mvPut ( DesignForm + 'OnMinimize', 'Nil' )

   __mvPublic ( DesignForm + 'OnPaint' )
   __mvPut ( DesignForm + 'OnPaint', 'Nil' )

   __mvPublic ( DesignForm + 'BackColor' )
   __mvPut ( DesignForm + 'BackColor', 'Nil' )

   __mvPublic ( DesignForm + 'NotifyIcon' )
   __mvPut ( DesignForm + 'NotifyIcon', '' )

   __mvPublic ( DesignForm + 'NotifyToolTip' )
   __mvPut ( DesignForm + 'NotifyToolTip', '' )

   __mvPublic ( DesignForm + 'OnNotifyClick' )
   __mvPut ( DesignForm + 'OnNotifyClick', 'Nil' )

   __mvPublic ( DesignForm + 'OnGotFocus' )
   __mvPut ( DesignForm + 'OnGotFocus', 'Nil' )

   __mvPublic ( DesignForm + 'OnLostFocus' )
   __mvPut ( DesignForm + 'OnLostFocus', 'Nil' )

   __mvPublic ( DesignForm + 'OnScrollUp' )
   __mvPut ( DesignForm + 'OnScrollUp', 'Nil' )

   __mvPublic ( DesignForm + 'OnScrollDown' )
   __mvPut ( DesignForm + 'OnScrollDown', 'Nil' )

   __mvPublic ( DesignForm + 'OnScrollLeft' )
   __mvPut ( DesignForm + 'OnScrollLeft', 'Nil' )

   __mvPublic ( DesignForm + 'OnScrollRight' )
   __mvPut ( DesignForm + 'OnScrollRight', 'Nil' )

   __mvPublic ( DesignForm + 'OnHScrollBox' )
   __mvPut ( DesignForm + 'OnHScrollBox', 'Nil' )

   __mvPublic ( DesignForm + 'OnVScrollBox' )
   __mvPut ( DesignForm + 'OnVScrollBox', 'Nil' )

   __mvPublic ( DesignForm + 'HelpButton' )
   __mvPut ( DesignForm + 'HelpButton', '.F.' )

   if ! lVirtualForm

      DEFINE WINDOW Form_1 AT mainHeight + 1, 235 WIDTH 550 HEIGHT 350 ;
            TITLE '' ;
            CHILD ;
            NOMAXIMIZE ;
            NOMINIMIZE ;
            ON MOUSECLICK AddControl() ;
            ON SIZE ( UpdateDesignFormProperties(), DesignFormModified := .T. ) ;
            ON INIT DrawGrid() ;
            ON MOUSEDRAG MoveControl() ;
            ON MOUSEMOVE CursorUpdate() ;
            ON PAINT DrawGrid() ;
            ON RELEASE ( Properties.Grid_1.DeleteAllItems, Properties.Grid_2.DeleteAllItems, Properties.Combo_1.DeleteAllItems, Properties.TITLE := aMsgs[ 074 ], SelectedControlName := '', if ( DesignFormModified == .T., if ( MsgYesNo (aMsgs[ 004 ] + ' ' + OpenFormName + '?' ) == .T., Save(), Nil ), Nil ), OpenFormName := '' ) ;
            ON GOTFOCUS DrawSelectedControlFrame() ;
            ON SCROLLUP SelectControl ( SelectedControlName ) ;
            ON SCROLLDOWN SelectControl ( SelectedControlName ) ;
            ON SCROLLLEFT SelectControl ( SelectedControlName ) ;
            ON SCROLLRIGHT SelectControl ( SelectedControlName ) ;
            ON HSCROLLBOX SelectControl ( SelectedControlName ) ;
            ON VSCROLLBOX SelectControl ( SelectedControlName )

         DEFINE TEXTBOX TEXT_DUMMY
            ROW 1000
            COL 1000
            WIDTH 0
            HEIGHT 0
         END TEXTBOX

         ON KEY DELETE ACTION DeleteControl()

         DEFINE TIMER internal_timer_1 INTERVAL 1 ACTION TimerTest()

         ON KEY F2 OF Form_1 ACTION OpenProject()
         ON KEY F5 OF Form_1 ACTION RunApplication()
         ON KEY F8 OF Form_1 ACTION ( ENABLEDEBUGGER := .T., RunApplication() )
         ON KEY F9 OF Form_1 ACTION NewForm()
         ON KEY F11 OF Form_1 ACTION NewModule()

      END WINDOW

   ELSE

      // msginfo ( __MVGET(DesignForm + 'VirtualWidth') , 'VirtualWidth' )
      // msginfo ( __MVGET(DesignForm + 'VirtualHeight') , 'VirtualHeight' )

      DEFINE WINDOW Form_1 AT mainHeight + 1, 235 WIDTH 10 HEIGHT 10 ;
            VIRTUAL WIDTH Val ( __mvGet( DesignForm + 'VirtualWidth' ) ) VIRTUAL HEIGHT Val ( __mvGet( DesignForm + 'VirtualHeight' ) ) ;
            TITLE '' ;
            CHILD ;
            NOMAXIMIZE ;
            NOMINIMIZE ;
            ON MOUSECLICK AddControl() ;
            ON SIZE ( UpdateDesignFormProperties(), DesignFormModified := .T. ) ;
            ON INIT DrawGrid() ;
            ON MOUSEDRAG MoveControl() ;
            ON MOUSEMOVE CursorUpdate() ;
            ON PAINT DrawGrid() ;
            ON RELEASE ( Properties.Grid_1.DeleteAllItems, Properties.Grid_2.DeleteAllItems, Properties.Combo_1.DeleteAllItems, Properties.TITLE := aMsgs[ 074 ], SelectedControlName := '', if ( DesignFormModified == .T., if ( MsgYesNo (aMsgs[ 004 ] + ' ' + OpenFormName + '?' ) == .T., Save(), Nil ), Nil ), OpenFormName := '' ) ;
            ON GOTFOCUS DrawSelectedControlFrame() ;
            ON SCROLLUP SelectControl ( SelectedControlName ) ;
            ON SCROLLDOWN SelectControl ( SelectedControlName ) ;
            ON SCROLLLEFT SelectControl ( SelectedControlName ) ;
            ON SCROLLRIGHT SelectControl ( SelectedControlName ) ;
            ON HSCROLLBOX SelectControl ( SelectedControlName ) ;
            ON VSCROLLBOX SelectControl ( SelectedControlName )

         DEFINE TEXTBOX TEXT_DUMMY
            ROW 1000
            COL 1000
            WIDTH 0
            HEIGHT 0
         END TEXTBOX

         ON KEY DELETE ACTION DeleteControl()

         DEFINE TIMER internal_timer_1 INTERVAL 1 ACTION TimerTest()

         ON KEY F2 OF Form_1 ACTION OpenProject()
         ON KEY F5 OF Form_1 ACTION RunApplication()
         ON KEY F8 OF Form_1 ACTION ( ENABLEDEBUGGER := .T., RunApplication() )
         ON KEY F9 OF Form_1 ACTION NewForm()
         ON KEY F11 OF Form_1 ACTION NewModule()

      END WINDOW

   ENDIF

   DesignFormHandle := GetFormHandle ( DesignForm )

   SetProperty ( DesignForm, 'Cursor', 'arrow' )

   __mvPut ( DesignForm + 'WIndowType', 'STANDARD' )

   UpdateDesignFormProperties()

   IF ACTIVATE
      DoMethod ( DesignForm, 'Activate' )
      lVirtualForm := .F.
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE CursorUpdate()
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL ControlRow
   LOCAL ControlCol
   LOCAL ControlWidth
   LOCAL ControlHeight
   LOCAL Found := .F.

   Form_Main.StatusBar.Item ( 3 + STATUSITEM_OFFSET ) := AllTrim( Str( _HMG_MouseRow ) ) + ',' + AllTrim( Str( _HMG_MouseCol ) )

   FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )

      IF _HMG_aControlParenthandles[ i ] == DesignFormhandle

         If ! Empty ( _HMG_aControlNames[ i ] ) .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'INTERNAL_TIMER_1' .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'TEXT_DUMMY' .AND. _HMG_aControlDeleted[ i ] == .F.

            ControlRow := _HMG_aControlRow[ i ]
            ControlCol := _HMG_aControlCol[ i ]

            ControlWidth := _HMG_aControlWidth[ i ]
            ControlHeight := _HMG_aControlHeight[ i ]

            // Move

            IF ( _HMG_MouseRow >= ControlRow - 16 .AND. _HMG_MouseRow <= ControlRow ) ;
                  .AND. ;
                  ( _HMG_MouseCol >= ControlCol - 16 .AND. _HMG_MouseCol <= ControlCol )

               IF _HMG_aControlNames[ i ] == SelectedControlName .AND. ! Empty( SelectedControlName )

                  SetProperty ( DesignForm, 'Cursor', 'Hand' )
                  Found := .T.
                  EXIT

               ENDIF

            ENDIF

            // Size

            IF ( _HMG_MouseRow >= ControlRow + ControlHeight .AND. _HMG_MouseRow <= ControlRow + ControlHeight + 16 ) ;
                  .AND. ;
                  ( _HMG_MouseCol >= ControlCol + ControlWidth .AND. _HMG_MouseCol <= ControlCol + ControlWidth + 16 )

               IF _HMG_aControlType[ i ] = 'MONTHCAL'
                  EXIT
               ENDIF
               IF _HMG_aControlType[ i ] = 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 5
                  EXIT
               ENDIF


               IF _HMG_MouseRow < 20 .AND. _HMG_MouseCol < 20
                  EXIT
               ENDIF

               IF _HMG_aControlNames[ i ] == SelectedControlName .AND. ! Empty( SelectedControlName )

                  SetProperty ( DesignForm, 'Cursor', 'Size' )
                  Found := .T.
                  EXIT

               ENDIF

            ENDIF

         ENDIF

      ENDIF

   NEXT i

   IF .NOT. found
      SetProperty ( DesignForm, 'Cursor', 'arrow' )
   ENDIF

*------------------------------------------------------------------------------*
PROCEDURE TimerTest()
*------------------------------------------------------------------------------*

   IF _HMG_MouseState == 0 .AND. ( MoveStarted == .T. .OR. SizeStarted == .T. )
      test()
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE DeleteControl()
*------------------------------------------------------------------------------*

   if ! _IsWIndowDefined ( DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   If ! Empty ( SelectedControlName )

      IF MsgYesNo( aMsgs[ 099 ], aMsgs[ 109 ] )

         DesignFormModified := .T.
         Properties.Grid_1.DeleteAllItems
         DoMethod( DesignForm, SelectedControlName, 'Release' )
         RedrawWindow( DesignFormHandle )
         DrawGrid()
         UpdateDesignFormProperties()

         UpdateCombo()

         Properties.Combo_1.VALUE := 1
         SelectedControlName := ''
         SetProperty ( DesignForm, 'Cursor', 'arrow' )

      ENDIF

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Exit()
*------------------------------------------------------------------------------*
   IF MsgYesNo( aMsgs[ 099 ], 'HMG IDE' ) == .T.
      RELEASE WINDOW ALL
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE AddControl()
*------------------------------------------------------------------------------*
   LOCAL VDC, VDR, ControlName, fmb, TMPBUTTONS
   LOCAL aName
   LOCAL ControlRow
   LOCAL ControlCol
   LOCAL i
   LOCAL ControlWidth
   LOCAL ControlHeight
   LOCAL dr
   LOCAL dc
   LOCAL x
   LOCAL HitTestOk
   LOCAL SupMin
   LOCAL TabName
   LOCAL TabPage
   LOCAL TabRow
   LOCAL TabCol
   LOCAL TabIndex
   LOCAL TabWidth
   LOCAL TabHeight
   LOCAL TabCaptions
   LOCAL SupMinName
   LOCAL TabFlat
   LOCAL f
   LOCAL z
   LOCAL y
   // Local aNames
   LOCAL aProperties
   LOCAL aEvents
   LOCAL apValues
   LOCAL aeValues

   PRIVATE macrovar

   DesignFormModified := .T.

   IF MoveStarted == .T.

      MoveStarted := .F.

      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Row', _HMG_MouseRow )
      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Col', _HMG_MouseCol )
      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Visible', .T. )

      SelectControl ( _HMG_aControlNames[ MoveIndex ] )

      RETURN

   ENDIF

   IF SizeStarted == .T.

      SizeStarted := .F.

      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Width', _HMG_MouseCol - MoveCol )
      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Height', _HMG_MouseRow - MoveRow )
      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Visible', .T. )

      SelectControl ( _HMG_aControlNames[ MoveIndex ] )

      RETURN

   ENDIF

   IF CurrentControl >= 2 .AND. CurrentControl <= 27

      IF SnapToGrid == .T.

         dr := 10 - Val ( hb_URight ( AllTrim( Str ( _HMG_MouseRow ) ), 1 ) )
         _HMG_MouseRow := _HMG_MouseRow + dr

         dc := 10 - Val ( hb_URight ( AllTrim( Str ( _HMG_MouseCol ) ), 1 ) )
         _HMG_MouseCol := _HMG_MouseCol + dc

      ENDIF

   ENDIF

   IF form_main.user.VALUE <> 0
      CurrentControl := 99
   ENDIF

   DO CASE

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 99
   ///////////////////////////////////////////////////////////////////////

      f := form_main.user.VALUE

      IF f == 0
         RETURN
      ENDIF

      __mvPut ( aComponentNames[ f ] + 'Count', __mvGet ( aComponentNames[ f ] + 'Count' ) + 1 )

      ControlName := aComponentNames[ f ] + '_' + AllTrim( Str( __mvGet ( aComponentNames[ f ] + 'Count' ) ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )

         __mvPut ( aComponentNames[ f ] + 'Count', __mvGet ( aComponentNames[ f ] + 'Count' ) + 1 )

         ControlName := aComponentNames[ f ] + '_' + AllTrim( Str( __mvGet ( aComponentNames[ f ] + 'Count' ) ) )

      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName ;
         OF &DesignForm ;
         VALUE ControlName ACTION SelectControl ( This.Name ) ;
         WIDTH 150 HEIGHT 150 ;
         FONT 'ARIAL' SIZE 9 ;
         BORDER

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ][ 1 ] := 10 + f

      z := _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ][ 1 ] - 10

      // aNames  := aComponentNames [z]
      aProperties := aComponentProperties[ z ]
      aEvents := aComponentEvents[ z ]
      apValues := aComponentPropValues[ z ]
      aeValues := aComponentEvtValues[ z ]

      FOR y := 1 TO HMG_LEN ( aProperties )

         IF HMG_UPPER( AllTrim( aProperties[ y ] ) ) <> 'NAME'

            __mvPublic ( ControlName + aProperties[ y ] )
            __mvPut( ControlName + aProperties[ y ], apValues[ y ] )

         ENDIF

      NEXT y

      SetProperty ( DesignForm, ControlName, "Width", Val ( __mvGet ( ControlName + "Width" ) ) )
      SetProperty ( DesignForm, ControlName, "Height", Val ( __mvGet ( ControlName + "Height" ) ) )

      FOR y := 1 TO HMG_LEN ( aEvents )

         __mvPublic ( ControlName + aEvents[ y ] )
         __mvPut( ControlName + aEvents[ y ], aeValues[ y ] )

      NEXT y

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 1
   ///////////////////////////////////////////////////////////////////////

      FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )

         IF _HMG_aControlParenthandles[ i ] == DesignFormhandle

            If ! Empty ( _HMG_aControlNames[ i ] ) .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'INTERNAL_TIMER_1' .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'TEXT_DUMMY' .AND. _HMG_aControlDeleted[ i ] == .F.

               ControlRow := _HMG_aControlRow[ i ]
               ControlCol := _HMG_aControlCol[ i ]

               ControlWidth := _HMG_aControlWidth[ i ]
               ControlHeight := _HMG_aControlHeight[ i ]

               // Move

               IF ( _HMG_MouseRow >= ControlRow - 16 .AND. _HMG_MouseRow <= ControlRow ) ;
                     .AND. ;
                     ( _HMG_MouseCol >= ControlCol - 16 .AND. _HMG_MouseCol <= ControlCol )

                  IF _HMG_aControlNames[ i ] == SelectedControlName .AND. ! Empty( SelectedControlName )

                     Form_Main.StatusBar.Item ( 3 + STATUSITEM_OFFSET ) := ''

                     MoveCol := ControlCol
                     MoveRow := ControlRow
                     MoveWidth := _HMG_aControlWidth[ i ]
                     MoveHeight := _HMG_aControlHeight[ i ]
                     MoveIndex := i

                     SetProperty ( DesignForm, 'Cursor', 'Hand' )

                     SetProperty ( DesignForm, _HMG_aControlNames[ i ], 'Visible', .F. )

                     MoveStarted := .T.

                     IF SnapToGrid == .T.

                        dr := 10 - Val ( hb_URight ( AllTrim( Str ( _HMG_MouseRow ) ), 1 ) )
                        _HMG_MouseRow := _HMG_MouseRow + dr

                        dc := 10 - Val ( hb_URight ( AllTrim( Str ( _HMG_MouseCol ) ), 1 ) )
                        _HMG_MouseCol := _HMG_MouseCol + dc

                     ENDIF

                     _pr := _HMG_MouseRow
                     _pc := _HMG_MouseCol

                     EXIT

                  ENDIF

               ENDIF

               // Size

               IF ( _HMG_MouseRow >= ControlRow + ControlHeight .AND. _HMG_MouseRow <= ControlRow + ControlHeight + 16 ) ;
                     .AND. ;
                     ( _HMG_MouseCol >= ControlCol + ControlWidth .AND. _HMG_MouseCol <= ControlCol + ControlWidth + 16 )

                  IF _HMG_aControlType[ i ] = 'MONTHCAL'
                     EXIT
                  ENDIF
                  IF _HMG_aControlType[ i ] = 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 5
                     EXIT
                  ENDIF

                  IF _HMG_aControlNames[ i ] == SelectedControlName .AND. ! Empty( SelectedControlName )

                     Form_Main.StatusBar.Item ( 3 + STATUSITEM_OFFSET ) := ''

                     MoveCol := ControlCol
                     MoveRow := ControlRow
                     MoveWidth := _HMG_aControlWidth[ i ]
                     MoveHeight := _HMG_aControlHeight[ i ]
                     MoveIndex := i

                     SetProperty ( DesignForm, 'Cursor', 'Size' )

                     SetProperty ( DesignForm, _HMG_aControlNames[ i ], 'Visible', .F. )

                     SizeStarted := .T.

                     _pr := _HMG_MouseRow
                     _pc := _HMG_MouseCol

                     EXIT

                  ENDIF

               ENDIF

            ENDIF

         ENDIF

      NEXT i

      SupMin := 999999999
      SupMinName := ''

      HitTestOk := .F.

      IF MoveStarted == .F. .AND. SizeStarted == .F.

         FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )
            IF _HMG_aControlParenthandles[ i ] == DesignFormhandle
               If ! Empty ( _HMG_aControlNames[ i ] ) .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'INTERNAL_TIMER_1' .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'TEXT_DUMMY' .AND. _HMG_aControlDeleted[ i ] == .F.

                  IF _HMG_aControlType[ i ] == 'FRAME' .OR. _HMG_aControlType[ i ] == 'TAB' .OR. _HMG_aControlType[ i ] == 'ANIMATEBOX'

                     ControlRow := _HMG_aControlRow[ i ]
                     ControlCol := _HMG_aControlCol[ i ]
                     ControlWidth := _HMG_aControlWidth[ i ]
                     ControlHeight := _HMG_aControlHeight[ i ]

                     IF HitTest( _HMG_MouseRow, _HMG_MouseCol, ControlRow, ControlCol, ControlWidth, ControlHeight ) == .T.
                        IF ( ControlWidth * ControlHeight ) < SupMin

                           IF IsFrameActive( i ) == .T.

                              SupMin := ControlWidth * ControlHeight
                              SupMinName := _HMG_aControlNames[ i ]
                              HitTestOk := .T.

                           ENDIF

                        ENDIF

                     ENDIF

                  ENDIF

               ENDIF

            ENDIF

         NEXT i

      ENDIF

      IF HitTestOk == .T.

         SelectControl ( SupMinName )

      ENDIF

      IF MoveStarted == .F. .AND. SizeStarted == .F. .AND. HitTestOk == .F.

         IF .NOT. Empty( SelectedControlName )
            x := GetControlIndex ( SelectedControlName, DesignForm )
            IF x > 0

               IF lVirtualForm
                  VDC := GetScrollPos ( DesignFormhandle, SB_HORZ )
                  VDR := GetScrollPos ( DesignFormhandle, SB_VERT )
               ELSE
                  VDC := 0
                  VDR := 0
               ENDIF

               RedrawRect ( DesignFormhandle, _HMG_aControlRow[ x ] - 10 - VDR, _HMG_aControlCol[ x ] - 10 - VDC, _HMG_aControlRow[ x ] + _HMG_aControlHeight[ x ] + 10 - VDR, _HMG_aControlCol[ x ] + _HMG_aControlWidth[ x ] + 10 - VDC )
            ENDIF
         ENDIF

         UpdateDesignFormProperties()
         Properties.Combo_1.VALUE := 1

         SelectedControlname := ''

      ENDIF

      DrawGrid()

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 2
   ///////////////////////////////////////////////////////////////////////
      ButtonCount++
      ControlName := 'Button_' + AllTrim( Str( ButtonCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         ButtonCount++
         ControlName := 'Button_' + AllTrim( Str( ButtonCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol BUTTON &ControlName OF &DesignForm CAPTION ControlName FONT 'Arial' SIZE 9 ACTION _dummy() ON GOTFOCUS SelectControl( This.Name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Caption' )
      __mvPut( ControlName + 'Caption', ControlName )
      __mvPublic ( ControlName + 'Action' )
      __mvPut( ControlName + 'Action', 'Nil' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'Flat' )
      __mvPut( ControlName + 'Flat', '.F.' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Transparent' )
      __mvPut( ControlName + 'Transparent', '.F.' )
      __mvPublic ( ControlName + 'Picture' )
      __mvPut( ControlName + 'Picture', '' )
      __mvPublic ( ControlName + 'PictAlignMent' )
      __mvPut( ControlName + 'PictAlignment', 'TOP' )
      __mvPublic ( ControlName + 'MultiLine' )
      __mvPut( ControlName + 'MultiLine', '.F.' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 3
   ///////////////////////////////////////////////////////////////////////
      CheckBoxCount++
      ControlName := 'Check_' + AllTrim( Str( CheckBoxCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         CheckBoxCount++
         ControlName := 'Check_' + AllTrim( Str( CheckBoxCount ) )
      ENDDO

      TabName := TabHit( _HMG_MouseRow, _HMG_MouseCol )

      IF ! Empty ( TabName )
         fmb := _HMG_FrameLevel
         _HMG_FrameLevel := 1
         _HMG_ActiveTabName := TabName
         _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
      ENDIF

      IF ! Empty ( TabName )
         _HMG_ActiveTabButtons := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      @ _HMG_MouseRow, _HMG_MouseCol CHECKBOX &ControlName OF &DesignForm CAPTION ControlName FONT 'Arial' SIZE 9 ON CHANGE SelectControl ( This.Name )

      IF ! Empty ( TabName )
         _HMG_FrameLevel := fmb
      ENDIF

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      IF ! Empty ( TabName )
         _HMG_aControlDblClick[ GetControlIndex ( ControlName, DesignForm ) ] := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      __mvPublic ( ControlName + 'Caption' )
      __mvPut( ControlName + 'Caption', ControlName )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '.F.' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'Field' )
      __mvPut( ControlName + 'Field', 'Nil' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Transparent' )
      __mvPut( ControlName + 'Transparent', '.F.' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 4
   ///////////////////////////////////////////////////////////////////////
      ListBoxCount++
      ControlName := 'List_' + AllTrim( Str( ListBoxCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         ListBoxCount++
         ControlName := 'List_' + AllTrim( Str( ListBoxCount ) )
      ENDDO

      aName := { ControlName }
      @ _HMG_MouseRow, _HMG_MouseCol LISTBOX &ControlName OF &DesignForm WIDTH 100 HEIGHT 100 ITEMS aName FONT 'Arial' SIZE 9 ON GOTFOCUS SelectControl ( This.Name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Items' )
      __mvPut( ControlName + 'Items', '{""}' )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '0' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'OnDblClick' )
      __mvPut( ControlName + 'OnDblClick', 'Nil' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Sort' )
      __mvPut( ControlName + 'Sort', '.F.' )
      __mvPublic ( ControlName + 'MultiSelect' )
      __mvPut( ControlName + 'MultiSelect', '.F.' )
      __mvPublic ( ControlName + 'DragItems' )
      __mvPut( ControlName + 'DragItems', '.F.' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 5
   ///////////////////////////////////////////////////////////////////////
      ComboBoxCount++
      ControlName := 'Combo_' + AllTrim( Str( ComboBoxCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         ComboBoxCount++
         ControlName := 'Combo_' + AllTrim( Str( ComboBoxCount ) )
      ENDDO

      aName := { ControlName }
      @ _HMG_MouseRow, _HMG_MouseCol COMBOBOX &ControlName OF &DesignForm WIDTH 100 HEIGHT 100 ITEMS aName VALUE 1 FONT 'Arial' SIZE 9 ON GOTFOCUS SelectControl ( This.Name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Items' )
      __mvPut( ControlName + 'Items', '{""}' )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '0' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Sort' )
      __mvPut( ControlName + 'Sort', '.F.' )
      __mvPublic ( ControlName + 'OnEnter' )
      __mvPut( ControlName + 'OnEnter', 'Nil' )
      __mvPublic ( ControlName + 'OnDisplayChange' )
      __mvPut( ControlName + 'OnDisplayChange', 'Nil' )
      __mvPublic ( ControlName + 'DisplayEdit' )
      __mvPut( ControlName + 'DisplayEdit', '.F.' )
      __mvPublic ( ControlName + 'ItemSource' )
      __mvPut( ControlName + 'ItemSource', 'Nil' )
      __mvPublic ( ControlName + 'ValueSource' )
      __mvPut( ControlName + 'ValueSource', '' )

      __mvPublic ( ControlName + 'Image' )
      __mvPut( ControlName + 'Image', 'Nil' )

      __mvPublic ( ControlName + 'DroppedWidth' )
      __mvPut( ControlName + 'DroppedWidth', 'Nil' )

      __mvPublic ( ControlName + 'OnDropDown' )
      __mvPut( ControlName + 'OnDropDown', 'Nil' )

      __mvPublic ( ControlName + 'OnCloseUp' )
      __mvPut( ControlName + 'OnCloseUp', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 6
   ///////////////////////////////////////////////////////////////////////
      CheckButtonCount++
      ControlName := 'CheckBtn_' + AllTrim( Str( CheckButtonCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         CheckButtonCount++
         ControlName := 'CheckBtn_' + AllTrim( Str( CheckButtonCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol CHECKBUTTON &ControlName OF &DesignForm CAPTION ControlName FONT 'Arial' SIZE 9 ON CHANGE SelectControl ( This.name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ] := 1

      __mvPublic ( ControlName + 'Caption' )
      __mvPut( ControlName + 'Caption', ControlName )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '.F.' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Picture' )
      __mvPut( ControlName + 'Picture', '' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 7
   ///////////////////////////////////////////////////////////////////////
      GridCount++
      ControlName := 'Grid_' + AllTrim( Str( GridCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         GridCount++
         ControlName := 'Grid_' + AllTrim( Str( GridCount ) )
      ENDDO

      aName := { { ControlName } }
      @ _HMG_MouseRow, _HMG_MouseCol GRID &ControlName OF &DesignForm WIDTH 120 HEIGHT 120 HEADERS { '' } WIDTHS { 100 } ITEMS aName FONT 'Arial' SIZE 9 ON GOTFOCUS SelectControl( This.name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Items' )
      __mvPut( ControlName + 'Items', '{ {""} }' )
      __mvPublic ( ControlName + 'Headers' )
      __mvPut( ControlName + 'Headers', "{''}" )
      __mvPublic ( ControlName + 'Widths' )
      __mvPut( ControlName + 'Widths', "{ 0 }" )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', 'Nil' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'OnDblClick' )
      __mvPut( ControlName + 'OnDblClick', 'Nil' )
      __mvPublic ( ControlName + 'OnHeadClick' )
      __mvPut( ControlName + 'OnHeadClick', 'Nil' )
      __mvPublic ( ControlName + 'OnQueryData' )
      __mvPut( ControlName + 'OnQueryData', 'Nil' )
      __mvPublic ( ControlName + 'MultiSelect' )
      __mvPut( ControlName + 'MultiSelect', '.F.' )
      __mvPublic ( ControlName + 'AllowEdit' )
      __mvPut( ControlName + 'AllowEdit', '.F.' )
      __mvPublic ( ControlName + 'Virtual' )
      __mvPut( ControlName + 'Virtual', '.F.' )
      __mvPublic ( ControlName + 'Lines' )
      __mvPut( ControlName + 'Lines', '.T.' )
      __mvPublic ( ControlName + 'Image' )
      __mvPut( ControlName + 'Image', 'Nil' )
      __mvPublic ( ControlName + 'Justify' )
      __mvPut( ControlName + 'Justify', 'Nil' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'ItemCount' )
      __mvPut( ControlName + 'ItemCount', 'Nil' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )

      // 2.0

      __mvPublic ( ControlName + 'DynamicBackColor' )
      __mvPut( ControlName + 'DynamicBackColor', 'Nil' )

      __mvPublic ( ControlName + 'DynamicForeColor' )
      __mvPut( ControlName + 'DynamicForeColor', 'Nil' )

      __mvPublic ( ControlName + 'ColumnWhen' )
      __mvPut( ControlName + 'ColumnWhen', 'Nil' )

      __mvPublic ( ControlName + 'ColumnValid' )
      __mvPut( ControlName + 'ColumnValid', 'Nil' )

      __mvPublic ( ControlName + 'ColumnControls' )
      __mvPut( ControlName + 'ColumnControls', 'Nil' )

      __mvPublic ( ControlName + 'ShowHeaders' )
      __mvPut( ControlName + 'ShowHeaders', '.T.' )

      __mvPublic ( ControlName + 'HeaderImages' )
      __mvPut( ControlName + 'HeaderImages', 'Nil' )

      __mvPublic ( ControlName + 'CellNavigation' )
      __mvPut( ControlName + 'CellNavigation', '.F.' )

      // _._

      __mvPublic ( ControlName + 'RowSource' )
      __mvPut( ControlName + 'RowSource', 'Nil' )

      __mvPublic ( ControlName + 'ColumnFields' )
      __mvPut( ControlName + 'ColumnFields', 'Nil' )

      __mvPublic ( ControlName + 'AllowAppend' )
      __mvPut( ControlName + 'AllowAppend', '.F.' )

      __mvPublic ( ControlName + 'AllowDelete' )
      __mvPut( ControlName + 'AllowDelete', '.F.' )

      __mvPublic ( ControlName + 'Buffered' )
      __mvPut( ControlName + 'Buffered', '.F.' )

      __mvPublic ( ControlName + 'DynamicDisplay' )
      __mvPut( ControlName + 'DynamicDisplay', 'Nil' )

      __mvPublic ( ControlName + 'OnSave' )
      __mvPut( ControlName + 'OnSave', 'Nil' )

      __mvPublic ( ControlName + 'LockColumns' )
      __mvPut( ControlName + 'LockColumns', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 8
   ///////////////////////////////////////////////////////////////////////
      SliderCount++
      ControlName := 'Slider_' + AllTrim( Str( SliderCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         SliderCount++
         ControlName := 'Slider_' + AllTrim( Str( SliderCount ) )
      ENDDO

      TabName := TabHit( _HMG_MouseRow, _HMG_MouseCol )

      if ! Empty ( TabName )
         fmb := _HMG_FrameLevel
         _HMG_FrameLevel := 1
         _HMG_ActiveTabName := TabName
         _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
      ENDIF

      if ! Empty ( TabName )
         _HMG_ActiveTabButtons := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      @ _HMG_MouseRow, _HMG_MouseCol SLIDER &ControlName OF &DesignForm RANGE 1, 10 VALUE 5 ON CHANGE SelectControl ( This.Name )

      if ! Empty ( TabName )
         _HMG_FrameLevel := fmb
      ENDIF

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      if ! Empty ( TabName )
         _HMG_aControlDblClick[ GetControlIndex ( ControlName, DesignForm ) ] := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      SetFocus ( GetControlhandle ( ControlName, DesignForm ) )

      __mvPublic ( ControlName + 'RangeMin' )
      __mvPut( ControlName + 'RangeMin', '1' )
      __mvPublic ( ControlName + 'RangeMax' )
      __mvPut( ControlName + 'RangeMax', '10' )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '0' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'TickMarks' )
      __mvPut( ControlName + 'TickMarks', 'BOTTOM' )
      __mvPublic ( ControlName + 'Orientation' )
      __mvPut( ControlName + 'Orientation', 'HORIZONTAL' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 9
   ///////////////////////////////////////////////////////////////////////
      SpinnerCount++
      ControlName := 'Spinner_' + AllTrim( Str( SpinnerCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         SpinnerCount++
         ControlName := 'Spinner_' + AllTrim( Str( SpinnerCount ) )
      ENDDO

      DEFINE SPINNER &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         VALUE 5
         RANGEMIN 1
         RANGEMAX 10
         ON GOTFOCUS SelectControl ( This.Name )
         FONTNAME 'ARIAL'
         FONTSIZE 9
      END SPINNER

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'RangeMin' )
      __mvPut( ControlName + 'RangeMin', '1' )
      __mvPublic ( ControlName + 'RangeMax' )
      __mvPut( ControlName + 'RangeMax', '10' )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '0' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'Wrap' )
      __mvPut( ControlName + 'Wrap', '.F.' )
      __mvPublic ( ControlName + 'ReadOnly' )
      __mvPut( ControlName + 'ReadOnly', '.F.' )
      __mvPublic ( ControlName + 'Increment' )
      __mvPut( ControlName + 'Increment', '1' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 10
   ///////////////////////////////////////////////////////////////////////
      ImageCount++
      ControlName := 'Image_' + AllTrim( Str( ImageCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         ImageCount++
         ControlName := 'Image_' + AllTrim( Str( ImageCount ) )
      ENDDO

      DEFINE IMAGE &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         WIDTH 123
         HEIGHT 123
         ACTION SelectControl ( This.name )
         PICTURE 'demo'
         STRETCH .T.
      END IMAGE

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Picture' )
      __mvPut( ControlName + 'Picture', '' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Stretch' )
      __mvPut( ControlName + 'Stretch', '.F.' )
      __mvPublic ( ControlName + 'Action' )
      __mvPut( ControlName + 'Action', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 11
   ///////////////////////////////////////////////////////////////////////

      TreeCount++
      ControlName := 'Tree_' + AllTrim( Str( TreeCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         TreeCount++
         ControlName := 'Tree_' + AllTrim( Str( TreeCount ) )
      ENDDO


      DEFINE TREE &ControlName ;
            OF &DesignForm ;
            AT _HMG_MouseRow, _HMG_MouseCol ;
            TOOLTIP ControlName ;
            ON GOTFOCUS SelectControl( This.Name )

         NODE ControlName
         END NODE

      END TREE

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '0' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'OnDblClick' )
      __mvPut( ControlName + 'OnDblClick', 'Nil' )
      __mvPublic ( ControlName + 'NodeImages' )
      __mvPut( ControlName + 'NodeImages', 'Nil' )
      __mvPublic ( ControlName + 'ItemImages' )
      __mvPut( ControlName + 'ItemImages', 'Nil' )
      __mvPublic ( ControlName + 'RootButton' )
      __mvPut( ControlName + 'RootButton', '.T.' )
      __mvPublic ( ControlName + 'ItemIds' )
      __mvPut( ControlName + 'ItemIds', '.F.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 12
   ///////////////////////////////////////////////////////////////////////
      DatePickerCount++
      ControlName := 'DatePicker_' + AllTrim( Str( DatePickerCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         DatePickerCount++
         ControlName := 'DatePicker_' + AllTrim( Str( DatePickerCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol DATEPICKER &ControlName OF &DesignForm FONT 'Arial' SIZE 9 TOOLTIP ControlName ON GOTFOCUS SelectControl( This.Name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', 'CTOD("  /  /  ")' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'OnEnter' )
      __mvPut( ControlName + 'OnEnter', 'Nil' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'ShowNone' )
      __mvPut( ControlName + 'ShowNone', '.F.' )
      __mvPublic ( ControlName + 'UpDown' )
      __mvPut( ControlName + 'UpDown', '.F.' )
      __mvPublic ( ControlName + 'RightAlign' )
      __mvPut( ControlName + 'RightAlign', '.F.' )
      __mvPublic ( ControlName + 'Field' )
      __mvPut( ControlName + 'Field', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 13
   ///////////////////////////////////////////////////////////////////////
      TextBoxCount++
      ControlName := 'Text_' + AllTrim( Str( TextBoxCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         TextBoxCount++
         ControlName := 'Text_' + AllTrim( Str( TextBoxCount ) )
      ENDDO

      DEFINE TEXTBOX &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         VALUE ControlName
         ON GOTFOCUS SelectControl( This.Name )
         FONTNAME 'ARIAL'
         FONTSIZE 9
      END TEXTBOX

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', "" )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'InputMask' )
      __mvPut( ControlName + 'InputMask', '' )
      __mvPublic ( ControlName + 'Format' )
      __mvPut( ControlName + 'Format', '' )
      __mvPublic ( ControlName + 'DataType' )
      __mvPut( ControlName + 'DataType', 'CHARACTER' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'OnEnter' )
      __mvPut( ControlName + 'OnEnter', 'Nil' )
      __mvPublic ( ControlName + 'Field' )
      __mvPut( ControlName + 'Field', 'Nil' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'ReadOnly' )
      __mvPut( ControlName + 'ReadOnly', '.F.' )
      __mvPublic ( ControlName + 'RightAlign' )
      __mvPut( ControlName + 'RightAlign', '.F.' )
      __mvPublic ( ControlName + 'MaxLength' )
      __mvPut( ControlName + 'MaxLength', 'Nil' )
      __mvPublic ( ControlName + 'Password' )
      __mvPut( ControlName + 'Password', '.F.' )
      __mvPublic ( ControlName + 'CaseConvert' )
      __mvPut( ControlName + 'CaseConvert', 'NONE' )
/*
  __MVPUBLIC ( ControlName + 'DisabledBackColor' )
  __MVPUT( ControlName + 'DisabledBackColor' , 'Nil' )
  __MVPUBLIC ( ControlName + 'DisabledFontColor' )
  __MVPUT( ControlName + 'DisabledFontColor' , 'Nil' )
*/
   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 14
   ///////////////////////////////////////////////////////////////////////
      EditBoxCount++
      ControlName := 'Edit_' + AllTrim( Str( EditBoxCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         EditBoxCount++
         ControlName := 'Edit_' + AllTrim( Str( EditBoxCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol EDITBOX &ControlName OF &DesignForm WIDTH 120 HEIGHT 120 VALUE ControlName FONT 'ARIAL' SIZE 9 ON GOTFOCUS SelectControl ( This.Name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', "" )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Field' )
      __mvPut( ControlName + 'Field', 'Nil' )
      __mvPublic ( ControlName + 'MaxLength' )
      __mvPut( ControlName + 'MaxLength', 'Nil' )
      __mvPublic ( ControlName + 'ReadOnly' )
      __mvPut( ControlName + 'ReadOnly', '.F.' )

      __mvPublic ( ControlName + 'hScrollBar' )
      __mvPut( ControlName + 'hScrollBar', '.T.' )

      __mvPublic ( ControlName + 'vScrollBar' )
      __mvPut( ControlName + 'vScrollBar', '.T.' )
/*
  __MVPUBLIC ( ControlName + 'DisabledBackColor' )
  __MVPUT( ControlName + 'DisabledBackColor' , 'Nil' )

  __MVPUBLIC ( ControlName + 'DisabledFontColor' )
  __MVPUT( ControlName + 'DisabledFontColor' , 'Nil' )
*/
   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 15
   ///////////////////////////////////////////////////////////////////////
      LabelCount++
      ControlName := 'Label_' + AllTrim( Str( LabelCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         LabelCount++
         ControlName := 'Label_' + AllTrim( Str( LabelCount ) )
      ENDDO

      TabName := TabHit( _HMG_MouseRow, _HMG_MouseCol )

      IF ( ! Empty ( TabName ) ) .AND. ( IsAppThemed() .OR. IsVistaOrLater() )

         @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName OF &DesignForm VALUE ControlName FONT 'ARIAL' SIZE 9 ACTION SelectControl( This.Name ) TRANSPARENT

      ELSE

         @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName OF &DesignForm VALUE ControlName FONT 'ARIAL' SIZE 9 ACTION SelectControl( This.Name )

      ENDIF

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', ControlName )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Transparent' )
      __mvPut( ControlName + 'Transparent', '.F.' )
      __mvPublic ( ControlName + 'Action' )
      __mvPut( ControlName + 'Action', 'Nil' )
      __mvPublic ( ControlName + 'AutoSize' )
      __mvPut( ControlName + 'AutoSize', '.F.' )
      __mvPublic ( ControlName + 'Alignment' )
      __mvPut( ControlName + 'Alignment', 'LEFT' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 16
   ///////////////////////////////////////////////////////////////////////

      BrowseCount++
      ControlName := 'Browse_' + AllTrim( Str( BrowseCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         BrowseCount++
         ControlName := 'Browse_' + AllTrim( Str( BrowseCount ) )
      ENDDO

      DEFINE BROWSE &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         WIDTH 120
         HEIGHT 120
         HEADERS { ControlName }
         WIDTHS { 100 }
         WORKAREA Test
         FIELDS { 'Test->Code' }
         ON GOTFOCUS SelectControl ( This.Name )
         VALUE 1
         FONTNAME 'ARIAL'
         FONTSIZE 9
         VSCROLLBAR .F.
      END BROWSE

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      DoMethod( DesignForm, ControlName, 'Refresh' )

      __mvPublic ( ControlName + 'WorkArea' )
      __mvPut( ControlName + 'WorkArea', "Nil" )
      __mvPublic ( ControlName + 'Fields' )
      __mvPut( ControlName + 'Fields', "{''}" )
      __mvPublic ( ControlName + 'Headers' )
      __mvPut( ControlName + 'Headers', "{''}" )
      __mvPublic ( ControlName + 'Widths' )
      __mvPut( ControlName + 'Widths', "{0}" )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '0' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'OnDblClick' )
      __mvPut( ControlName + 'OnDblClick', 'Nil' )
      __mvPublic ( ControlName + 'AllowEdit' )
      __mvPut( ControlName + 'AllowEdit', '.F.' )
      __mvPublic ( ControlName + 'AllowAppend' )
      __mvPut( ControlName + 'AllowAppend', '.F.' )
      __mvPublic ( ControlName + 'OnHeadClick' )
      __mvPut( ControlName + 'OnHeadClick', 'Nil' )
      __mvPublic ( ControlName + 'AllowDelete' )
      __mvPut( ControlName + 'AllowDelete', '.F.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Image' )
      __mvPut( ControlName + 'Image', 'Nil' )
      __mvPublic ( ControlName + 'Justify' )
      __mvPut( ControlName + 'Justify', 'Nil' )
      __mvPublic ( ControlName + 'Lines' )
      __mvPut( ControlName + 'Lines', '.T.' )
      __mvPublic ( ControlName + 'ReadOnlyFields' )
      __mvPut( ControlName + 'ReadOnlyFields', 'Nil' )
      __mvPublic ( ControlName + 'Valid' )
      __mvPut( ControlName + 'Valid', 'Nil' )
      __mvPublic ( ControlName + 'ValidMessages' )
      __mvPut( ControlName + 'ValidMessages', 'Nil' )
      __mvPublic ( ControlName + 'Lock' )
      __mvPut( ControlName + 'Lock', '.F.' )
      __mvPublic ( ControlName + 'vScrollBar' )
      __mvPut( ControlName + 'vScrollBar', '.T.' )

      __mvPublic ( ControlName + 'DynamicBackColor' )
      __mvPut( ControlName + 'DynamicBackColor', 'Nil' )

      __mvPublic ( ControlName + 'DynamicForeColor' )
      __mvPut( ControlName + 'DynamicForeColor', 'Nil' )

      __mvPublic ( ControlName + 'InputMask' )
      __mvPut( ControlName + 'InputMask', 'Nil' )

      __mvPublic ( ControlName + 'Format' )
      __mvPut( ControlName + 'Format', 'Nil' )

      __mvPublic ( ControlName + 'When' )
      __mvPut( ControlName + 'When', 'Nil' )

      __mvPublic ( ControlName + 'InputItems' )
      __mvPut( ControlName + 'InputItems', 'Nil' )

      __mvPublic ( ControlName + 'DisplayItems' )
      __mvPut( ControlName + 'DisplayItems', 'Nil' )

      __mvPublic ( ControlName + 'HeaderImages' )
      __mvPut( ControlName + 'HeaderImages', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 17
   ///////////////////////////////////////////////////////////////////////
      RadioGroupCount++
      ControlName := 'RadioGroup_' + AllTrim( Str( RadioGroupCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         RadioGroupCount++
         ControlName := 'RadioGroup_' + AllTrim( Str( RadioGroupCount ) )
      ENDDO

      TabName := TabHit( _HMG_MouseRow, _HMG_MouseCol )

      if ! Empty ( TabName )
         fmb := _HMG_FrameLevel
         _HMG_FrameLevel := 1
         _HMG_ActiveTabName := TabName
         _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
      ENDIF

      if ! Empty ( TabName )
         _HMG_ActiveTabButtons := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      DEFINE RADIOGROUP &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         OPTIONS { 'Option 1', 'Option 2' }
         ON CHANGE SelectControl ( This.Name )
         FONTNAME 'ARIAL'
         FONTSIZE 9
      END RADIOGROUP

      if ! Empty ( TabName )
         _HMG_FrameLevel := fmb
      ENDIF

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      if ! Empty ( TabName )
         _HMG_aControlDblClick[ GetControlIndex ( ControlName, DesignForm ) ] := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      __mvPublic ( ControlName + 'Options' )
      __mvPut( ControlName + 'Options', "{ 'Option 1','Option 2'}" )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '1' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Transparent' )
      __mvPut( ControlName + 'Transparent', '.F.' )
      __mvPublic ( ControlName + 'Spacing' )
      __mvPut( ControlName + 'Spacing', '25' )

      __mvPublic ( ControlName + 'ReadOnly' )
      __mvPut( ControlName + 'ReadOnly', 'Nil' )

      __mvPublic ( ControlName + 'Orientation' )
      __mvPut( ControlName + 'Orientation', 'VERTICAL' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 18
   ///////////////////////////////////////////////////////////////////////
      FrameCount++
      ControlName := 'Frame_' + AllTrim( Str( FrameCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         FrameCount++
         ControlName := 'Frame_' + AllTrim( Str( FrameCount ) )
      ENDDO

      TabName := TabHit( _HMG_MouseRow, _HMG_MouseCol )

      IF ! Empty ( TabName )
         fmb := _HMG_FrameLevel
         _HMG_FrameLevel := 1
         _HMG_ActiveTabName := TabName
         _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
      ENDIF

      IF ! Empty ( TabName )
         _HMG_ActiveTabButtons := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      DEFINE FRAME &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         CAPTION ControlName
         FONTNAME 'ARIAL'
         FONTSIZE 9
         OPAQUE .T.
      END FRAME

      IF ! Empty ( TabName )
         _HMG_FrameLevel := fmb
      ENDIF

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      IF ! Empty ( TabName )
         _HMG_aControlDblClick[ GetControlIndex ( ControlName, DesignForm ) ] := _HMG_aControlRangeMin[ GetControlIndex ( TabName, DesignForm ) ]
      ENDIF

      __mvPublic ( ControlName + 'Caption' )
      __mvPut( ControlName + 'Caption', ControlName )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'Transparent' )
      __mvPut( ControlName + 'Transparent', '.F.' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 19
   ///////////////////////////////////////////////////////////////////////

      IF Empty ( TabHit( _HMG_MouseRow, _HMG_MouseCol ) )

         TabCount++
         ControlName := 'Tab_' + AllTrim( Str( TabCount ) )

         DO WHILE _IsControlDefined ( ControlName, DesignForm )
            TabCount++
            ControlName := 'Tab_' + AllTrim( Str( TabCount ) )
         ENDDO

         DEFINE TAB &ControlName OF &DesignForm AT _HMG_MouseRow, _HMG_MouseCol WIDTH 150 HEIGHT 120 ON CHANGE ( SelectControl ( This.Name ), SelectControl ( This.Name ) )
            PAGE 'Page 1'
            END PAGE
            PAGE 'Page 2'
            END PAGE
         END TAB

         IF lVirtualForm
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
         ENDIF

         __mvPublic ( ControlName + 'PageCount' )
         __mvPut( ControlName + 'PageCount', '2' )
         __mvPublic ( ControlName + 'Captions' )
         __mvPut( ControlName + 'Captions', "{ 'Page 1' , 'Page 2' }" )

         __mvPublic ( ControlName + 'PageImages' )
         __mvPut( ControlName + 'PageImages', "{'',''}" )

         __mvPublic ( ControlName + 'Value' )
         __mvPut( ControlName + 'Value', '1' )
         __mvPublic ( ControlName + 'FontName' )
         __mvPut( ControlName + 'FontName', 'Arial' )
         __mvPublic ( ControlName + 'FontSize' )
         __mvPut( ControlName + 'FontSize', '9' )
         __mvPublic ( ControlName + 'ToolTip' )
         __mvPut( ControlName + 'ToolTip', '' )
         __mvPublic( ControlName + 'OnChange' )
         __mvPut( ControlName + 'OnChange', 'Nil' )
         __mvPublic ( ControlName + 'FontBold' )
         __mvPut( ControlName + 'FontBold', '.F.' )
         __mvPublic ( ControlName + 'FontItalic' )
         __mvPut( ControlName + 'FontItalic', '.F.' )
         __mvPublic ( ControlName + 'FontStrikeOut' )
         __mvPut( ControlName + 'FontStrikeOut', '.F.' )
         __mvPublic ( ControlName + 'FontUnderLine' )
         __mvPut( ControlName + 'FontUnderLine', '.F.' )
         __mvPublic ( ControlName + 'Buttons' )
         __mvPut( ControlName + 'Buttons', '.F.' )
         __mvPublic ( ControlName + 'Flat' )
         __mvPut( ControlName + 'Flat', '.F.' )
         __mvPublic ( ControlName + 'HotTrack' )
         __mvPut( ControlName + 'HotTrack', '.F.' )
         __mvPublic ( ControlName + 'Vertical' )
         __mvPut( ControlName + 'Vertical', '.F.' )
         __mvPublic ( ControlName + 'TabStop' )
         __mvPut( ControlName + 'TabStop', '.T.' )

         __mvPublic ( ControlName + 'MultiLine' )
         __mvPut( ControlName + 'MultiLine', '.F.' )

      ENDIF

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 20
   ///////////////////////////////////////////////////////////////////////
      AnimateCount++
      ControlName := 'Animate_' + AllTrim( Str( AnimateCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         AnimateCount++
         ControlName := 'Animate_' + AllTrim( Str( AnimateCount ) )
      ENDDO

      DEFINE ANIMATEBOX &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         WIDTH 210
         HEIGHT 60
         FILE ''
         CENTER .T.
         AUTOPLAY .T.
      END ANIMATEBOX

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      DoMethod ( DesignForm, ControlName, 'Play' )

      __mvPublic ( ControlName + 'File' )
      __mvPut( ControlName + 'File', '' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Transparent' )
      __mvPut( ControlName + 'Transparent', '.F.' )
      __mvPublic ( ControlName + 'AutoPlay' )
      __mvPut( ControlName + 'AutoPlay', '.F.' )
      __mvPublic ( ControlName + 'Center' )
      __mvPut( ControlName + 'Center', '.F.' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 21
   ///////////////////////////////////////////////////////////////////////
      HyperLinkCount++
      ControlName := 'HyperLink_' + AllTrim( Str( HyperLinkCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         HyperLinkCount++
         ControlName := 'HyperLink_' + AllTrim( Str( HyperLinkCount ) )
      ENDDO


      TabName := TabHit( _HMG_MouseRow, _HMG_MouseCol )

      IF ( ! Empty ( TabName ) ) .AND. IsAppThemed()

         DEFINE HYPERLINK &ControlName
            PARENT &DesignForm
            ROW _HMG_MouseRow
            COL _HMG_MouseCol
            WIDTH 230
            HEIGHT 28
            VALUE _HLK
            ADDRESS _HLK
            FONTNAME 'ARIAL'
            FONTSIZE 9
            TRANSPARENT .T.
         END HYPERLINK

      ELSE

         DEFINE HYPERLINK &ControlName
            PARENT &DesignForm
            ROW _HMG_MouseRow
            COL _HMG_MouseCol
            WIDTH 230
            HEIGHT 28
            VALUE _HLK
            ADDRESS _HLK
            FONTNAME 'ARIAL'
            FONTSIZE 9
         END HYPERLINK

      ENDIF

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      i := GetControlIndex ( ControlName, DesignForm )

      _HMG_aControlType[ i ] := "LABEL"

      _HMG_aControlMiscData1[ i ][ 1 ] := 6

      macrovar := 'SelectControl (' + Chr( 34 ) + 'HyperLink_' + AllTrim( Str( HyperLinkCount ) ) + Chr( 34 ) + ')'

      _HMG_aControlProcedures[ i ] := {|| &macrovar }

      RedrawWindow ( GetControlHandle ( ControlName, DesignForm ) )

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', _HLK )
      __mvPublic ( ControlName + 'Address' )
      __mvPut( ControlName + 'Address', _HLK )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'AutoSize' )
      __mvPut( ControlName + 'AutoSize', '.F.' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'FontColor' )
      __mvPut( ControlName + 'FontColor', 'Nil' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'HandCursor' )
      __mvPut( ControlName + 'HandCursor', '.F.' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 22
   ///////////////////////////////////////////////////////////////////////
      MonthCalendarCount++
      ControlName := 'MonthCal_' + AllTrim( Str( MonthCalendarCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         MonthCalendarCount++
         ControlName := 'MonthCal_' + AllTrim( Str( MonthCalendarCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol MONTHCALENDAR &ControlName OF &DesignForm ;
         VALUE Date() ;
         FONT 'ARIAL' SIZE 9 ;
         ON CHANGE SelectControl ( This.Name )

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', 'CTOD("  /  /  ")' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'Today' )
      __mvPut( ControlName + 'Today', '.T.' )
      __mvPublic ( ControlName + 'TodayCircle' )
      __mvPut( ControlName + 'TodayCircle', '.T.' )
      __mvPublic ( ControlName + 'WeekNumbers' )
      __mvPut( ControlName + 'WeekNumbers', '.F.' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 23
   ///////////////////////////////////////////////////////////////////////
      RichEditCount++
      ControlName := 'RichEdit_' + AllTrim( Str( RichEditCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         RichEditCount++
         ControlName := 'RichEdit_' + AllTrim( Str( RichEditCount ) )
      ENDDO

      DEFINE RICHEDITBOX &ControlName
         PARENT &DesignForm
         ROW _HMG_MouseRow
         COL _HMG_MouseCol
         WIDTH 120
         HEIGHT 120
         ON GOTFOCUS SelectControl ( This.Name )
         VALUE ControlName
         FONTNAME 'ARIAL'
         FONTSIZE 9
      END RICHEDITBOX

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'MaxLength' )
      __mvPut( ControlName + 'MaxLength', 'Nil' )
      __mvPublic ( ControlName + 'Field' )
      __mvPut( ControlName + 'Field', 'Nil' )
      __mvPublic ( ControlName + 'ReadOnly' )
      __mvPut( ControlName + 'ReadOnly', '.F.' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 24
   ///////////////////////////////////////////////////////////////////////
      ProgressBarCount++
      ControlName := 'ProgressBar_' + AllTrim( Str( ProgressBarCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         ProgressBarCount++
         ControlName := 'ProgressBar_' + AllTrim( Str( ProgressBarCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName ;
         OF &DesignForm ;
         VALUE ControlName ACTION SelectControl ( This.Name ) ;
         WIDTH 150 HEIGHT 30 ;
         BORDER

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ][ 1 ] := 2

      __mvPublic ( ControlName + 'RangeMin' )
      __mvPut( ControlName + 'RangeMin', '1' )
      __mvPublic ( ControlName + 'RangeMax' )
      __mvPut( ControlName + 'RangeMax', '10' )
      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '0' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'BackColor' )
      __mvPut( ControlName + 'BackColor', 'Nil' )
      __mvPublic ( ControlName + 'ForeColor' )
      __mvPut( ControlName + 'ForeColor', 'Nil' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )
      __mvPublic ( ControlName + 'Smooth' )
      __mvPut( ControlName + 'Smooth', '.F.' )
      __mvPublic ( ControlName + 'Orientation' )
      __mvPut( ControlName + 'Orientation', 'HORIZONTAL' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 25
   ///////////////////////////////////////////////////////////////////////
      PlayerCount++
      ControlName := 'Player_' + AllTrim( Str( PlayerCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         PlayerCount++
         ControlName := 'Player_' + AllTrim( Str( PlayerCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName ;
         OF &DesignForm ;
         VALUE ControlName ACTION SelectControl ( This.Name ) ;
         WIDTH 120 HEIGHT 120 ;
         BORDER

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ][ 1 ] := 3

      __mvPublic ( ControlName + 'File' )
      __mvPut( ControlName + 'File', '' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )


      __mvPublic ( ControlName + 'AutoSizeWindow' )
      __mvPut( ControlName + 'AutoSizeWindow', '.T.' )

      __mvPublic ( ControlName + 'AutoSizeMovie' )
      __mvPut( ControlName + 'AutoSizeMovie', '.T.' )

      __mvPublic ( ControlName + 'ErrorDlg' )
      __mvPut( ControlName + 'ErrorDlg', '.T.' )

      __mvPublic ( ControlName + 'Menu' )
      __mvPut( ControlName + 'Menu', '.T.' )

      __mvPublic ( ControlName + 'Open' )
      __mvPut( ControlName + 'Open', '.T.' )

      __mvPublic ( ControlName + 'PlayBar' )
      __mvPut( ControlName + 'PlayBar', '.T.' )

      __mvPublic ( ControlName + 'ShowAll' )
      __mvPut( ControlName + 'ShowAll', '.F.' )

      __mvPublic ( ControlName + 'ShowMode' )
      __mvPut( ControlName + 'ShowMode', '.F.' )

      __mvPublic ( ControlName + 'ShowName' )
      __mvPut( ControlName + 'ShowName', '.F.' )

      __mvPublic ( ControlName + 'ShowPosition' )
      __mvPut( ControlName + 'ShowPosition', '.F.' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 26
   ///////////////////////////////////////////////////////////////////////
      IpAddressCount++
      ControlName := 'IpAddress_' + AllTrim( Str( IpAddressCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         IpAddressCount++
         ControlName := 'IpAddress_' + AllTrim( Str( IpAddressCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName ;
         OF &DesignForm ;
         VALUE ControlName ACTION SelectControl ( This.Name ) ;
         FONT 'ARIAL' SIZE 9 ;
         BORDER

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ][ 1 ] := 4

      __mvPublic ( ControlName + 'Value' )
      __mvPut( ControlName + 'Value', '{ 0 , 0 , 0 , 0 }' )
      __mvPublic ( ControlName + 'FontName' )
      __mvPut( ControlName + 'FontName', 'Arial' )
      __mvPublic ( ControlName + 'FontSize' )
      __mvPut( ControlName + 'FontSize', '9' )
      __mvPublic ( ControlName + 'ToolTip' )
      __mvPut( ControlName + 'ToolTip', '' )
      __mvPublic ( ControlName + 'OnChange' )
      __mvPut( ControlName + 'OnChange', 'Nil' )
      __mvPublic ( ControlName + 'OnGotFocus' )
      __mvPut( ControlName + 'OnGotFocus', 'Nil' )
      __mvPublic ( ControlName + 'OnLostFocus' )
      __mvPut( ControlName + 'OnLostFocus', 'Nil' )
      __mvPublic ( ControlName + 'FontBold' )
      __mvPut( ControlName + 'FontBold', '.F.' )
      __mvPublic ( ControlName + 'FontItalic' )
      __mvPut( ControlName + 'FontItalic', '.F.' )
      __mvPublic ( ControlName + 'FontStrikeOut' )
      __mvPut( ControlName + 'FontStrikeOut', '.F.' )
      __mvPublic ( ControlName + 'FontUnderLine' )
      __mvPut( ControlName + 'FontUnderLine', '.F.' )
      __mvPublic ( ControlName + 'TabStop' )
      __mvPut( ControlName + 'TabStop', '.T.' )
      __mvPublic ( ControlName + 'Visible' )
      __mvPut( ControlName + 'Visible', '.T.' )
      __mvPublic ( ControlName + 'HelpId' )
      __mvPut( ControlName + 'HelpId', 'Nil' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 27
   ///////////////////////////////////////////////////////////////////////

      IF Empty ( TabHit( _HMG_MouseRow, _HMG_MouseCol ) )

         TimerCount++
         ControlName := 'Timer_' + AllTrim( Str( TimerCount ) )

         DO WHILE _IsControlDefined ( ControlName, DesignForm )
            TimerCount++
            ControlName := 'Timer_' + AllTrim( Str( TimerCount ) )
         ENDDO

         DEFINE BUTTON &ControlName
            PARENT &DesignForm
            ROW _HMG_MouseRow
            COL _HMG_MouseCol
            WIDTH 30
            HEIGHT 30
            ACTION SelectControl ( This.name )
            PICTURE 'timer'
            FLAT .T.
         END BUTTON

         IF lVirtualForm
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
         ENDIF

         _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ] := 5

         __mvPublic ( ControlName + 'Interval' )
         __mvPut( ControlName + 'Interval', '0' )
         __mvPublic ( ControlName + 'Action' )
         __mvPut( ControlName + 'Action', 'Nil' )

      ENDIF

  /*
   1: CHECKBUTTON
   2: PROGRESSBAR
   3: PLAYER
   4: IPADDRESS
   5: TIMER
   6: HYPERLINK
   7: ACTIVEX
   8: CHILD WINDOW
  */

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 35
   ///////////////////////////////////////////////////////////////////////
      ActivexCount++
      ControlName := 'Activex_' + AllTrim( Str( ActivexCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         ActivexCount++
         ControlName := 'Activex_' + AllTrim( Str( ActivexCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName ;
         OF &DesignForm ;
         VALUE ControlName ACTION SelectControl ( This.Name ) ;
         WIDTH 150 HEIGHT 150 ;
         FONT 'ARIAL' SIZE 9 ;
         BORDER

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ][ 1 ] := 7

      __mvPublic ( ControlName + 'ProgId' )
      __mvPut( ControlName + 'ProgId', '' )

   ///////////////////////////////////////////////////////////////////////
   CASE CurrentControl == 36
   ///////////////////////////////////////////////////////////////////////
      ChildWindowCount++
      ControlName := 'PanelWindow_' + AllTrim( Str( ChildWindowCount ) )

      DO WHILE _IsControlDefined ( ControlName, DesignForm )
         ChildWindowCount++
         ControlName := 'PanelWindow_' + AllTrim( Str( ChildWindowCount ) )
      ENDDO

      @ _HMG_MouseRow, _HMG_MouseCol LABEL &ControlName ;
         OF &DesignForm ;
         VALUE ControlName ACTION SelectControl ( This.Name ) ;
         WIDTH 150 HEIGHT 150 ;
         FONT 'ARIAL' SIZE 9 ;
         BORDER

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      _HMG_aControlMiscData1[ GetControlIndex ( ControlName, DesignForm ) ][ 1 ] := 8

   ENDCASE


   IF ( CurrentControl >= 2 .AND. CurrentControl <= 27 ) .OR. CurrentControl == 35 .OR. CurrentControl == 36 .OR. CurrentControl == 99

      IF CurrentControl != 19 .AND. CurrentControl != 27

         TabName := TabHit( _HMG_MouseRow, _HMG_MouseCol )

         if ! Empty ( TabName )

            SelectControl ( TabName )

            TabIndex := GetControlIndex ( TabName, DesignForm )

            TabRow := GetProperty ( DesignForm, TabName, 'Row' )
            TabCol := GetProperty ( DesignForm, TabName, 'Col' )
            TabWidth := GetProperty ( DesignForm, TabName, 'Width' )
            TabHeight := GetProperty ( DesignForm, TabName, 'Height' )
            TabCaptions := _HMG_aControlCaption[ TabIndex ]
            TabPage := GetProperty ( DesignForm, TabName, 'Value' )

            IF __mvGet ( Tabname + 'buttons' ) == '.T.'
               TMPBUTTONS := .T.
            ELSE
               TMPBUTTONS := .F.
            ENDIF

            IF __mvGet ( Tabname + 'flat' ) == '.T.'
               tabflat := .T.
            ELSE
               tabflat := .F.
            ENDIF

            DoMethod ( DesignForm, TabName, 'AddControl', ControlName, TabPage, _HMG_MouseRow - TabRow, _HMG_MouseCol - TabCol )

            IF CurrentControl == 2
               _HMG_aControlRangeMin[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF
            IF CurrentControl == 7
               _HMG_aControlRangeMin[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF
            IF CurrentControl == 12
               _HMG_aControlRangeMin[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF
            IF CurrentControl == 13
               _HMG_aControlRangeMin[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF
            IF CurrentControl == 14
               _HMG_aControlRangeMin[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF
            IF CurrentControl == 15
               _HMG_aControlRangeMin[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF
            IF CurrentControl == 16
               _HMG_aControlBrushHandle[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF
            IF CurrentControl == 22
               _HMG_aControlRangeMin[ GetControlIndex ( ControlName, DesignForm ) ] := TabName
            ENDIF

            IF CurrentControl == 18
               releaseControl ( _HMG_aControlHandles[ tabindex ] )
               _HMG_aControlHandles[ tabindex ] := InitTabControl ( DesignFormhandle, 0, tabcol, tabrow, tabwidth, tabheight, tabcaptions, tabpage, '', 0, TMPBUTTONS, TabFlat, .F., .F., .F. )
               DeleteObject ( _HMG_aControlFontHandle[ tabindex ] )
               _HMG_aControlFontHandle[ tabindex ] := _SetFont ( _HMG_aControlHandles[ tabindex ], 'Arial', 9, .F., .F., .F., .F. )
               DrawGrid()
               SelectControl ( ControlName )
               Redrawwindow( GetControlhandle ( ControlName, DesignForm ) )
            ELSE

               // MiniGUI Bug!!!!
               SetProperty ( DesignForm, TabName, 'Row', TabRow )
               DrawGrid()
               SelectControl ( ControlName )
               IF CurrentControl != 9 .AND. CurrentControl != 16 .AND. CurrentControl != 17
                  Redrawwindow( GetControlhandle ( ControlName, DesignForm ) )
               ENDIF

            ENDIF

         ELSE

            SelectControl ( Controlname )

         ENDIF

      ELSE

         SelectControl ( Controlname )

      ENDIF

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF


   ENDIF

   IF CurrentControl == 19
      SelectControl ( Controlname )
   ENDIF

   ///////////////////////////////////////////////////////////////////////
   // Reset Control Selection
   ///////////////////////////////////////////////////////////////////////

   ResetToolBar()

   SendMessage( GetControlHandle( 'Control_01', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )
   CurrentControl := 1

RETURN

*------------------------------------------------------------------------------*
PROCEDURE SelectControl( ControlName )
*------------------------------------------------------------------------------*
   LOCAL FocusHandle
   LOCAL i
   LOCAL ROW
   LOCAL COL
   LOCAL WIDTH
   LOCAL HEIGHT
   LOCAL x
   LOCAL y
   LOCAL z
   LOCAL aTemp
   LOCAL cTemp := ''
   LOCAL dTemp
   LOCAL ey
   LOCAL ez
   LOCAL eaTemp
   LOCAL ecTemp := ''
   LOCAL edTemp
   LOCAL DC
   LOCAL DR

   IF ! _IsControlDefined ( ControlName, DesignForm )
      redrawwindow( DesignFormhandle )
      DrawGrid()
      RETURN
   ENDIF

   IF lVirtualForm
      DC := GetScrollPos ( DesignFormhandle, SB_HORZ )
      DR := GetScrollPos ( DesignFormhandle, SB_VERT )
   ELSE
      DC := 0
      DR := 0
   ENDIF

   IF .NOT. Empty( SelectedControlName )

      x := GetControlIndex ( SelectedControlName, DesignForm )

      IF x > 0

         ROW := _HMG_aControlRow[ x ]
         COL := _HMG_aControlCol[ x ]
         WIDTH := _HMG_aControlWidth[ x ]
         HEIGHT := _HMG_aControlHeight[ x ]

         RedrawRect ( DesignFormhandle, ROW - 10 - DR, COL - 10 - DC, ROW + HEIGHT + 10, COL + WIDTH + 10 )

      ENDIF

   ENDIF

   SelectedControlName := ControlName

   WindowWidth := GetWindowWidth ( DesignFormHandle )
   WindowHeight := GetWindowHeight ( DesignFormHandle )

   i := GetControlIndex ( ControlName, DesignForm )

   IF _HMG_aControlType[ i ] == 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 0
      SelectedControlType := 'BUTTON'
   ELSEIF _HMG_aControlType[ i ] == 'CHECKBOX' .AND. _HMG_aControlMiscData1[ i ] == 0
      SelectedControlType := 'CHECKBOX'
   ELSEIF _HMG_aControlType[ i ] == 'LIST'
      SelectedControlType := 'LISTBOX'
   ELSEIF _HMG_aControlType[ i ] == 'COMBO'
      SelectedControlType := 'COMBOBOX'
   ELSEIF _HMG_aControlType[ i ] == 'CHECKBOX' .AND. _HMG_aControlMiscData1[ i ] == 1
      SelectedControlType := 'CHECKBUTTON'
   ELSEIF _HMG_aControlType[ i ] == 'GRID'
      SelectedControlType := 'GRID'
   ELSEIF _HMG_aControlType[ i ] == 'SLIDER'
      SelectedControlType := 'SLIDER'
   ELSEIF _HMG_aControlType[ i ] == 'SPINNER'
      SelectedControlType := 'SPINNER'
   ELSEIF _HMG_aControlType[ i ] == 'IMAGE'
      SelectedControlType := 'IMAGE'
   ELSEIF _HMG_aControlType[ i ] == 'TREE'
      SelectedControlType := 'TREE'
   ELSEIF _HMG_aControlType[ i ] == 'DATEPICK'
      SelectedControlType := 'DATEPICKER'
   ELSEIF _HMG_aControlType[ i ] == 'TEXT'
      SelectedControlType := 'TEXTBOX'
   ELSEIF _HMG_aControlType[ i ] == 'EDIT'
      SelectedControlType := 'EDITBOX'
   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 0
      SelectedControlType := 'LABEL'
   ELSEIF _HMG_aControlType[ i ] == 'BROWSE'
      SelectedControlType := 'BROWSE'
   ELSEIF _HMG_aControlType[ i ] == 'RADIOGROUP'
      SelectedControlType := 'RADIOGROUP'
   ELSEIF _HMG_aControlType[ i ] == 'FRAME'
      SelectedControlType := 'FRAME'
   ELSEIF _HMG_aControlType[ i ] == 'TAB'
      SelectedControlType := 'TAB'
   ELSEIF _HMG_aControlType[ i ] == 'ANIMATEBOX'
      SelectedControlType := 'ANIMATEBOX'
   ELSEIF _HMG_aControlType[ i ] == 'HYPERLINK' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 6
      SelectedControlType := 'HYPERLINK'
   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 7
      SelectedControlType := 'ACTIVEX'
   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 8
      SelectedControlType := 'WINDOW'
   ELSEIF _HMG_aControlType[ i ] == 'MONTHCAL'
      SelectedControlType := 'MONTHCALENDAR'
   ELSEIF _HMG_aControlType[ i ] == 'RICHEDIT'
      SelectedControlType := 'RICHEDITBOX'
   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 2
      SelectedControlType := 'PROGRESSBAR'
   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 3
      SelectedControlType := 'PLAYER'
   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 4
      SelectedControlType := 'IPADDRESS'
   ELSEIF _HMG_aControlType[ i ] == 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 5
      SelectedControlType := 'TIMER'
   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] > 10
      SelectedControlType := 'USER'
   ELSE
      SelectedControlType := ''
   ENDIF

   FocusHandle := _HMG_aControlHandles[ i ]

   SelectedControlIndex := i

   ROW := _HMG_aControlRow[ i ]
   COL := _HMG_aControlCol[ i ]
   WIDTH := _HMG_aControlWidth[ i ]
   HEIGHT := _HMG_aControlHeight[ i ]

   z := Properties.grid_1.VALUE

   IF z != 0
      aTemp := properties.grid_1.item( z )
      cTemp := AllTrim ( HMG_UPPER ( aTemp[ 1 ] ) )
   ENDIF

   ez := Properties.grid_2.VALUE

   IF ez != 0
      eaTemp := properties.grid_2.item( ez )
      ecTemp := AllTrim ( HMG_UPPER ( eaTemp[ 1 ] ) )
   ENDIF

   UpdateControlProperties ( i )

   if ! Empty ( cTemp )

      z := Properties.grid_1.itemcount

      FOR y := 1 TO z

         aTemp := properties.grid_1.item( y )
         dTemp := AllTrim ( HMG_UPPER ( aTemp[ 1 ] ) )

         IF cTemp == dTemp
            Properties.grid_1.VALUE := y
            EXIT
         ENDIF

      NEXT y

   ENDIF

   IF Properties.grid_1.VALUE == 0
      Properties.grid_1.VALUE := 1
   ENDIF

   if ! Empty ( ecTemp )

      ez := Properties.grid_2.itemcount

      FOR ey := 1 TO ez

         eaTemp := properties.grid_2.item( ey )
         edTemp := AllTrim ( HMG_UPPER ( eaTemp[ 1 ] ) )

         IF ecTemp == edTemp
            Properties.grid_2.VALUE := ey
            EXIT
         ENDIF

      NEXT ey

   ENDIF

   IF Properties.grid_2.VALUE == 0
      Properties.grid_2.VALUE := 1
   ENDIF

   rectdraw( DesignFormhandle, ROW - 6 - DR, COL - 6 - DC, ROW - 1 - DR, COL - 1 - DC, BLACK, 4, WHITE, .T. )

   linedraw( DesignFormhandle, ROW - 3 - DR, COL - 3 - DC, ROW - 3 - DR, COL - 3 - DC, BLACK, 6 )
   linedraw( DesignFormhandle, ROW + HEIGHT + 3 - DR, COL - 3 - DC, ROW + HEIGHT + 3 - DR, COL - 3 - DC, BLACK, 6 )
   linedraw( DesignFormhandle, ROW - 3 - DR, COL + WIDTH + 3 - DC, ROW - 3 - DR, COL + WIDTH + 3 - DC, BLACK, 6 )
   linedraw( DesignFormhandle, ROW - 3 - DR, COL + ( Width / 2 ) - DC, ROW - 3 - DR, COL + ( Width / 2 ) - DC, BLACK, 6 )
   linedraw( DesignFormhandle, ROW + HEIGHT + 3 - DR, COL + ( Width / 2 ) - DC, ROW + HEIGHT + 3 - DR, COL + ( Width / 2 ) - DC, BLACK, 6 )
   linedraw( DesignFormhandle, ROW + ( Height / 2 ) - DR, COL - 3 - DC, ROW + ( Height / 2 ) - DR, COL - 3 - DC, BLACK, 6 )
   linedraw( DesignFormhandle, ROW + ( Height / 2 ) - DR, COL + WIDTH + 3 - DC, ROW + ( Height / 2 ) - DR, COL + WIDTH + 3 - DC, BLACK, 6 )
   linedraw( DesignFormhandle, ROW + HEIGHT + 4 - DR, COL + WIDTH - 4 - DC, ROW + HEIGHT + 4 - DR, COL + WIDTH + 4 - DC, BLACK, 3 )
   linedraw( DesignFormhandle, ROW + HEIGHT - 4 - DR, COL + WIDTH + 4 - DC, ROW + HEIGHT + 4 - DR, COL + WIDTH + 4 - DC, BLACK, 3 )

   DoMethod ( DesignForm, 'Text_Dummy', 'SetFocus' )

   IF _HMG_aControlType[ i ] != 'RADIO' .AND. _HMG_aControlType[ i ] != 'SPINNER' .AND. _HMG_aControlType[ i ] != 'TAB'

      RedrawWindow ( FocusHandle )

   ENDIF

   UpdateCombo()

   FOR i := 1 TO Properties.Combo_1.ItemCount
      IF Properties.Combo_1.Item ( i ) == SelectedControlName
         ComboSetCursel ( GetControlHandle( 'Combo_1', 'Properties' ), i )
         EXIT
      ENDIF
   NEXT i

   DrawGrid()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE MoveControl()
*------------------------------------------------------------------------------*
   LOCAL dr, dc, vdc, vdr

   IF lVirtualForm
      VDC := GetScrollPos ( DesignFormhandle, SB_HORZ )
      VDR := GetScrollPos ( DesignFormhandle, SB_VERT )
   ELSE
      VDC := 0
      VDR := 0
   ENDIF


   IF MoveStarted == .T.

      IF SnapToGrid == .T.

         dr := 10 - Val ( hb_URight ( AllTrim( Str ( _HMG_MouseRow ) ), 1 ) )
         _HMG_MouseRow := _HMG_MouseRow + dr

         dc := 10 - Val ( hb_URight ( AllTrim( Str ( _HMG_MouseCol ) ), 1 ) )
         _HMG_MouseCol := _HMG_MouseCol + dc

      ENDIF

      IF _HMG_MouseCol == _pc .AND. _HMG_MouseRow == _pr
         RETURN
      ENDIF

      Form_Main.StatusBar.Item ( 2 + STATUSITEM_OFFSET ) := 'r:' + AllTrim( Str( _HMG_MouseRow ) ) + ' c:' + AllTrim( Str( _HMG_MouseCol ) ) + ' w:' + AllTrim( Str( MoveWidth ) ) + ' h:' + AllTrim( Str( MoveHeight ) )

      RedrawRect ( DesignFormhandle, _pr - 22 - VDR, _pc - 22 - VDC, _pr + MoveHeight + 22 - VDR, _pc + MoveWidth + 22 - VDC )

      DrawGrid()

      linedraw( DesignFormhandle, _HMG_MouseRow - 3 - VDR, _HMG_MouseCol - 3 - VDC, _HMG_MouseRow - 3 - VDR, _HMG_MouseCol - 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + MoveHeight + 3 - VDR, _HMG_MouseCol - 3 - VDC, _HMG_MouseRow + MoveHeight + 3 - VDR, _HMG_MouseCol - 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow - 3 - VDR, _HMG_MouseCol + MoveWidth + 3 - VDC, _HMG_MouseRow - 3 - VDR, _HMG_MouseCol + MoveWidth + 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + MoveHeight + 3 - VDR, _HMG_MouseCol + MoveWidth + 3 - VDC, _HMG_MouseRow + MoveHeight + 3 - VDR, _HMG_MouseCol + MoveWidth + 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow - 3 - VDR, _HMG_MouseCol + ( MoveWidth / 2 ) - VDC, _HMG_MouseRow - 3 - VDR, _HMG_MouseCol + ( MoveWidth / 2 ) - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + MoveHeight + 3 - VDR, _HMG_MouseCol + ( MoveWidth / 2 ) - VDC, _HMG_MouseRow + MoveHeight + 3 - VDR, _HMG_MouseCol + ( MoveWidth / 2 ) - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + ( MoveHeight / 2 ) - VDR, _HMG_MouseCol - 3 - VDC, _HMG_MouseRow + ( MoveHeight / 2 ) - VDR, _HMG_MouseCol - 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + ( MoveHeight / 2 ) - VDR, _HMG_MouseCol + MoveWidth + 3 - VDC, _HMG_MouseRow + ( MoveHeight / 2 ) - VDR, _HMG_MouseCol + MoveWidth + 3 - VDC, BLACK, 6 )

      _pr := _HMG_MouseRow
      _pc := _HMG_MouseCol

   ELSEIF SizeStarted == .T.

      IF SnapToGrid == .T.

         dr := Val ( hb_URight ( AllTrim( Str ( _HMG_MouseRow ) ), 1 ) )
         _HMG_MouseRow := _HMG_MouseRow - dr

         dc := Val ( hb_URight ( AllTrim( Str ( _HMG_MouseCol ) ), 1 ) )
         _HMG_MouseCol := _HMG_MouseCol - dc

      ENDIF

      IF _HMG_MouseCol == _pc .AND. _HMG_MouseRow == _pr
         RETURN
      ENDIF

      IF _HMG_MouseRow - 10 <= MoveRow .OR. _HMG_MouseCol - 10 <= Movecol
         RETURN
      ENDIF

      Form_Main.StatusBar.Item ( 2 + STATUSITEM_OFFSET ) := 'r:' + AllTrim( Str( MoveRow ) ) + ' c:' + AllTrim( Str( MoveCol ) ) + ' w:' + AllTrim( Str( _HMG_MouseCol - MoveCol ) ) + ' h:' + AllTrim( Str( _HMG_MouseRow - MoveRow ) )

      RedrawRect ( DesignFormhandle, MoveRow - 8 - VDR, MoveCol - 8 - VDC, _pr + 8 - VDR, _pc + 8 - VDC )

      DrawGrid()

      linedraw( DesignFormhandle, MoveRow - 3 - VDR, MoveCol - 3 - VDC, MoveRow - 3 - VDR, MoveCol - 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + 3 - VDR, MoveCol - 3 - VDC, _HMG_MouseRow + 3 - VDR, MoveCol - 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, MoveRow - 3 - VDR, _HMG_MouseCol + 3 - VDC, MoveRow - 3 - VDR, _HMG_MouseCol + 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + 3 - VDR, _HMG_MouseCol + 3 - VDC, _HMG_MouseRow + 3 - VDR, _HMG_MouseCol + 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, MoveRow - 3 - VDR, MoveCol + ( ( _HMG_MouseCol - MoveCol ) / 2 ) - VDC, MoveRow - 3 - VDR, MoveCol + ( ( _HMG_MouseCol - MoveCol ) / 2 ) - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, _HMG_MouseRow + 3 - VDR, MoveCol + ( ( _HMG_MouseCol - MoveCol ) / 2 ) - VDC, _HMG_MouseRow + 3 - VDR, MoveCol + ( ( _HMG_MouseCol - MoveCol ) / 2 ) - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, MoveRow + ( _HMG_MouseRow - MoveRow ) / 2 - VDR, MoveCol - 3 - VDC, MoveRow + ( _HMG_MouseRow - MoveRow ) / 2 - VDR, MoveCol - 3 - VDC, BLACK, 6 )

      linedraw( DesignFormhandle, MoveRow + ( _HMG_MouseRow - MoveRow ) / 2 - VDR, _HMG_MouseCol - VDC, MoveRow + ( _HMG_MouseRow - MoveRow ) / 2 - VDR, _HMG_MouseCol - VDC, BLACK, 6 )

      _pr := _HMG_MouseRow
      _pc := _HMG_MouseCol

   ENDIF

RETURN


*------------------------------------------------------------------------------*
PROCEDURE Test
*------------------------------------------------------------------------------*
   LOCAL ROW
   LOCAL COL
   LOCAL WIDTH
   LOCAL HEIGHT
   LOCAL vdr
   LOCAL vdc

   IF lVirtualForm
      VDC := GetScrollPos ( DesignFormhandle, SB_HORZ )
      VDR := GetScrollPos ( DesignFormhandle, SB_VERT )
   ELSE
      VDC := 0
      VDR := 0
   ENDIF

   IF MoveStarted == .T.

      RedrawRect ( DesignFormhandle, _pr - 22 - VDR, _pc - 22 - VDC, _pr + MoveHeight + 22 - VDR, _pc + MoveWidth + 22 - VDC )

      IF _HMG_MouseRow < 10
         _HMG_MouseRow := 10
      ENDIF
      IF _HMG_MouseCol < 10
         _HMG_MouseCol := 10
      ENDIF

      MoveStarted := .F.

      IF _HMG_aControlContainerRow[ moveindex ] == -1 .AND. _HMG_aControlContainerCol[ moveindex ] == -1

         if ! Empty ( TabHit( _HMG_MouseRow, _HMG_MouseCol ) ) .AND. _HMG_aControlType[ moveindex ] != 'TAB'

            SetProperty ( DesignForm, 'Cursor', 'arrow' )
            SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Visible', .T. )
            Redrawwindow( DesignFormHandle )
            DrawGrid()
            SelectControl ( _HMG_aControlNames[ moveindex ] )

            IF lVirtualForm
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
            ENDIF

            RETURN

         ELSE

            SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Row', _HMG_MouseRow )
            SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Col', _HMG_MouseCol )

            IF lVirtualForm
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
            ENDIF


         ENDIF

      ELSE

         if ! Empty ( TabHit( _HMG_MouseRow, _HMG_MouseCol ) )

            // MsgInfo ('Moving 1')

            SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Row', _HMG_MouseRow - _HMG_aControlContainerRow[ moveindex ] )
            SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Col', _HMG_MouseCol - _HMG_aControlContainerCol[ moveindex ] )

            SetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Row', GetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Row' ) )
            SetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Value', GetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Value' ) )
            DrawGrid()

            IF lVirtualForm
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
            ENDIF

         ELSE

            SetProperty ( DesignForm, 'Cursor', 'arrow' )
            SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Visible', .T. )
            Redrawwindow( DesignFormHandle )
            DrawGrid()
            SelectControl ( _HMG_aControlNames[ moveindex ] )

            IF lVirtualForm
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
               SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
            ENDIF

            RETURN

         ENDIF

      ENDIF

      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Visible', .T. )

      SetProperty ( DesignForm, 'Cursor', 'arrow' )

      ROW := _HMG_aControlRow[ moveindex ]
      COL := _HMG_aControlCol[ moveindex ]
      WIDTH := _HMG_aControlWidth[ moveindex ]
      HEIGHT := _HMG_aControlHeight[ moveindex ]

      UpdateControlProperties ( moveindex )

      rectdraw( DesignFormhandle, ROW - 6 - VDR, COL - 6 - VDC, ROW - 1 - VDR, COL - 1 - VDC, BLACK, 4, WHITE, .T. )

      linedraw( DesignFormhandle, ROW + HEIGHT + 4 - VDR, COL + WIDTH - 4 - VDC, ROW + HEIGHT + 4 - VDR, COL + WIDTH + 4 - VDC, BLACK, 3 )
      linedraw( DesignFormhandle, ROW + HEIGHT - 4 - VDR, COL + WIDTH + 4 - VDC, ROW + HEIGHT + 4 - VDR, COL + WIDTH + 4 - VDC, BLACK, 3 )

      linedraw( DesignFormhandle, ROW - 3 - VDR, COL - 3 - VDC, ROW - 3 - VDR, COL - 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + HEIGHT + 3 - VDR, COL - 3 - VDC, ROW + HEIGHT + 3 - VDR, COL - 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW - 3 - VDR, COL + WIDTH + 3 - VDC, ROW - 3 - VDR, COL + WIDTH + 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + HEIGHT + 3 - VDR, COL + WIDTH + 3 - VDC, ROW + HEIGHT + 3 - VDR, COL + WIDTH + 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW - 3 - VDR, COL + ( Width / 2 ) - VDC, ROW - 3 - VDR, COL + ( Width / 2 ) - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + HEIGHT + 3 - VDR, COL + ( Width / 2 ) - VDC, ROW + HEIGHT + 3 - VDR, COL + ( Width / 2 ) - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + ( Height / 2 ) - VDR, COL - 3 - VDC, ROW + ( Height / 2 ) - VDR, COL - 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + ( Height / 2 ) - VDR, COL + WIDTH + 3 - VDC, ROW + ( Height / 2 ) - VDR, COL + WIDTH + 3 - VDC, BLACK, 6 )

      DrawGrid()

      RETURN

   ENDIF

   IF SizeStarted == .T.

      SizeStarted := .F.
      RedrawRect ( DesignFormhandle, MoveRow - 10 - VDR, MoveCol - 10 - VDC, _pr + 10 - VDR, _pc + 10 - VDC )

      IF _HMG_MouseRow < ( MoveRow + 20 ) .OR. _HMG_MouseCol < ( MoveCol + 20 )
         SetProperty ( DesignForm, 'Cursor', 'arrow' )
         SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Visible', .T. )
         Redrawwindow( DesignFormHandle )
         DrawGrid()
         SelectControl ( _HMG_aControlNames[ moveindex ] )

         IF lVirtualForm
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
         ENDIF

         RETURN
      ENDIF

      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Width', _HMG_MouseCol - MoveCol )
      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Height', _HMG_MouseRow - MoveRow )
      SetProperty ( DesignForm, _HMG_aControlNames[ moveindex ], 'Visible', .T. )

      IF ! Empty ( TabHit( _HMG_MouseRow, _HMG_MouseCol ) ) .AND. _HMG_aControlType[ moveindex ] != 'TAB'

         SetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Row', GetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Row' ) )
         SetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Value', GetProperty ( DesignForm, TabHit( _HMG_MouseRow, _HMG_MouseCol ), 'Value' ) )
         SelectControl ( _HMG_aControlNames[ moveindex ] )
         DrawGrid()

         IF lVirtualForm
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
            SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
         ENDIF

      ENDIF

      ROW := _HMG_aControlRow[ moveindex ]
      COL := _HMG_aControlCol[ moveindex ]
      WIDTH := _HMG_aControlWidth[ moveindex ]
      HEIGHT := _HMG_aControlHeight[ moveindex ]

      UpdateControlProperties ( moveindex )

      rectdraw( DesignFormhandle, ROW - 6 - VDR, COL - 6 - VDC, ROW - 1 - VDR, COL - 1 - VDC, BLACK, 4, WHITE, .T. )

      linedraw( DesignFormhandle, ROW - 3 - VDR, COL - 3 - VDC, ROW - 3 - VDR, COL - 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + HEIGHT + 3 - VDR, COL - 3 - VDC, ROW + HEIGHT + 3 - VDR, COL - 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW - 3 - VDR, COL + WIDTH + 3 - VDC, ROW - 3 - VDR, COL + WIDTH + 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW - 3 - VDR, COL + ( Width / 2 ) - VDC, ROW - 3 - VDR, COL + ( Width / 2 ) - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + HEIGHT + 3 - VDR, COL + ( Width / 2 ) - VDC, ROW + HEIGHT + 3 - VDR, COL + ( Width / 2 ) - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + ( Height / 2 ) - VDR, COL - 3 - VDC, ROW + ( Height / 2 ) - VDR, COL - 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + ( Height / 2 ) - VDR, COL + WIDTH + 3 - VDC, ROW + ( Height / 2 ) - VDR, COL + WIDTH + 3 - VDC, BLACK, 6 )
      linedraw( DesignFormhandle, ROW + HEIGHT + 4 - VDR, COL + WIDTH - 4 - VDC, ROW + HEIGHT + 4 - VDR, COL + WIDTH + 4 - VDC, BLACK, 3 )
      linedraw( DesignFormhandle, ROW + HEIGHT - 4 - VDR, COL + WIDTH + 4 - VDC, ROW + HEIGHT + 4 - VDR, COL + WIDTH + 4 - VDC, BLACK, 3 )

      SetProperty ( DesignForm, 'Cursor', 'arrow' )

      DrawGrid()

      IF lVirtualForm
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEDOWN, 0 )
         SendMessage ( GetFormhandle ( DesignForm ), WM_VSCROLL, SB_LINEUP, 0 )
      ENDIF

      RETURN

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE RedrawControls
*------------------------------------------------------------------------------*
   LOCAL i

   FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )
      IF _HMG_aControlParenthandles[ i ] == DesignFormHandle
         IF _HMG_aControlType[ i ] != 'SPINNER' .AND. _HMG_aControlType[ i ] != 'RADIOGROUP'
            RedrawWindow ( _HMG_aControlHandles[ i ] )
         ENDIF
      ENDIF
   NEXT i

RETURN


PROCEDURE DrawGrid()

   DRAWDESIGNGRID( DesignFormHandle, GetWindowHeight( DesignFormhandle ), GetWindowWidth( DesignFormhandle ) )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_01_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_01', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 1

   SendMessage( GetControlHandle( 'Control_01', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_02_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_02', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 2

   SendMessage( GetControlHandle( 'Control_02', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_03_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_03', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 3

   SendMessage( GetControlHandle( 'Control_03', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_04_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_04', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 4

   SendMessage( GetControlHandle( 'Control_04', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_05_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_05', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 5

   SendMessage( GetControlHandle( 'Control_05', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_06_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_06', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 6

   SendMessage( GetControlHandle( 'Control_06', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_07_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_07', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 7

   SendMessage( GetControlHandle( 'Control_07', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_08_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_08', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 8

   SendMessage( GetControlHandle( 'Control_08', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_09_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_09', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 9

   SendMessage( GetControlHandle( 'Control_09', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_10_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_10', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 10

   SendMessage( GetControlHandle( 'Control_10', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_11_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_11', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 11

   SendMessage( GetControlHandle( 'Control_11', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_12_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_12', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 12

   SendMessage( GetControlHandle( 'Control_12', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_13_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_13', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 13

   SendMessage( GetControlHandle( 'Control_13', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_14_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_14', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 14

   SendMessage( GetControlHandle( 'Control_14', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_15_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_15', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 15

   SendMessage( GetControlHandle( 'Control_15', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_16_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_16', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 16

   SendMessage( GetControlHandle( 'Control_16', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_17_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_17', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 17

   SendMessage( GetControlHandle( 'Control_17', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_18_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_18', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 18

   SendMessage( GetControlHandle( 'Control_18', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_19_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_19', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 19

   SendMessage( GetControlHandle( 'Control_19', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_20_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_20', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 20

   SendMessage( GetControlHandle( 'Control_20', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_21_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_21', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 21

   SendMessage( GetControlHandle( 'Control_21', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_22_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_22', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 22

   SendMessage( GetControlHandle( 'Control_22', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_23_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_23', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 23

   SendMessage( GetControlHandle( 'Control_23', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_24_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_24', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 24

   SendMessage( GetControlHandle( 'Control_24', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_25_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_25', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 25

   SendMessage( GetControlHandle( 'Control_25', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_26_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_26', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 26

   SendMessage( GetControlHandle( 'Control_26', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_27_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_27', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 27

   SendMessage( GetControlHandle( 'Control_27', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_35_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWIndowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_35', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 35

   SendMessage( GetControlHandle( 'Control_35', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Control_36_Click()
*------------------------------------------------------------------------------*

   IF ! _IsWindowDefined ( DesignForm )
      SendMessage( GetControlHandle( 'Control_36', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   ResetToolBar()

   CurrentControl := 36

   SendMessage( GetControlHandle( 'Control_36', 'Form_Main' ), BM_SETCHECK, BST_CHECKED, 0 )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE UpdateDesignFormProperties()
*------------------------------------------------------------------------------*
   LOCAL z, ez
   LOCAL aTemp, eaTemp
   LOCAL cTemp, ecTemp
   LOCAL y, ey
   LOCAL dTemp, edTemp

   IF ValType( __mvGet ( DesignForm + 'WindowType' ) ) <> 'C'
      RETURN
   ENDIF

   IF ! _IsWindowDefined ( DesignForm )
      RETURN
   ENDIF

   z := Properties.grid_1.VALUE

   IF z != 0
      aTemp := properties.grid_1.item( z )
      cTemp := AllTrim ( HMG_UPPER ( aTemp[ 1 ] ) )
   ENDIF

   ez := Properties.grid_2.VALUE

   IF ez != 0
      eaTemp := properties.grid_2.item( ez )
      ecTemp := AllTrim ( HMG_UPPER ( eaTemp[ 1 ] ) )
   ENDIF

   Properties.Grid_1.DeleteAllItems

   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD' ;
         .AND. ;
         __mvGet ( DesignForm + 'WindowType' ) <> 'MAIN'

      Properties.Grid_1.AddItem ( { 'AutoRelease', __mvGet ( DesignForm + 'AutoRelease' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( DesignForm + 'BackColor' ) } )

   IF __mvGet ( DesignForm + 'WindowType' ) == 'SPLITCHILD'

      Properties.Grid_1.AddItem ( { 'Break', __mvGet ( DesignForm + 'Break' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( GetProperty ( DesignForm, 'Col' ) ) ) } )
   Properties.Grid_1.AddItem ( { 'Cursor', __mvGet ( DesignForm + 'Cursor' ) } )

   IF __mvGet ( DesignForm + 'WindowType' ) == 'SPLITCHILD'

      Properties.Grid_1.AddItem ( { 'Focused', __mvGet ( DesignForm + 'Focused' ) } )

   ENDIF

   IF __mvGet ( DesignForm + 'WindowType' ) == 'SPLITCHILD'

      Properties.Grid_1.AddItem ( { 'GripperText', __mvGet ( DesignForm + 'GripperText' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( GetProperty ( DesignForm, 'Height' ) ) ) } )

   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

      Properties.Grid_1.AddItem ( { 'HelpButton', __mvGet ( DesignForm + 'HelpButton' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'Icon', __mvGet ( DesignForm + 'Icon' ) } )

   IF __mvGet ( DesignForm + 'WindowType' ) == 'STANDARD' ;
         .OR. ;
         __mvGet ( DesignForm + 'WindowType' ) == 'MAIN' ;
         .OR. ;
         __mvGet ( DesignForm + 'WindowType' ) == 'CHILD'

      Properties.Grid_1.AddItem ( { 'MaxButton', __mvGet ( DesignForm + 'MaxButton' ) } )
      Properties.Grid_1.AddItem ( { 'MinButton', __mvGet ( DesignForm + 'MinButton' ) } )

   ENDIF

   IF __mvGet ( DesignForm + 'WindowType' ) == 'MAIN'

      Properties.Grid_1.AddItem ( { 'NotifyIcon', __mvGet ( DesignForm + 'NotifyIcon' ) } )
      Properties.Grid_1.AddItem ( { 'NotifyTooltip', __mvGet ( DesignForm + 'NotifyTooltip' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( GetProperty ( DesignForm, 'Row' ) ) ) } )

   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

      Properties.Grid_1.AddItem ( { 'Sizable', __mvGet ( DesignForm + 'Sizable' ) } )
      Properties.Grid_1.AddItem ( { 'SysMenu', __mvGet ( DesignForm + 'SysMenu' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'Title', GetProperty ( DesignForm, 'Title' ) } )
   Properties.Grid_1.AddItem ( { 'TitleBar', __mvGet ( DesignForm + 'TitleBar' ) } )


   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD' ;
         .AND. ;
         __mvGet ( DesignForm + 'WindowType' ) <> 'MODAL'

      Properties.Grid_1.AddItem ( { 'Topmost', __mvGet ( DesignForm + 'Topmost' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'Virtual Sized', __mvGet ( DesignForm + 'VirtualSized' ) } )

   Properties.Grid_1.AddItem ( { 'Virtual Height', __mvGet ( DesignForm + 'VirtualHeight' ) } )
   Properties.Grid_1.AddItem ( { 'Virtual Width', __mvGet ( DesignForm + 'VirtualWidth' ) } )

   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( DesignForm + 'Visible' ) } )

   ENDIF

   Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( GetProperty ( DesignForm, 'Width' ) ) ) } )
   Properties.Grid_1.AddItem ( { 'WindowType', __mvGet ( DesignForm + 'WindowType' ) } )

   Properties.Grid_2.DeleteAllItems
   Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( DesignForm + 'OnGotFocus' ), '+', '-', '...' } )
   Properties.Grid_2.AddItem ( { 'OnHScrollBox', __mvGet ( DesignForm + 'OnHScrollBox' ), '+', '-', '...' } )

   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

      Properties.Grid_2.AddItem ( { 'OnInit', __mvGet ( DesignForm + 'OnInit' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnInteractiveClose', __mvGet ( DesignForm + 'OnInteractiveClose' ), '+', '-', '...' } )

   ENDIF


   Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( DesignForm + 'OnLostFocus' ), '+', '-', '...' } )


   IF __mvGet ( DesignForm + 'WindowType' ) == 'STANDARD' ;
         .OR. ;
         __mvGet ( DesignForm + 'WindowType' ) == 'MAIN' ;
         .OR. ;
         __mvGet ( DesignForm + 'WindowType' ) == 'CHILD'

      Properties.Grid_2.AddItem ( { 'OnMaximize', __mvGet ( DesignForm + 'OnMaximize' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnMinimize', __mvGet ( DesignForm + 'OnMinimize' ), '+', '-', '...' } )

   ENDIF


   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

      Properties.Grid_2.AddItem ( { 'OnMouseClick', __mvGet ( DesignForm + 'OnMouseClick' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnMouseDrag', __mvGet ( DesignForm + 'OnMouseDrag' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnMouseMove', __mvGet ( DesignForm + 'OnMouseMove' ), '+', '-', '...' } )

   ENDIF

   IF __mvGet ( DesignForm + 'WindowType' ) == 'MAIN'

      Properties.Grid_2.AddItem ( { 'OnNotifyClick', __mvGet ( DesignForm + 'OnNotifyClick' ), '+', '-', '...' } )

   ENDIF

   Properties.Grid_2.AddItem ( { 'OnPaint', __mvGet ( DesignForm + 'OnPaint' ), '+', '-', '...' } )

   IF __mvGet ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

      Properties.Grid_2.AddItem ( { 'OnRelease', __mvGet ( DesignForm + 'OnRelease' ), '+', '-', '...' } )

   ENDIF

   Properties.Grid_2.AddItem ( { 'OnScrollDown', __mvGet ( DesignForm + 'OnScrollDown' ), '+', '-', '...' } )
   Properties.Grid_2.AddItem ( { 'OnScrollLeft', __mvGet ( DesignForm + 'OnScrollLeft' ), '+', '-', '...' } )
   Properties.Grid_2.AddItem ( { 'OnScrollRight', __mvGet ( DesignForm + 'OnScrollRight' ), '+', '-', '...' } )
   Properties.Grid_2.AddItem ( { 'OnScrollUp', __mvGet ( DesignForm + 'OnScrollUp' ), '+', '-', '...' } )
   Properties.Grid_2.AddItem ( { 'OnSize', __mvGet ( DesignForm + 'OnSize' ), '+', '-', '...' } )
   Properties.Grid_2.AddItem ( { 'OnVScrollBox', __mvGet ( DesignForm + 'OnVScrollBox' ), '+', '-', '...' } )

   Form_Main.StatusBar.Item ( 2 + STATUSITEM_OFFSET ) := 'r:' + AllTrim( Str( GetProperty ( DesignForm, 'Row' ) ) ) + ' c:' + AllTrim( Str( GetProperty ( DesignForm, 'Col' ) ) ) + ' w:' + AllTrim( Str( GetProperty ( DesignForm, 'Width' ) ) ) + ' h:' + AllTrim( Str( GetProperty ( DesignForm, 'Height' ) ) )

   IF ! Empty ( cTemp )

      z := Properties.grid_1.itemcount

      FOR y := 1 TO z

         aTemp := properties.grid_1.item( y )
         dTemp := AllTrim ( HMG_UPPER ( aTemp[ 1 ] ) )

         IF cTemp == dTemp
            Properties.grid_1.VALUE := y
            EXIT
         ENDIF

      NEXT y

   ENDIF

   IF Properties.grid_1.VALUE == 0
      Properties.grid_1.VALUE := 1
   ENDIF


   IF ! Empty ( ecTemp )

      ez := Properties.grid_2.itemcount

      FOR ey := 1 TO ez

         eaTemp := properties.grid_2.item( ey )
         edTemp := AllTrim ( HMG_UPPER ( eaTemp[ 1 ] ) )

         IF ecTemp == edTemp
            Properties.grid_2.VALUE := ey
            EXIT
         ENDIF

      NEXT ey

   ENDIF

   IF Properties.grid_2.VALUE == 0
      Properties.grid_2.VALUE := 1
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE PropertyEdit()
*------------------------------------------------------------------------------*
   LOCAL Result, fmb, _OLDNAME, _NEWNAME, TabMultiline
   LOCAL i, aRow, PropertyName, PreviousValue, a, x, k, z, aTemp, cTemp, x1
   LOCAL y
   LOCAL RowTemp
   LOCAL Coltemp
   LOCAL WidthTemp
   LOCAL HeightTemp
   LOCAL CaptionTemp
   LOCAL ColorTmp
   LOCAL OptTemp
   LOCAL TabName
   LOCAL TabIndex
   LOCAL TabRow
   LOCAL TabCol
   LOCAL TabWidth
   LOCAL TabHeight
   LOCAL TabCaptions
   LOCAL TabPage
   LOCAL TabButtons
   LOCAL TabFlat
   LOCAL TabHotTrack
   LOCAL TabVertical
   LOCAL TabFontName
   LOCAL TabFontSize
   LOCAL TabBold
   LOCAL TabItalic
   LOCAL TabUnderLine
   LOCAL TabStrikeout
   LOCAL lSuccess
   LOCAL nTemp
   LOCAL b
   LOCAL c
   LOCAL d
   LOCAL e
   LOCAL aProperties
   LOCAL aEvents
   LOCAL f

   i := Properties.Grid_1.VALUE

   IF i == 0
      RETURN
   ENDIF

   aRow := Properties.Grid_1.Item ( i )

   PropertyName := AllTrim ( HMG_UPPER ( aRow[ 1 ] ) )

   IF PropertyName == 'WIDTH' .AND. SelectedControlType == 'MONTHCALENDAR'
      Playhand()
      RETURN
   ENDIF
   IF PropertyName == 'HEIGHT' .AND. SelectedControlType == 'MONTHCALENDAR'
      Playhand()
      RETURN
   ENDIF
   IF PropertyName == 'HEIGHT' .AND. SelectedControlType == 'RADIOGROUP'
      Playhand()
      RETURN
   ENDIF

   IF PropertyName == 'VIRTUAL WIDTH' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF

   IF PropertyName == 'VIRTUAL HEIGHT' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF

   PreviousValue := aRow[ 2 ]


	*********************************************************************
	* Begin User *
	*********************************************************************

   IF SelectedControlType == 'USER'

      c := ''

      FOR b := 1 TO HMG_LEN ( PropertyName )

         d := hb_USubStr ( Propertyname, b, 1 )

         IF b == 1
            d := HMG_UPPER ( d )
         ELSE
            d := HMG_LOWER ( d )
         ENDIF

         c := c + d

      NEXT b

      IF HMG_UPPER( AllTrim( PropertyName ) ) == 'ROW' ;
            .OR. ;
            HMG_UPPER( AllTrim( PropertyName ) ) == 'COL' ;
            .OR. ;
            HMG_UPPER( AllTrim( PropertyName ) ) == 'WIDTH' ;
            .OR. ;
            HMG_UPPER( AllTrim( PropertyName ) ) == 'HEIGHT'

         Result := AllTrim ( PickNumericPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', aRow[ 2 ] ) )

         IF .NOT. _HMG_DialogCancelled == .T.

            SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
            RedrawWindow ( DesignForm )
            SelectControl ( SelectedControlName )

         ENDIF

         RETURN

      ELSEIF HMG_UPPER( AllTrim( PropertyName ) ) == 'NAME'

         Result := AllTrim ( InputBox ( c + ':', aMsgs[ 130 ], PreviousValue ) )

         IF .NOT. _HMG_DialogCancelled == .T.

            b := GetControlIndex ( SelectedControlName, DesignForm )
            IF b > 0

               IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )
                  RETURN
               ENDIF

               If ! IsControNameValid ( Result )
                  MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )
                  RETURN
               ENDIF

               e := _HMG_aControlMiscData1[ b ][ 1 ] - 10
               aProperties := aComponentProperties[ e ]
               aEvents := aComponentEvents[ e ]

               FOR f := 1 TO HMG_LEN ( aProperties )

                  IF HMG_UPPER( AllTrim( aProperties[ f ] ) ) <> 'ROW' ;
                        .AND. ;
                        HMG_UPPER( AllTrim( aProperties[ f ] ) ) <> 'COL' ;
                        .AND. ;
                        HMG_UPPER( AllTrim( aProperties[ f ] ) ) <> 'WIDTH' ;
                        .AND. ;
                        HMG_UPPER( AllTrim( aProperties[ f ] ) ) <> 'HEIGHT' ;
                        .AND. ;
                        HMG_UPPER( AllTrim( aProperties[ f ] ) ) <> 'NAME'

                     __mvPublic ( Result + aProperties[ f ] )
                     __mvPut( Result + aProperties[ f ], __mvGet ( PreviousValue + aProperties[ f ] ) )
                     __mvXRelease( PreviousValue + aProperties[ f ] )

                  ENDIF

               NEXT f

               FOR f := 1 TO HMG_LEN ( aEvents )

                  __mvPublic ( Result + aEvents[ f ] )
                  __mvPut( Result + aEvents[ f ], __mvGet ( PreviousValue + aEvents[ f ] ) )
                  __mvXRelease( PreviousValue + aEvents[ f ] )

               NEXT f

               _HMG_aControlNames[ b ] := Result

               __mvPublic ( '_' + DesignForm + '_' + Result )
               __mvPut( '_' + DesignForm + '_' + Result, b )

               __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

               SelectedControlName := Result

               SetProperty ( DesignForm, SelectedControlName, 'Value', SelectedControlName )

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ENDIF

         ENDIF

         RETURN

      ELSE

         Result := AllTrim ( InputBox ( c + ':', aMsgs[ 130 ], PreviousValue ) )

         IF .NOT. _HMG_DialogCancelled == .T.

            __mvPut ( SelectedControlName + PropertyName, Result )
            SelectControl ( SelectedControlName )

         ENDIF

      ENDIF

      RETURN

   ENDIF

	*********************************************************************
	* End User *
	*********************************************************************

   IF PropertyName == 'VISIBLE' ;
         .OR. ;
         PropertyName == 'HANDCURSOR' ;
         .OR. ;
         PropertyName == 'FLAT' ;
         .OR. ;
         PropertyName == 'SHOWHEADERS' ;
         .OR. ;
         PropertyName == 'BREAK' ;
         .OR. ;
         PropertyName == 'FOCUSED' ;
         .OR. ;
         PropertyName == 'TITLEBAR' ;
         .OR. ;
         PropertyName == 'SYSMENU' ;
         .OR. ;
         PropertyName == 'SIZABLE' ;
         .OR. ;
         PropertyName == 'MAXBUTTON' ;
         .OR. ;
         PropertyName == 'MINBUTTON' ;
         .OR. ;
         PropertyName == 'AUTORELEASE' ;
         .OR. ;
         PropertyName == 'TOPMOST' ;
         .OR. ;
         PropertyName == 'HELPBUTTON' ;
         .OR. ;
         PropertyName == 'VERTICAL' ;
         .OR. ;
         PropertyName == 'HOTTRACK' ;
         .OR. ;
         PropertyName == 'BUTTONS' ;
         .OR. ;
         PropertyName == 'CENTER' ;
         .OR. ;
         PropertyName == 'AUTOPLAY' ;
         .OR. ;
         PropertyName == 'SMOOTH' ;
         .OR. ;
         PropertyName == 'TODAY' ;
         .OR. ;
         PropertyName == 'TODAYCIRCLE' ;
         .OR. ;
         PropertyName == 'WEEKNUMBERS' ;
         .OR. ;
         PropertyName == 'AUTOSIZEWINDOW' ;
         .OR. ;
         PropertyName == 'AUTOSIZEMOVIE' ;
         .OR. ;
         PropertyName == 'ERRORDLG' ;
         .OR. ;
         PropertyName == 'MENU' ;
         .OR. ;
         PropertyName == 'OPEN' ;
         .OR. ;
         PropertyName == 'PLAYBAR' ;
         .OR. ;
         PropertyName == 'SHOWALL' ;
         .OR. ;
         PropertyName == 'SHOWMODE' ;
         .OR. ;
         PropertyName == 'SHOWNAME' ;
         .OR. ;
         PropertyName == 'SHOWPOSITION' ;
         .OR. ;
         PropertyName == 'FONTBOLD' ;
         .OR. ;
         PropertyName == 'LOCK' ;
         .OR. ;
         PropertyName == 'VSCROLLBAR' ;
         .OR. ;
         PropertyName == 'HSCROLLBAR' ;
         .OR. ;
         PropertyName == 'FONTITALIC' ;
         .OR. ;
         PropertyName == 'FONTUNDERLINE' ;
         .OR. ;
         PropertyName == 'FONTSTRIKEOUT' ;
         .OR. ;
         PropertyName == 'TABSTOP' ;
         .OR. ;
         PropertyName == 'TRANSPARENT' ;
         .OR. ;
         PropertyName == 'MULTISELECT' ;
         .OR. ;
         PropertyName == 'SORT' ;
         .OR. ;
         PropertyName == 'DISPLAYEDIT' ;
         .OR. ;
         PropertyName == 'ALLOWEDIT' ;
         .OR. ;
         PropertyName == 'ALLOWAPPEND' ;
         .OR. ;
         PropertyName == 'ALLOWDELETE' ;
         .OR. ;
         PropertyName == 'LINES' ;
         .OR. ;
         PropertyName == 'VIRTUAL' ;
         .OR. ;
         ( PropertyName == 'READONLY' .AND. SelectedControlType <> 'RADIOGROUP' ) ;
         .OR. ;
         PropertyName == 'WRAP' ;
         .OR. ;
         PropertyName == 'STRETCH' ;
         .OR. ;
         PropertyName == 'RIGHTALIGN' ;
         .OR. ;
         PropertyName == 'SHOWNONE' ;
         .OR. ;
         PropertyName == 'ROOTBUTTON' ;
         .OR. ;
         PropertyName == 'UPDOWN' ;
         .OR. ;
         PropertyName == 'PASSWORD' ;
         .OR. ;
         PropertyName == 'AUTOSIZE' ;
         .OR. ;
         PropertyName == 'CELLNAVIGATION' ;
         .OR. ;
         PropertyName == 'MULTILINE' ;
         .OR. ;
         PropertyName == 'DRAGITEMS' ;
         .OR. ;
         PropertyName == 'VIRTUAL SIZED' ;
         .OR. ;
         PropertyName == 'ITEMIDS' ;
         .OR. ;
         PropertyName == 'MULTILINE' ;
         .OR. ;
         PropertyName == 'BUFFERED' ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'CHECKBOX' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'CHECKBUTTON' )

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { '.T.', '.F.' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'CASECONVERT'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'LOWER', 'NONE', 'UPPER' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'ALIGNMENT'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'LEFT', 'RIGHT', 'CENTER' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'PICTALIGNMENT'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'BOTTOM', 'LEFT', 'RIGHT', 'TOP' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'ROW' ;
         .OR. ;
         PropertyName == 'COL' ;
         .OR. ;
         PropertyName == 'WIDTH' ;
         .OR. ;
         PropertyName == 'LOCKCOLUMNS' ;
         .OR. ;
         PropertyName == 'DROPPEDWIDTH' ;
         .OR. ;
         PropertyName == 'VIRTUAL WIDTH' ;
         .OR. ;
         PropertyName == 'VIRTUAL HEIGHT' ;
         .OR. ;
         PropertyName == 'SPACING' ;
         .OR. ;
         PropertyName == 'HEIGHT' ;
         .OR. ;
         PropertyName == 'RANGEMAX' ;
         .OR. ;
         PropertyName == 'RANGEMIN' ;
         .OR. ;
         PropertyName == 'INCREMENT' ;
         .OR. ;
         PropertyName == 'FONTSIZE' ;
         .OR. ;
         PropertyName == 'PAGECOUNT' ;
         .OR. ;
         PropertyName == 'INTERVAL' ;
         .OR. ;
         PropertyName == 'MAXLENGTH' ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'BROWSE' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'TAB' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'TREE' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'RADIOGROUP' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'COMBOBOX' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'SLIDER' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'SPINNER' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'PROGRESSBAR' ) ;
         .OR. ;
         ( PropertyName == 'VALUE' .AND. SelectedControlType == 'LISTBOX' )

      Result := AllTrim ( PickNumericPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', aRow[ 2 ] ) )

   ELSEIF PropertyName == 'WINDOWTYPE'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'CHILD', 'MAIN', 'MODAL', 'SPLITCHILD', 'STANDARD', 'PANEL' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'HELPBUTTON'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'CHILD', 'MAIN', 'MODAL', 'SPLITCHILD', 'STANDARD' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'DATATYPE'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'CHARACTER', 'DATE', 'NUMERIC' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'ORIENTATION'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'HORIZONTAL', 'VERTICAL' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'TICKMARKS' .AND. AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlname + 'Orientation' ) ) ) == 'HORIZONTAL'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'BOTH', 'BOTTOM', 'NONE', 'TOP' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'TICKMARKS' .AND. AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlname + 'Orientation' ) ) ) == 'VERTICAL'

      Result := AllTrim ( PickPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', { 'BOTH', 'LEFT', 'NONE', 'RIGHT' }, aRow[ 2 ] ) )

   ELSEIF PropertyName == 'BACKCOLOR'

      Result := PickColorValue( aRow[ 1 ] )

   ELSEIF PropertyName == 'FONTCOLOR'

      Result := PickColorValue( aRow[ 1 ] )

   ELSEIF PropertyName == 'FORECOLOR'

      Result := PickColorValue( aRow[ 1 ] )

   ELSE

      Result := AllTrim ( PickCharacterPropertyValue ( aMsgs[ 130 ], aRow[ 1 ] + ':', aRow[ 2 ] ) )

   ENDIF

   IF _HMG_DialogCancelled == .F.

      DesignFormModified := .T.

      IF ! Empty ( SelectedControlName )

         Properties.Grid_1.Item ( i ) := { aRow[ 1 ], Result }

			*******************************************************
         IF SelectedControlType == 'BUTTON'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Caption' )
                  __mvPut( Result + 'Caption', __mvGet ( PreviousValue + 'Caption' ) )
                  __mvXRelease( PreviousValue + 'Caption' )

                  __mvPublic ( Result + 'Action' )
                  __mvPut( Result + 'Action', __mvGet ( PreviousValue + 'Action' ) )
                  __mvXRelease( PreviousValue + 'Action' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'Flat' )
                  __mvPut( Result + 'Flat', __mvGet ( PreviousValue + 'Flat' ) )
                  __mvXRelease( PreviousValue + 'Flat' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Transparent' )
                  __mvPut( Result + 'Transparent', __mvGet ( PreviousValue + 'Transparent' ) )
                  __mvXRelease( PreviousValue + 'Transparent' )

                  __mvPublic ( Result + 'Picture' )
                  __mvPut( Result + 'Picture', __mvGet ( PreviousValue + 'Picture' ) )
                  __mvXRelease( PreviousValue + 'Picture' )

                  __mvPublic ( Result + 'PictAlignment' )
                  __mvPut( Result + 'PictAlignment', __mvGet ( PreviousValue + 'PictAlignment' ) )
                  __mvXRelease( PreviousValue + 'PictAlignment' )

                  __mvPublic ( Result + 'MultiLine' )
                  __mvPut( Result + 'MultiLine', __mvGet ( PreviousValue + 'MultiLine' ) )
                  __mvXRelease( PreviousValue + 'MultiLine' )


                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'CAPTION'
               __mvPut( SelectedControlName + 'Caption', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FLAT'

               __mvPut( SelectedControlName + 'Flat', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )
               CaptionTemp := GetProperty ( DesignForm, SelectedControlName, 'Caption' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE BUTTON &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  CAPTION CaptionTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Flat' ) ) ) == '.T.'
                     FLAT .T.
                  ELSE
                     FLAT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'MultiLine' ) ) ) == '.T.'
                     MULTILINE .T.
                  ELSE
                     MULTILINE .F.
                  ENDIF

               END BUTTON

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               RedrawWindow ( DesignForm )
               DrawGrid()
               SelectControl ( SelectedControlName )
               DrawGrid()

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TRANSPARENT'
               __mvPut( SelectedControlName + 'Transparent', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PICTURE'
               __mvPut( SelectedControlName + 'Picture', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PICTALIGNMENT'
               __mvPut( SelectedControlName + 'PictAlignment', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MULTILINE'

               __mvPut( SelectedControlName + 'MultiLine', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )
               CaptionTemp := GetProperty ( DesignForm, SelectedControlName, 'Caption' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE BUTTON &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  CAPTION CaptionTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Flat' ) ) ) == '.T.'
                     FLAT .T.
                  ELSE
                     FLAT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'MultiLine' ) ) ) == '.T.'
                     MULTILINE .T.
                  ELSE
                     MULTILINE .F.
                  ENDIF

               END BUTTON

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               RedrawWindow ( DesignForm )
               DrawGrid()
               SelectControl ( SelectedControlName )
               DrawGrid()

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'CHECKBOX'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Caption' )
                  __mvPut( Result + 'Caption', __mvGet ( PreviousValue + 'Caption' ) )
                  __mvXRelease( PreviousValue + 'Caption' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'Field' )
                  __mvPut( Result + 'Field', __mvGet ( PreviousValue + 'Field' ) )
                  __mvXRelease( PreviousValue + 'Field' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Transparent' )
                  __mvPut( Result + 'Transparent', __mvGet ( PreviousValue + 'Transparent' ) )
                  __mvXRelease( PreviousValue + 'Transparent' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'CAPTION'
               __mvPut( SelectedControlName + 'Caption', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FIELD'
               __mvPut( SelectedControlName + 'Field', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TRANSPARENT'
               __mvPut( SelectedControlName + 'Transparent', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'LISTBOX'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Item', 1, Result )

                  __mvPublic ( Result + 'DragItems' )
                  __mvPut( Result + 'DragItems', __mvGet ( PreviousValue + 'DragItems' ) )
                  __mvXRelease( PreviousValue + 'DragItems' )

                  __mvPublic ( Result + 'Items' )
                  __mvPut( Result + 'Items', __mvGet ( PreviousValue + 'Items' ) )
                  __mvXRelease( PreviousValue + 'Items' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'OnDblClick' )
                  __mvPut( Result + 'OnDblClick', __mvGet ( PreviousValue + 'OnDblClick' ) )
                  __mvXRelease( PreviousValue + 'OnDblClick' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Sort' )
                  __mvPut( Result + 'Sort', __mvGet ( PreviousValue + 'Sort' ) )
                  __mvXRelease( PreviousValue + 'Sort' )

                  __mvPublic ( Result + 'MultiSelect' )
                  __mvPut( Result + 'MultiSelect', __mvGet ( PreviousValue + 'MultiSelect' ) )
                  __mvXRelease( PreviousValue + 'MultiSelect' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ITEMS'
               __mvPut( SelectedControlName + 'Items', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SORT'
               __mvPut( SelectedControlName + 'Sort', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MULTISELECT'
               __mvPut( SelectedControlName + 'MultiSelect', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DRAGITEMS'
               __mvPut( SelectedControlName + 'DragItems', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'COMBOBOX'
			*******************************************************

            IF PropertyName == 'ROW'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Item', 1, Result )
                  SetProperty ( DesignForm, SelectedControlName, 'Value', 1 )

                  __mvPublic ( Result + 'Items' )
                  __mvPut( Result + 'Items', __mvGet ( PreviousValue + 'Items' ) )
                  __mvXRelease( PreviousValue + 'Items' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Sort' )
                  __mvPut( Result + 'Sort', __mvGet ( PreviousValue + 'Sort' ) )
                  __mvXRelease( PreviousValue + 'Sort' )

                  __mvPublic ( Result + 'OnEnter' )
                  __mvPut( Result + 'OnEnter', __mvGet ( PreviousValue + 'OnEnter' ) )
                  __mvXRelease( PreviousValue + 'OnEnter' )

                  __mvPublic ( Result + 'OnDisplayChange' )
                  __mvPut( Result + 'OnDisplayChange', __mvGet ( PreviousValue + 'OnDisplayChange' ) )
                  __mvXRelease( PreviousValue + 'OnDisplayChange' )

                  __mvPublic ( Result + 'DisplayEdit' )
                  __mvPut( Result + 'DisplayEdit', __mvGet ( PreviousValue + 'DisplayEdit' ) )
                  __mvXRelease( PreviousValue + 'DisplayEdit' )

                  __mvPublic ( Result + 'ItemSource' )
                  __mvPut( Result + 'ItemSource', __mvGet ( PreviousValue + 'ItemSource' ) )
                  __mvXRelease( PreviousValue + 'ItemSource' )

                  __mvPublic ( Result + 'ValueSource' )
                  __mvPut( Result + 'ValueSource', __mvGet ( PreviousValue + 'ValueSource' ) )
                  __mvXRelease( PreviousValue + 'ValueSource' )

                  __mvPublic ( Result + 'DroppedWidth' )
                  __mvPut( Result + 'DroppedWidth', __mvGet ( PreviousValue + 'DroppedWidth' ) )
                  __mvXRelease( PreviousValue + 'DroppedWidth' )

                  __mvPublic ( Result + 'Image' )
                  __mvPut( Result + 'Image', __mvGet ( PreviousValue + 'Image' ) )
                  __mvXRelease( PreviousValue + 'Image' )

                  __mvPublic ( Result + 'OnCloseUp' )
                  __mvPut( Result + 'OnCloseUp', __mvGet ( PreviousValue + 'OnCloseUp' ) )
                  __mvXRelease( PreviousValue + 'OnCloseUp' )

                  __mvPublic ( Result + 'OnDropDown' )
                  __mvPut( Result + 'OnDropDown', __mvGet ( PreviousValue + 'OnDropDown' ) )
                  __mvXRelease( PreviousValue + 'OnDropDown' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ITEMS'
               __mvPut( SelectedControlName + 'Items', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DROPPEDWIDTH'
               __mvPut( SelectedControlName + 'DroppedWidth', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'IMAGE'
               __mvPut( SelectedControlName + 'Image', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SORT'
               __mvPut( SelectedControlName + 'Sort', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DISPLAYEDIT'
               __mvPut( SelectedControlName + 'DisplayEdit', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUESOURCE'
               __mvPut( SelectedControlName + 'ValueSource', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ITEMSOURCE'
               __mvPut( SelectedControlName + 'ItemSource', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'CHECKBUTTON'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Caption' )
                  __mvPut( Result + 'Caption', __mvGet ( PreviousValue + 'Caption' ) )
                  __mvXRelease( PreviousValue + 'Caption' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Picture' )
                  __mvPut( Result + 'Picture', __mvGet ( PreviousValue + 'Picture' ) )
                  __mvXRelease( PreviousValue + 'Picture' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'CAPTION'
               __mvPut( SelectedControlName + 'Caption', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )

               IF .NOT. Empty ( Result )
                  __mvPut( SelectedControlName + 'Picture', '' )
                  Properties.Grid_1.Item( 12 ) := { 'Picture', '' }
               ENDIF

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PICTURE'
               __mvPut( SelectedControlName + 'Picture', Result )

               IF .NOT. Empty ( Result )
                  __mvPut( SelectedControlName + 'Caption', '' )
                  SetProperty ( DesignForm, SelectedControlName, 'Caption', '' )
                  Properties.Grid_1.Item( 1 ) := { 'Caption', '' }
               ENDIF

               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'GRID'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Item', 1, { Result } )

                  __mvPublic ( Result + 'Items' )
                  __mvPut( Result + 'Items', __mvGet ( PreviousValue + 'Items' ) )
                  __mvXRelease( PreviousValue + 'Items' )

                  __mvPublic ( Result + 'Headers' )
                  __mvPut( Result + 'Headers', __mvGet ( PreviousValue + 'Headers' ) )
                  __mvXRelease( PreviousValue + 'Headers' )

                  __mvPublic ( Result + 'Widths' )
                  __mvPut( Result + 'Widths', __mvGet ( PreviousValue + 'Widths' ) )
                  __mvXRelease( PreviousValue + 'Widths' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'OnDblClick' )
                  __mvPut( Result + 'OnDblClick', __mvGet ( PreviousValue + 'OnDblClick' ) )
                  __mvXRelease( PreviousValue + 'OnDblClick' )

                  __mvPublic ( Result + 'OnHeadClick' )
                  __mvPut( Result + 'OnHeadClick', __mvGet ( PreviousValue + 'OnHeadClick' ) )
                  __mvXRelease( PreviousValue + 'OnHeadClick' )

                  __mvPublic ( Result + 'OnQueryData' )
                  __mvPut( Result + 'OnQueryData', __mvGet ( PreviousValue + 'OnQueryData' ) )
                  __mvXRelease( PreviousValue + 'OnQueryData' )

                  __mvPublic ( Result + 'MultiSelect' )
                  __mvPut( Result + 'MultiSelect', __mvGet ( PreviousValue + 'MultiSelect' ) )
                  __mvXRelease( PreviousValue + 'MultiSelect' )

                  __mvPublic ( Result + 'AllowEdit' )
                  __mvPut( Result + 'AllowEdit', __mvGet ( PreviousValue + 'AllowEdit' ) )
                  __mvXRelease( PreviousValue + 'AllowEdit' )

                  __mvPublic ( Result + 'Virtual' )
                  __mvPut( Result + 'Virtual', __mvGet ( PreviousValue + 'Virtual' ) )
                  __mvXRelease( PreviousValue + 'Virtual' )

                  __mvPublic ( Result + 'Lines' )
                  __mvPut( Result + 'Lines', __mvGet ( PreviousValue + 'Lines' ) )
                  __mvXRelease( PreviousValue + 'Lines' )

                  __mvPublic ( Result + 'Image' )
                  __mvPut( Result + 'Image', __mvGet ( PreviousValue + 'Image' ) )
                  __mvXRelease( PreviousValue + 'Image' )

                  __mvPublic ( Result + 'Justify' )
                  __mvPut( Result + 'Justify', __mvGet ( PreviousValue + 'Justify' ) )
                  __mvXRelease( PreviousValue + 'Justify' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'ItemCount' )
                  __mvPut( Result + 'ItemCount', __mvGet ( PreviousValue + 'ItemCount' ) )
                  __mvXRelease( PreviousValue + 'ItemCount' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  //

                  __mvPublic ( Result + 'DynamicBackColor' )
                  __mvPut( Result + 'DynamicBackColor', __mvGet ( PreviousValue + 'DynamicBackColor' ) )
                  __mvXRelease( PreviousValue + 'DynamicBackColor' )

                  __mvPublic ( Result + 'DynamicForeColor' )
                  __mvPut( Result + 'DynamicForeColor', __mvGet ( PreviousValue + 'DynamicForeColor' ) )
                  __mvXRelease( PreviousValue + 'DynamicForeColor' )

                  __mvPublic ( Result + 'ColumnWhen' )
                  __mvPut( Result + 'ColumnWhen', __mvGet ( PreviousValue + 'ColumnWhen' ) )
                  __mvXRelease( PreviousValue + 'ColumnWhen' )

                  __mvPublic ( Result + 'ColumnValid' )
                  __mvPut( Result + 'ColumnValid', __mvGet ( PreviousValue + 'ColumnValid' ) )
                  __mvXRelease( PreviousValue + 'ColumnValid' )

                  __mvPublic ( Result + 'ColumnControls' )
                  __mvPut( Result + 'ColumnControls', __mvGet ( PreviousValue + 'ColumnControls' ) )
                  __mvXRelease( PreviousValue + 'ColumnControls' )

                  __mvPublic ( Result + 'ShowHeaders' )
                  __mvPut( Result + 'ShowHeaders', __mvGet ( PreviousValue + 'ShowHeaders' ) )
                  __mvXRelease( PreviousValue + 'ShowHeaders' )

                  __mvPublic ( Result + 'HeaderImages' )
                  __mvPut( Result + 'HeaderImages', __mvGet ( PreviousValue + 'HeaderImages' ) )
                  __mvXRelease( PreviousValue + 'HeaderImages' )

                  __mvPublic ( Result + 'CellNavigation' )
                  __mvPut( Result + 'CellNavigation', __mvGet ( PreviousValue + 'CellNavigation' ) )
                  __mvXRelease( PreviousValue + 'CellNavigation' )




                  __mvPublic ( Result + 'RowSource' )
                  __mvPut( Result + 'RowSource', __mvGet ( PreviousValue + 'RowSource' ) )
                  __mvXRelease( PreviousValue + 'RowSource' )

                  __mvPublic ( Result + 'ColumnFields' )
                  __mvPut( Result + 'ColumnFields', __mvGet ( PreviousValue + 'ColumnFields' ) )
                  __mvXRelease( PreviousValue + 'ColumnFields' )

                  __mvPublic ( Result + 'AllowAppend' )
                  __mvPut( Result + 'AllowAppend', __mvGet ( PreviousValue + 'AllowAppend' ) )
                  __mvXRelease( PreviousValue + 'AllowAppend' )

                  __mvPublic ( Result + 'AllowDelete' )
                  __mvPut( Result + 'AllowDelete', __mvGet ( PreviousValue + 'AllowDelete' ) )
                  __mvXRelease( PreviousValue + 'AllowDelete' )

                  __mvPublic ( Result + 'Buffered' )
                  __mvPut( Result + 'Buffered', __mvGet ( PreviousValue + 'Buffered' ) )
                  __mvXRelease( PreviousValue + 'Buffered' )

                  __mvPublic ( Result + 'DynamicDisplay' )
                  __mvPut( Result + 'DynamicDisplay', __mvGet ( PreviousValue + 'DynamicDisplay' ) )
                  __mvXRelease( PreviousValue + 'DynamicDisplay' )


                  __mvPublic ( Result + 'OnSave' )
                  __mvPut( Result + 'OnSave', __mvGet ( PreviousValue + 'OnSave' ) )
                  __mvXRelease( PreviousValue + 'OnSave' )


                  __mvPublic ( Result + 'LockColumns' )
                  __mvPut( Result + 'LockColumns', __mvGet ( PreviousValue + 'LockColumns' ) )
                  __mvXRelease( PreviousValue + 'LockColumns' )

                  //

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ITEMS'
               __mvPut( SelectedControlName + 'Items', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ROWSOURCE'
               __mvPut( SelectedControlName + 'RowSource', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'COLUMNFIELDS'
               __mvPut( SelectedControlName + 'ColumnFields', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ALLOWAPPEND'
               __mvPut( SelectedControlName + 'AllowAppend', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ALLOWDELETE'
               __mvPut( SelectedControlName + 'AllowDelete', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BUFFERED'
               __mvPut( SelectedControlName + 'Buffered', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DYNAMICDISPLAY'
               __mvPut( SelectedControlName + 'DynamicDisplay', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'CELLNAVIGATION'
               __mvPut( SelectedControlName + 'CellNavigation', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTHS'
               __mvPut( SelectedControlName + 'Widths', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEADERS'
               __mvPut( SelectedControlName + 'Headers', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MULTISELECT'
               __mvPut( SelectedControlName + 'MultiSelect', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ALLOWEDIT'
               __mvPut( SelectedControlName + 'AllowEdit', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VIRTUAL'
               __mvPut( SelectedControlName + 'Virtual', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'LINES'
               __mvPut( SelectedControlName + 'Lines', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE GRID &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  HEADERS { '', '' }
                  WIDTHS { 60, 60 }
                  ITEMS { { SelectedControlName, '' } }

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'ShowHeaders' ) ) ) == '.T.'
                     SHOWHEADERS .T.
                  ELSE
                     SHOWHEADERS .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Lines' ) ) ) == '.T.'
                     NOLINES .F.
                  ELSE
                     NOLINES .T.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END GRID

               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF

               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               IF ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'JUSTIFY'
               __mvPut( SelectedControlName + 'Justify', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'IMAGE'
               __mvPut( SelectedControlName + 'Image', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ITEMCOUNT'
               __mvPut( SelectedControlName + 'ItemCount', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', { 255, 255, 255 } )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', { 0, 0, 0 } )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'LOCKCOLUMNS'
               __mvPut( SelectedControlName + 'LOCKCOLUMNS', Result )
               SelectControl ( SelectedControlName )
            ELSEIF PropertyName == 'DYNAMICBACKCOLOR'
               __mvPut( SelectedControlName + 'DYNAMICBACKCOLOR', Result )
               SelectControl ( SelectedControlName )
            ELSEIF PropertyName == 'DYNAMICFORECOLOR'
               __mvPut( SelectedControlName + 'DYNAMICFORECOLOR', Result )
               SelectControl ( SelectedControlName )
            ELSEIF PropertyName == 'COLUMNWHEN'
               __mvPut( SelectedControlName + 'COLUMNWHEN', Result )
               SelectControl ( SelectedControlName )
            ELSEIF PropertyName == 'COLUMNVALID'
               __mvPut( SelectedControlName + 'COLUMNVALID', Result )
               SelectControl ( SelectedControlName )
            ELSEIF PropertyName == 'COLUMNCONTROLS'
               __mvPut( SelectedControlName + 'COLUMNCONTROLS', Result )
               SelectControl ( SelectedControlName )
            ELSEIF PropertyName == 'SHOWHEADERS'

               __mvPut( SelectedControlName + 'SHOWHEADERS', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE GRID &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  HEADERS { '', '' }
                  WIDTHS { 60, 60 }
                  ITEMS { { SelectedControlName, '' } }

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'ShowHeaders' ) ) ) == '.T.'
                     SHOWHEADERS .T.
                  ELSE
                     SHOWHEADERS .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Lines' ) ) ) == '.T.'
                     NOLINES .F.
                  ELSE
                     NOLINES .T.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END GRID

               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF

               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               IF ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEADERIMAGES'
               __mvPut( SelectedControlName + 'HEADERIMAGES', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'SLIDER'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'RangeMin' )
                  __mvPut( Result + 'RangeMin', __mvGet ( PreviousValue + 'RangeMin' ) )
                  __mvXRelease( PreviousValue + 'RangeMin' )

                  __mvPublic ( Result + 'RangeMax' )
                  __mvPut( Result + 'RangeMax', __mvGet ( PreviousValue + 'RangeMax' ) )
                  __mvXRelease( PreviousValue + 'RangeMax' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'TickMarks' )
                  __mvPut( Result + 'TickMarks', __mvGet ( PreviousValue + 'TickMarks' ) )
                  __mvXRelease( PreviousValue + 'TickMarks' )

                  __mvPublic ( Result + 'Orientation' )
                  __mvPut( Result + 'Orientation', __mvGet ( PreviousValue + 'Orientation' ) )
                  __mvXRelease( PreviousValue + 'Orientation' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RANGEMAX'
               __mvPut( SelectedControlName + 'RangeMax', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RANGEMIN'
               __mvPut( SelectedControlName + 'RangeMin', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ORIENTATION'

               IF ( HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL' ;
                     .AND. ;
                     HMG_UPPER ( AllTrim ( Result ) ) == 'HORIZONTAL' )

                  HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
                  WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

                  IF HMG_UPPER ( AllTrim ( __mvGet ( SelectedControlName + 'TickMarks' ) ) ) == 'RIGHT'
                     __mvPut ( SelectedControlName + 'TickMarks', 'TOP' )
                  ENDIF

                  IF HMG_UPPER ( AllTrim ( __mvGet ( SelectedControlName + 'TickMarks' ) ) ) == 'LEFT'
                     __mvPut ( SelectedControlName + 'TickMarks', 'BOTTOM' )
                  ENDIF

               ELSEIF ( HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'Orientation' ) ) ) == 'HORIZONTAL' ;
                     .AND. ;
                     HMG_UPPER ( AllTrim ( Result ) ) == 'VERTICAL' )

                  HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
                  WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

                  IF HMG_UPPER ( AllTrim ( __mvGet ( SelectedControlName + 'TickMarks' ) ) ) == 'BOTTOM'
                     __mvPut ( SelectedControlName + 'TickMarks', 'RIGHT' )
                  ENDIF

                  IF HMG_UPPER ( AllTrim ( __mvGet ( SelectedControlName + 'TickMarks' ) ) ) == 'TOP'
                     __mvPut ( SelectedControlName + 'TickMarks', 'LEFT' )
                  ENDIF

               ELSE

                  WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
                  HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               ENDIF

               __mvPut( SelectedControlName + 'Orientation', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )

               TabName := _HMG_aControlFontHandle[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               if ! Empty ( TabName )
                  fmb := _HMG_FrameLevel
                  _HMG_FrameLevel := 1
                  _HMG_ActiveTabName := TabName
                  _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
               ENDIF

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE SLIDER &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON CHANGE SelectControl ( This.Name )
                  RANGEMIN 1
                  RANGEMAX 10

                  IF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL'
                     VERTICAL .T.
                  ENDIF

                  IF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'BOTH'
                     BOTH .T.
                  ELSEIF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'LEFT'
                     LEFT .T.
                  ELSEIF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'TOP'
                     TOP .T.
                  ELSEIF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'NONE'
                     NOTICKS .T.
                  ENDIF

               END SLIDER

               if ! Empty ( TabName )
                  _HMG_FrameLevel := fmb
               ENDIF

               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

               ENDIF

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )
               DrawGrid()

               SetFocus ( GetControlhandle ( SelectedControlName, DesignForm ) )

            ELSEIF PropertyName == 'TICKMARKS'

               __mvPut( SelectedControlName + 'TickMarks', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlFontHandle[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               if ! Empty ( TabName )
                  fmb := _HMG_FrameLevel
                  _HMG_FrameLevel := 1
                  _HMG_ActiveTabName := TabName
                  _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
               ENDIF

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE SLIDER &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON CHANGE SelectControl ( This.Name )
                  RANGEMIN 1
                  RANGEMAX 10

                  IF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL'
                     VERTICAL .T.
                  ENDIF

                  IF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'BOTH'
                     BOTH .T.
                  ELSEIF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'LEFT'
                     LEFT .T.
                  ELSEIF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'TOP'
                     TOP .T.
                  ELSEIF HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'TickMarks' ) ) ) == 'NONE'
                     NOTICKS .T.
                  ENDIF

               END SLIDER

               if ! Empty ( TabName )
                  _HMG_FrameLevel := fmb
               ENDIF

               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

               ENDIF

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )
               DrawGrid()

               SetFocus ( GetControlhandle ( SelectedControlName, DesignForm ) )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL

                  RedrawWindow ( _HMG_aControlHandles[ z ] )
                  setFocus( _HMG_aControlHandles[ z ] )

               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'SPINNER'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'RangeMin' )
                  __mvPut( Result + 'RangeMin', __mvGet ( PreviousValue + 'RangeMin' ) )
                  __mvXRelease( PreviousValue + 'RangeMin' )

                  __mvPublic ( Result + 'RangeMax' )
                  __mvPut( Result + 'RangeMax', __mvGet ( PreviousValue + 'RangeMax' ) )
                  __mvXRelease( PreviousValue + 'RangeMax' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'Wrap' )
                  __mvPut( Result + 'Wrap', __mvGet ( PreviousValue + 'Wrap' ) )
                  __mvXRelease( PreviousValue + 'Wrap' )

                  __mvPublic ( Result + 'ReadOnly' )
                  __mvPut( Result + 'ReadOnly', __mvGet ( PreviousValue + 'ReadOnly' ) )
                  __mvXRelease( PreviousValue + 'ReadOnly' )

                  __mvPublic ( Result + 'Increment' )
                  __mvPut( Result + 'Increment', __mvGet ( PreviousValue + 'Increment' ) )
                  __mvXRelease( PreviousValue + 'Increment' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RANGEMAX'
               __mvPut( SelectedControlName + 'RangeMax', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RANGEMIN'
               __mvPut( SelectedControlName + 'RangeMin', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WRAP'
               __mvPut( SelectedControlName + 'Wrap', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'READONLY'
               __mvPut( SelectedControlName + 'ReadOnly', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'INCREMENT'
               __mvPut( SelectedControlName + 'Increment', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'IMAGE'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Picture' )
                  __mvPut( Result + 'Picture', __mvGet ( PreviousValue + 'Picture' ) )
                  __mvXRelease( PreviousValue + 'Picture' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Stretch' )
                  __mvPut( Result + 'Stretch', __mvGet ( PreviousValue + 'Stretch' ) )
                  __mvXRelease( PreviousValue + 'Stretch' )

                  __mvPublic ( Result + 'Action' )
                  __mvPut( Result + 'Action', __mvGet ( PreviousValue + 'Action' ) )
                  __mvXRelease( PreviousValue + 'Action' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PICTURE'
               __mvPut( SelectedControlName + 'Picture', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'STRETCH'
               __mvPut( SelectedControlName + 'Stretch', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'TREE'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Item', 1, Result )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'OnDblClick' )
                  __mvPut( Result + 'OnDblClick', __mvGet ( PreviousValue + 'OnDblClick' ) )
                  __mvXRelease( PreviousValue + 'OnDblClick' )

                  __mvPublic ( Result + 'NodeImages' )
                  __mvPut( Result + 'NodeImages', __mvGet ( PreviousValue + 'NodeImages' ) )
                  __mvXRelease( PreviousValue + 'NodeImages' )

                  __mvPublic ( Result + 'ItemImages' )
                  __mvPut( Result + 'ItemImages', __mvGet ( PreviousValue + 'ItemImages' ) )
                  __mvXRelease( PreviousValue + 'ItemImages' )

                  __mvPublic ( Result + 'RootButton' )
                  __mvPut( Result + 'RootButton', __mvGet ( PreviousValue + 'RootButton' ) )
                  __mvXRelease( PreviousValue + 'RootButton' )

                  __mvPublic ( Result + 'ItemIds' )
                  __mvPut( Result + 'ItemIds', __mvGet ( PreviousValue + 'ItemIds' ) )
                  __mvXRelease( PreviousValue + 'ItemIds' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NODEIMAGES'
               __mvPut( SelectedControlName + 'NodeImages', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ITEMIMAGES'
               __mvPut( SelectedControlName + 'ItemImages', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ROOTBUTTON'
               __mvPut( SelectedControlName + 'RootButton', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ITEMIDS'
               __mvPut( SelectedControlName + 'ItemIds', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'DATEPICKER'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'OnEnter' )
                  __mvPut( Result + 'OnEnter', __mvGet ( PreviousValue + 'OnEnter' ) )
                  __mvXRelease( PreviousValue + 'OnEnter' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'ShowNone' )
                  __mvPut( Result + 'ShowNone', __mvGet ( PreviousValue + 'ShowNone' ) )
                  __mvXRelease( PreviousValue + 'ShowNone' )

                  __mvPublic ( Result + 'UpDown' )
                  __mvPut( Result + 'UpDown', __mvGet ( PreviousValue + 'UpDown' ) )
                  __mvXRelease( PreviousValue + 'UpDown' )

                  __mvPublic ( Result + 'RightAlign' )
                  __mvPut( Result + 'RightAlign', __mvGet ( PreviousValue + 'RightAlign' ) )
                  __mvXRelease( PreviousValue + 'RightAlign' )

                  __mvPublic ( Result + 'Field' )
                  __mvPut( Result + 'Field', __mvGet ( PreviousValue + 'Field' ) )
                  __mvXRelease( PreviousValue + 'Field' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SHOWNONE'
               __mvPut( SelectedControlName + 'ShowNone', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE DATEPICKER &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'ShowNone' ) ) ) == '.T.'
                     SHOWNONE .T.
                  ELSE
                     SHOWNONE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'UpDown' ) ) ) == '.T.'
                     UPDOWN .T.
                  ELSE
                     UPDOWN .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'RightAlign' ) ) ) == '.T.'
                     RIGHTALIGN .T.
                  ELSE
                     RIGHTALIGN .F.
                  ENDIF

               END DATEPICKER

               if ! Empty ( TabName )
                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )
                  DrawGrid()
                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName
               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'UPDOWN'
               __mvPut( SelectedControlName + 'UpDown', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE DATEPICKER &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'ShowNone' ) ) ) == '.T.'
                     SHOWNONE .T.
                  ELSE
                     SHOWNONE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'UpDown' ) ) ) == '.T.'
                     UPDOWN .T.
                  ELSE
                     UPDOWN .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'RightAlign' ) ) ) == '.T.'
                     RIGHTALIGN .T.
                  ELSE
                     RIGHTALIGN .F.
                  ENDIF

               END DATEPICKER

               if ! Empty ( TabName )
                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )
                  DrawGrid()
                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName
               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RIGHTALIGN'
               __mvPut( SelectedControlName + 'RightAlign', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE DATEPICKER &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'ShowNone' ) ) ) == '.T.'
                     SHOWNONE .T.
                  ELSE
                     SHOWNONE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'UpDown' ) ) ) == '.T.'
                     UPDOWN .T.
                  ELSE
                     UPDOWN .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'RightAlign' ) ) ) == '.T.'
                     RIGHTALIGN .T.
                  ELSE
                     RIGHTALIGN .F.
                  ENDIF

               END DATEPICKER

               if ! Empty ( TabName )
                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )
                  DrawGrid()
                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName
               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FIELD'
               __mvPut( SelectedControlName + 'Field', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'TEXTBOX'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )


            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'InputMask' )
                  __mvPut( Result + 'InputMask', __mvGet ( PreviousValue + 'InputMask' ) )
                  __mvXRelease( PreviousValue + 'InputMask' )

                  __mvPublic ( Result + 'Format' )
                  __mvPut( Result + 'Format', __mvGet ( PreviousValue + 'Format' ) )
                  __mvXRelease( PreviousValue + 'Format' )

                  __mvPublic ( Result + 'DataType' )
                  __mvPut( Result + 'DataType', __mvGet ( PreviousValue + 'DataType' ) )
                  __mvXRelease( PreviousValue + 'DataType' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'OnEnter' )
                  __mvPut( Result + 'OnEnter', __mvGet ( PreviousValue + 'OnEnter' ) )
                  __mvXRelease( PreviousValue + 'OnEnter' )

                  __mvPublic ( Result + 'Field' )
                  __mvPut( Result + 'Field', __mvGet ( PreviousValue + 'Field' ) )
                  __mvXRelease( PreviousValue + 'Field' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'ReadOnly' )
                  __mvPut( Result + 'ReadOnly', __mvGet ( PreviousValue + 'ReadOnly' ) )
                  __mvXRelease( PreviousValue + 'ReadOnly' )

                  __mvPublic ( Result + 'RightAlign' )
                  __mvPut( Result + 'RightAlign', __mvGet ( PreviousValue + 'RightAlign' ) )
                  __mvXRelease( PreviousValue + 'RightAlign' )

                  __mvPublic ( Result + 'MaxLength' )
                  __mvPut( Result + 'MaxLength', __mvGet ( PreviousValue + 'MaxLength' ) )
                  __mvXRelease( PreviousValue + 'MaxLength' )

                  __mvPublic ( Result + 'Password' )
                  __mvPut( Result + 'Password', __mvGet ( PreviousValue + 'Password' ) )
                  __mvXRelease( PreviousValue + 'Password' )

                  __mvPublic ( Result + 'CaseConvert' )
                  __mvPut( Result + 'CaseConvert', __mvGet ( PreviousValue + 'CaseConvert' ) )
                  __mvXRelease( PreviousValue + 'CaseConvert' )
/*
      __MVPUBLIC ( Result + 'DisabledBackColor' )
      __MVPUT( Result + 'DisabledBackColor' ,  __MVGET ( PreviousValue + 'DisabledBackColor' ) )
      __MVXRELEASE( PreviousValue + 'DisabledBackColor' )

      __MVPUBLIC ( Result + 'DisabledFontColor' )
      __MVPUT( Result + 'DisabledFontColor' ,  __MVGET ( PreviousValue + 'DisabledFontColor' ) )
      __MVXRELEASE( PreviousValue + 'DisabledFontColor' )
*/
                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'INPUTMASK'
               __mvPut( SelectedControlName + 'InputMask', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FORMAT'
               __mvPut( SelectedControlName + 'Format', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DATATYPE'
               __mvPut( SelectedControlName + 'DataType', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FIELD'
               __mvPut( SelectedControlName + 'Field', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'READONLY'
               __mvPut( SelectedControlName + 'ReadOnly', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RIGHTALIGN'
               __mvPut( SelectedControlName + 'RightAlign', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE TEXTBOX &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  VALUE SelectedControlName

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'RightAlign' ) ) ) == '.T.'
                     RIGHTALIGN .T.
                  ENDIF

               END TEXTBOX

               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )
                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )
                  DrawGrid()
                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName
               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MAXLENGTH'
               __mvPut( SelectedControlName + 'MaxLength', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PASSWORD'
               __mvPut( SelectedControlName + 'Password', Result )
               SelectControl ( SelectedControlName )
/*
     ElseIf PropertyName == 'DISABLEDFONTCOLOR'
      __MVPUT( SelectedControlName + 'DisabledFontColor' , Result )
      SelectControl (SelectedControlName)

     ElseIf PropertyName == 'DISABLEDBACKCOLOR'
      __MVPUT( SelectedControlName + 'DisabledBackColor' , Result )
      SelectControl (SelectedControlName)
*/
            ELSEIF PropertyName == 'CASECONVERT'
               __mvPut( SelectedControlName + 'CaseConvert', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'EDITBOX'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  __mvPublic ( Result + 'ReadOnly' )
                  __mvPut( Result + 'ReadOnly', __mvGet ( PreviousValue + 'ReadOnly' ) )
                  __mvXRelease( PreviousValue + 'ReadOnly' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Field' )
                  __mvPut( Result + 'Field', __mvGet ( PreviousValue + 'Field' ) )
                  __mvXRelease( PreviousValue + 'Field' )

                  __mvPublic ( Result + 'MaxLength' )
                  __mvPut( Result + 'MaxLength', __mvGet ( PreviousValue + 'MaxLength' ) )
                  __mvXRelease( PreviousValue + 'MaxLength' )

                  __mvPublic ( Result + 'vScrollBar' )
                  __mvPut( Result + 'vScrollBar', __mvGet ( PreviousValue + 'vScrollBar' ) )
                  __mvXRelease( PreviousValue + 'vScrollBar' )

                  __mvPublic ( Result + 'hScrollBar' )
                  __mvPut( Result + 'hScrollBar', __mvGet ( PreviousValue + 'hScrollBar' ) )
                  __mvXRelease( PreviousValue + 'hScrollBar' )
/*
      __MVPUBLIC ( Result + 'DisabledBackColor' )
      __MVPUT( Result + 'DisabledBackColor' ,  __MVGET ( PreviousValue + 'DisabledBackColor' ) )
      __MVXRELEASE( PreviousValue + 'DisabledBackColor' )

      __MVPUBLIC ( Result + 'DisabledFontColor' )
      __MVPUT( Result + 'DisabledFontColor' ,  __MVGET ( PreviousValue + 'DisabledFontColor' ) )
      __MVXRELEASE( PreviousValue + 'DisabledFontColor' )
*/
                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'READONLY'
               __mvPut( SelectedControlName + 'ReadOnly', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MAXLENGTH'
               __mvPut( SelectedControlName + 'MaxLength', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FIELD'
               __mvPut( SelectedControlName + 'Field', Result )
               SelectControl ( SelectedControlName )
/*
    ElseIf PropertyName == 'DISABLEDBACKCOLOR'
     __MVPUT( SelectedControlName + 'DisabledBackColor' , Result )
     SelectControl (SelectedControlName)

    ElseIf PropertyName == 'DISABLEDFONTCOLOR'
     __MVPUT( SelectedControlName + 'DisabledFontColor' , Result )
     SelectControl (SelectedControlName)
*/
            ELSEIF PropertyName == 'VSCROLLBAR'

               __mvPut( SelectedControlName + 'vScrollBar', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE EDITBOX &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  VALUE SelectedControlName

                  ON GOTFOCUS SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  WIDTH WidthTemp
                  HEIGHT HeightTemp

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'hScrollBar' ) ) ) == '.T.'
                     HSCROLLBAR .T.
                  ELSE
                     HSCROLLBAR .F.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'vScrollBar' ) ) ) == '.T.'
                     VSCROLLBAR .T.
                  ELSE
                     VSCROLLBAR .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END EDITBOX

               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  TabRow := GetProperty ( DesignForm, TabName, 'Row' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  // MiniGUI Bug!!!!
                  SetProperty ( DesignForm, TabName, 'Row', TabRow )

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               Redrawwindow( DesignFormHandle )
               DrawGrid()
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HSCROLLBAR'

               __mvPut( SelectedControlName + 'hScrollBar', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE EDITBOX &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  VALUE SelectedControlName

                  ON GOTFOCUS SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  WIDTH WidthTemp
                  HEIGHT HeightTemp

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'hScrollBar' ) ) ) == '.T.'
                     HSCROLLBAR .T.
                  ELSE
                     HSCROLLBAR .F.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'vScrollBar' ) ) ) == '.T.'
                     VSCROLLBAR .T.
                  ELSE
                     VSCROLLBAR .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END EDITBOX

               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  TabRow := GetProperty ( DesignForm, TabName, 'Row' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  // MiniGUI Bug!!!!
                  SetProperty ( DesignForm, TabName, 'Row', TabRow )

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               Redrawwindow( DesignFormHandle )
               DrawGrid()
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'LABEL'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Transparent' )
                  __mvPut( Result + 'Transparent', __mvGet ( PreviousValue + 'Transparent' ) )
                  __mvXRelease( PreviousValue + 'Transparent' )

                  __mvPublic ( Result + 'Action' )
                  __mvPut( Result + 'Action', __mvGet ( PreviousValue + 'Action' ) )
                  __mvXRelease( PreviousValue + 'Action' )

                  __mvPublic ( Result + 'AutoSize' )
                  __mvPut( Result + 'AutoSize', __mvGet ( PreviousValue + 'AutoSize' ) )
                  __mvXRelease( PreviousValue + 'AutoSize' )

                  __mvPublic ( Result + 'Alignment' )
                  __mvPut( Result + 'Alignment', __mvGet ( PreviousValue + 'Alignment' ) )
                  __mvXRelease( PreviousValue + 'Alignment' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TRANSPARENT'
               __mvPut( SelectedControlName + 'Transparent', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'AUTOSIZE'
               __mvPut( SelectedControlName + 'AutoSize', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ALIGNMENT'
               __mvPut( SelectedControlName + 'Alignment', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE LABEL &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ACTION SelectControl( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  VALUE __mvGet ( SelectedControlName + 'Value' )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Alignment' ) ) ) == 'CENTER'
                     CENTERALIGN .T.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Alignment' ) ) ) == 'RIGHT'
                     RIGHTALIGN .T.
                  ENDIF

                  IF ( ! Empty ( TabName ) ) .AND. IsAppThemed()
                     TRANSPARENT .T.
                  ENDIF

               END LABEL

               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )
                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )
                  DrawGrid()
                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName
               ENDIF

               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'BROWSE'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Header', 1, Result )

                  __mvPublic ( Result + 'WorkArea' )
                  __mvPut( Result + 'WorkArea', __mvGet ( PreviousValue + 'WorkArea' ) )
                  __mvXRelease( PreviousValue + 'WorkArea' )

                  __mvPublic ( Result + 'Fields' )
                  __mvPut( Result + 'Fields', __mvGet ( PreviousValue + 'Fields' ) )
                  __mvXRelease( PreviousValue + 'Fields' )

                  __mvPublic ( Result + 'Headers' )
                  __mvPut( Result + 'Headers', __mvGet ( PreviousValue + 'Headers' ) )
                  __mvXRelease( PreviousValue + 'Headers' )

                  __mvPublic ( Result + 'Widths' )
                  __mvPut( Result + 'Widths', __mvGet ( PreviousValue + 'Widths' ) )
                  __mvXRelease( PreviousValue + 'Widths' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'OnDblClick' )
                  __mvPut( Result + 'OnDblClick', __mvGet ( PreviousValue + 'OnDblClick' ) )
                  __mvXRelease( PreviousValue + 'OnDblClick' )

                  __mvPublic ( Result + 'AllowEdit' )
                  __mvPut( Result + 'AllowEdit', __mvGet ( PreviousValue + 'AllowEdit' ) )
                  __mvXRelease( PreviousValue + 'AllowEdit' )

                  __mvPublic ( Result + 'AllowAppend' )
                  __mvPut( Result + 'AllowAppend', __mvGet ( PreviousValue + 'AllowAppend' ) )
                  __mvXRelease( PreviousValue + 'AllowAppend' )

                  __mvPublic ( Result + 'OnHeadClick' )
                  __mvPut( Result + 'OnHeadClick', __mvGet ( PreviousValue + 'OnHeadClick' ) )
                  __mvXRelease( PreviousValue + 'OnHeadClick' )

                  __mvPublic ( Result + 'AllowDelete' )
                  __mvPut( Result + 'AllowDelete', __mvGet ( PreviousValue + 'AllowDelete' ) )
                  __mvXRelease( PreviousValue + 'AllowDelete' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Image' )
                  __mvPut( Result + 'Image', __mvGet ( PreviousValue + 'Image' ) )
                  __mvXRelease( PreviousValue + 'Image' )

                  __mvPublic ( Result + 'Justify' )
                  __mvPut( Result + 'Justify', __mvGet ( PreviousValue + 'Justify' ) )
                  __mvXRelease( PreviousValue + 'Justify' )

                  __mvPublic ( Result + 'Lines' )
                  __mvPut( Result + 'Lines', __mvGet ( PreviousValue + 'Lines' ) )
                  __mvXRelease( PreviousValue + 'Lines' )

                  __mvPublic ( Result + 'ReadOnlyFields' )
                  __mvPut( Result + 'ReadOnlyFields', __mvGet ( PreviousValue + 'ReadOnlyFields' ) )
                  __mvXRelease( PreviousValue + 'ReadOnlyFields' )

                  __mvPublic ( Result + 'Valid' )
                  __mvPut( Result + 'Valid', __mvGet ( PreviousValue + 'Valid' ) )
                  __mvXRelease( PreviousValue + 'Valid' )

                  __mvPublic ( Result + 'ValidMessages' )
                  __mvPut( Result + 'ValidMessages', __mvGet ( PreviousValue + 'ValidMessages' ) )
                  __mvXRelease( PreviousValue + 'ValidMessages' )

                  __mvPublic ( Result + 'Lock' )
                  __mvPut( Result + 'Lock', __mvGet ( PreviousValue + 'Lock' ) )
                  __mvXRelease( PreviousValue + 'Lock' )

                  __mvPublic ( Result + 'vScrollBar' )
                  __mvPut( Result + 'vScrollBar', __mvGet ( PreviousValue + 'vScrollBar' ) )
                  __mvXRelease( PreviousValue + 'vScrollBar' )

                  __mvPublic ( Result + 'DynamicBackColor' )
                  __mvPut( Result + 'DynamicBackColor', __mvGet ( PreviousValue + 'DynamicBackColor' ) )
                  __mvXRelease( PreviousValue + 'DynamicBackColor' )

                  __mvPublic ( Result + 'DynamicForeColor' )
                  __mvPut( Result + 'DynamicForeColor', __mvGet ( PreviousValue + 'DynamicForeColor' ) )
                  __mvXRelease( PreviousValue + 'DynamicForeColor' )

                  __mvPublic ( Result + 'InputMask' )
                  __mvPut( Result + 'InputMask', __mvGet ( PreviousValue + 'InputMask' ) )
                  __mvXRelease( PreviousValue + 'InputMask' )

                  __mvPublic ( Result + 'Format' )
                  __mvPut( Result + 'Format', __mvGet ( PreviousValue + 'Format' ) )
                  __mvXRelease( PreviousValue + 'Format' )

                  __mvPublic ( Result + 'When' )
                  __mvPut( Result + 'When', __mvGet ( PreviousValue + 'When' ) )
                  __mvXRelease( PreviousValue + 'When' )

                  __mvPublic ( Result + 'DisplayItems' )
                  __mvPut( Result + 'DisplayItems', __mvGet ( PreviousValue + 'DisplayItems' ) )
                  __mvXRelease( PreviousValue + 'DisplayItems' )

                  __mvPublic ( Result + 'HeaderImages' )
                  __mvPut( Result + 'HeaderImages', __mvGet ( PreviousValue + 'HeaderImages' ) )
                  __mvXRelease( PreviousValue + 'HeaderImages' )

                  __mvPublic ( Result + 'InputItems' )
                  __mvPut( Result + 'InputItems', __mvGet ( PreviousValue + 'InputItems' ) )
                  __mvXRelease( PreviousValue + 'InputItems' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTHS'
               __mvPut( SelectedControlName + 'Widths', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FIELDS'
               __mvPut( SelectedControlName + 'Fields', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WORKAREA'
               __mvPut( SelectedControlName + 'WorkArea', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEADERS'
               __mvPut( SelectedControlName + 'Headers', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )

                  nTemp := GetControlSysColor()
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  ListView_SetBkColor ( _HMG_aControlHandles[ z ], GetRed( nTemp ), GetGreen( nTemp ), GetBlue( nTemp ) )
                  redrawwindow ( _HMG_aControlHandles[ z ] )

               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ALLOWEDIT'
               __mvPut( SelectedControlName + 'AllowEdit', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ALLOWAPPEND'
               __mvPut( SelectedControlName + 'AllowAppend', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ALLOWDELETE'
               __mvPut( SelectedControlName + 'AllowDelete', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'JUSTIFY'
               __mvPut( SelectedControlName + 'Justify', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'IMAGE'
               __mvPut( SelectedControlName + 'Image', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'LINES'
               __mvPut( SelectedControlName + 'Lines', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

               TabName := _HMG_aControlBrushHandle[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE BROWSE &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  WIDTH WidthTemp
                  HEIGHT HeightTemp
                  PARENT &DesignForm
                  ON GOTFOCUS SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  HEADERS { SelectedControlName }
                  WIDTHS { 100 }
                  WORKAREA Test
                  FIELDS { 'Test->Code' }
                  VALUE 1
                  VSCROLLBAR .F.

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Lines' ) ) ) == '.T.'
                     NOLINES .F.
                  ELSE
                     NOLINES .T.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END BROWSE

               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  TabRow := GetProperty ( DesignForm, TabName, 'Row' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  // MiniGUI Bug!!!!
                  SetProperty ( DesignForm, TabName, 'Row', TabRow )

                  _HMG_aControlBrushHandle[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               Redrawwindow( DesignFormHandle )
               DrawGrid()
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'READONLYFIELDS'
               __mvPut( SelectedControlName + 'ReadOnlyFields', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALID'
               __mvPut( SelectedControlName + 'Valid', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALIDMESSAGES'
               __mvPut( SelectedControlName + 'ValidMessages', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'LOCK'
               __mvPut( SelectedControlName + 'Lock', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VSCROLLBAR'
               __mvPut( SelectedControlName + 'vScrollBar', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DYNAMICBACKCOLOR'
               __mvPut( SelectedControlName + 'DYNAMICBACKCOLOR', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DYNAMICFORECOLOR'
               __mvPut( SelectedControlName + 'DYNAMICFORECOLOR', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'INPUTMASK'
               __mvPut( SelectedControlName + 'INPUTMASK', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FORMAT'
               __mvPut( SelectedControlName + 'FORMAT', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WHEN'
               __mvPut( SelectedControlName + 'WHEN', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'INPUTITEMS'
               __mvPut( SelectedControlName + 'INPUTITEMS', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'DISPLAYITEMS'
               __mvPut( SelectedControlName + 'DISPLAYITEMS', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEADERIMAGES'
               __mvPut( SelectedControlName + 'HEADERIMAGES', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'RADIOGROUP'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'ReadOnly' )
                  __mvPut( Result + 'ReadOnly', __mvGet ( PreviousValue + 'ReadOnly' ) )
                  __mvXRelease( PreviousValue + 'ReadOnly' )

                  __mvPublic ( Result + 'Orientation' )
                  __mvPut( Result + 'Orientation', __mvGet ( PreviousValue + 'Orientation' ) )
                  __mvXRelease( PreviousValue + 'Orientation' )

                  __mvPublic ( Result + 'Options' )
                  __mvPut( Result + 'Options', __mvGet ( PreviousValue + 'Options' ) )
                  __mvXRelease( PreviousValue + 'Options' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Transparent' )
                  __mvPut( Result + 'Transparent', __mvGet ( PreviousValue + 'Transparent' ) )
                  __mvXRelease( PreviousValue + 'Transparent' )

                  __mvPublic ( Result + 'Spacing' )
                  __mvPut( Result + 'Spacing', __mvGet ( PreviousValue + 'Spacing' ) )
                  __mvXRelease( PreviousValue + 'Spacing' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'OPTIONS'

               aTemp := StringToArray ( Result )
               IF HMG_LEN ( aTemp ) == 1
                  MsgStop ( 'Options Array Length Must Be At Least 2. Aborted', 'HMG IDE' )
                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )
                  RETURN
               ENDIF

               __mvPut( SelectedControlName + 'Options', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )


               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               if ! Empty ( TabName )
                  fmb := _HMG_FrameLevel
                  _HMG_FrameLevel := 1
                  _HMG_ActiveTabName := TabName
                  _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
               ENDIF

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE RADIOGROUP &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  OPTIONS aTemp
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  SPACING Val ( __mvGet ( SelectedControlName + 'Spacing' ) )
                  WIDTH WidthTemp

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Orientation' ) ) ) == 'HORIZONTAL'
                     HORIZONTAL .T.
                  ELSE
                     HORIZONTAL .F.
                  ENDIF


                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END RADIOGROUP

               if ! Empty ( TabName )
                  _HMG_FrameLevel := fmb
               ENDIF


               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  TabRow := GetProperty ( DesignForm, TabName, 'Row' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  // MiniGUI Bug!!!!
                  SetProperty ( DesignForm, TabName, 'Row', TabRow )

               ENDIF

               Redrawwindow( DesignFormHandle )
               DrawGrid()
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TRANSPARENT'
               __mvPut( SelectedControlName + 'Transparent', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SPACING'

               __mvPut( SelectedControlName + 'Spacing', Result )

               z := GetControlIndex ( SelectedControlName, DesignForm )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               OptTemp := _HMG_aControlCaption[ z ]

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               if ! Empty ( TabName )
                  fmb := _HMG_FrameLevel
                  _HMG_FrameLevel := 1
                  _HMG_ActiveTabName := TabName
                  _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
               ENDIF

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE RADIOGROUP &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  OPTIONS OptTemp
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  SPACING Val ( __mvGet ( SelectedControlName + 'Spacing' ) )
                  WIDTH WidthTemp

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Orientation' ) ) ) == 'HORIZONTAL'
                     HORIZONTAL .T.
                  ELSE
                     HORIZONTAL .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END RADIOGROUP

               if ! Empty ( TabName )
                  _HMG_FrameLevel := fmb
               ENDIF

               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  TabRow := GetProperty ( DesignForm, TabName, 'Row' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  // MiniGUI Bug!!!!
                  SetProperty ( DesignForm, TabName, 'Row', TabRow )

               ENDIF

               Redrawwindow( DesignFormHandle )
               DrawGrid()
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'READONLY'
               __mvPut( SelectedControlName + 'ReadOnly', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ORIENTATION'

               __mvPut( SelectedControlName + 'Orientation', Result )

               IF result == 'VERTICAL'
                  __mvPut( SelectedControlName + 'Spacing', '25' )
               ELSEIF result == 'HORIZONTAL'
                  __mvPut( SelectedControlName + 'Spacing', '5' )
               ENDIF

               z := GetControlIndex ( SelectedControlName, DesignForm )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               OptTemp := _HMG_aControlCaption[ z ]

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               if ! Empty ( TabName )
                  fmb := _HMG_FrameLevel
                  _HMG_FrameLevel := 1
                  _HMG_ActiveTabName := TabName
                  _HMG_ActiveFrameParentFormName[ _HMG_FrameLevel ] := DesignForm
               ENDIF

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE RADIOGROUP &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  OPTIONS OptTemp
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  SPACING Val ( __mvGet ( SelectedControlName + 'Spacing' ) )
                  WIDTH WidthTemp

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Orientation' ) ) ) == 'HORIZONTAL'
                     HORIZONTAL .T.
                  ELSE
                     HORIZONTAL .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

               END RADIOGROUP

               if ! Empty ( TabName )
                  _HMG_FrameLevel := fmb
               ENDIF

               ColorTmp := __mvGet ( SelectedControlName + 'FontColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &ColorTmp )
               ENDIF
               ColorTmp := __mvGet ( SelectedControlName + 'BackColor' )
               IF hb_ULeft( AllTrim( ColorTmp ), 1 ) == '{'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &ColorTmp )
               ENDIF

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  TabRow := GetProperty ( DesignForm, TabName, 'Row' )
                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  // MiniGUI Bug!!!!
                  SetProperty ( DesignForm, TabName, 'Row', TabRow )

               ENDIF

               Redrawwindow( DesignFormHandle )
               DrawGrid()
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'FRAME'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Caption' )
                  __mvPut( Result + 'Caption', __mvGet ( PreviousValue + 'Caption' ) )
                  __mvXRelease( PreviousValue + 'Caption' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'Transparent' )
                  __mvPut( Result + 'Transparent', __mvGet ( PreviousValue + 'Transparent' ) )
                  __mvXRelease( PreviousValue + 'Transparent' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'CAPTION'

               __mvPut( SelectedControlName + 'Caption', Result )

               IF Empty ( result )
                  SetProperty ( DesignForm, SelectedControlName, 'fontsize', 1 )
               ELSE
                  SetProperty ( DesignForm, SelectedControlName, 'fontsize', Val ( __mvGet( SelectedControlName + 'FontSize' ) ) )
               ENDIF

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TRANSPARENT'

               __mvPut( SelectedControlName + 'Transparent', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'TAB'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )

               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  _OLDNAME := _HMG_aControlNames[ X ]
                  _NEWNAME := Result

                  FOR Z := 1 TO HMG_LEN ( _HMG_aControlType )

                     IF _HMG_aControlType[ Z ] == 'CHECKBOX' .AND. ValType ( _HMG_aControlRangeMin[ Z ] ) == 'C'
                        IF HMG_UPPER ( AllTrim ( _HMG_aControlRangeMin[ Z ] ) ) == HMG_UPPER ( AllTrim ( _OLDNAME ) )
                           _HMG_aControlRangeMin[ Z ] := _NEWNAME
                        ENDIF
                     ENDIF

                     IF _HMG_aControlType[ Z ] == 'SLIDER' .AND. ValType ( _HMG_aControlFontHandle[ Z ] ) == 'C'
                        IF HMG_UPPER ( AllTrim ( _HMG_aControlFontHandle[ Z ] ) ) == HMG_UPPER ( AllTrim ( _OLDNAME ) )
                           _HMG_aControlFontHandle[ Z ] := _NEWNAME
                        ENDIF
                     ENDIF

                     IF _HMG_aControlType[ Z ] == 'RADIOGROUP' .AND. ValType ( _HMG_aControlRangeMin[ Z ] ) == 'C'
                        IF HMG_UPPER ( AllTrim ( _HMG_aControlRangeMin[ Z ] ) ) == HMG_UPPER ( AllTrim ( _OLDNAME ) )
                           _HMG_aControlRangeMin[ Z ] := _NEWNAME
                        ENDIF
                     ENDIF

                     IF _HMG_aControlType[ Z ] == 'FRAME' .AND. ValType ( _HMG_aControlRangeMin[ Z ] ) == 'C'
                        IF HMG_UPPER ( AllTrim ( _HMG_aControlRangeMin[ Z ] ) ) == HMG_UPPER ( AllTrim ( _OLDNAME ) )
                           _HMG_aControlRangeMin[ Z ] := _NEWNAME
                        ENDIF
                     ENDIF

                  NEXT Z

                  __mvPublic ( Result + 'MultiLine' )
                  __mvPut( Result + 'Multiline', __mvGet ( PreviousValue + 'Multiline' ) )
                  __mvXRelease( PreviousValue + 'Multiline' )

                  __mvPublic ( Result + 'PageCount' )
                  __mvPut( Result + 'PageCount', __mvGet ( PreviousValue + 'PageCount' ) )
                  __mvXRelease( PreviousValue + 'PageCount' )

                  __mvPublic ( Result + 'Captions' )
                  __mvPut( Result + 'Captions', __mvGet ( PreviousValue + 'Captions' ) )
                  __mvXRelease( PreviousValue + 'Captions' )

                  __mvPublic ( Result + 'PageImages' )
                  __mvPut( Result + 'PageImages', __mvGet ( PreviousValue + 'PageImages' ) )
                  __mvXRelease( PreviousValue + 'PageImages' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'Buttons' )
                  __mvPut( Result + 'Buttons', __mvGet ( PreviousValue + 'Buttons' ) )
                  __mvXRelease( PreviousValue + 'Buttons' )

                  __mvPublic ( Result + 'Flat' )
                  __mvPut( Result + 'Flat', __mvGet ( PreviousValue + 'Flat' ) )
                  __mvXRelease( PreviousValue + 'Flat' )

                  __mvPublic ( Result + 'Vertical' )
                  __mvPut( Result + 'Vertical', __mvGet ( PreviousValue + 'Vertical' ) )
                  __mvXRelease( PreviousValue + 'Vertical' )

                  __mvPublic ( Result + 'HotTrack' )
                  __mvPut( Result + 'HotTrack', __mvGet ( PreviousValue + 'HotTrack' ) )
                  __mvXRelease( PreviousValue + 'HotTrack' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PAGECOUNT'

               IF Val ( PreviousValue ) != Val ( Result )

                  __mvPut( SelectedControlName + 'PageCount', Result )

                  IF Val ( Result ) > Val ( PreviousValue )

                     x := GetControlIndex ( SelectedControlName, DesignForm )

                     FOR a := 1 TO Val ( Result ) - Val ( PreviousValue )

                        DoMethod ( DesignForm, SelectedControlName, 'AddPage', Val ( PreviousValue ) + a, 'Page ' + AllTrim( Str( Val ( PreviousValue ) + a ) ) )
                        _HMG_aControlCaption[ x ][ Val ( PreviousValue ) + a ] := 'Page ' + AllTrim( Str( Val ( PreviousValue ) + a ) )

                     NEXT a

                     cTemp := '{ '
                     FOR a := 1 TO HMG_LEN ( _HMG_aControlCaption[ x ] )
                        cTemp := cTemp + Chr( 34 ) + _HMG_aControlCaption[ x ][ a ] + Chr( 34 ) + ' , '
                     NEXT a
                     cTemp := AllTrim ( cTemp )
                     cTemp := hb_ULeft ( cTemp, HMG_LEN( cTemp ) - 1 )
                     cTemp := cTemp + '} '
                     __mvPut ( _HMG_aControlNames[ x ] + 'Captions', cTemp )
                     __mvPut ( _HMG_aControlNames[ x ] + 'PageCount', AllTrim( Str( HMG_LEN(_HMG_aControlPageMap[ x ] ) ) ) )


                     // **

                     aTemp := StringToArray ( __mvGet( SelectedControlName + 'PageImages' ) )

                     cTemp := '{ '
                     FOR a := 1 TO HMG_LEN ( aTemp )
                        cTemp := cTemp + Chr( 34 ) + aTemp[ a ] + Chr( 34 ) + ' , '
                     NEXT a

                     FOR a := 1 TO HMG_LEN ( _HMG_aControlCaption[ x ] ) - HMG_LEN ( aTemp )
                        cTemp := cTemp + Chr( 34 ) + '' + Chr( 34 ) + ' , '
                     NEXT a

                     cTemp := AllTrim ( cTemp )
                     cTemp := hb_ULeft ( cTemp, HMG_LEN( cTemp ) - 1 )
                     cTemp := cTemp + '} '
                     __mvPut ( _HMG_aControlNames[ x ] + 'PageImages', cTemp )

                     // **


                  ELSEIF Val ( Result ) < Val ( PreviousValue )

                     // aTemp := {}

                     x1 := GetControlIndex ( SelectedControlName, DesignForm )

                     lSuccess := .T.

                     FOR a := Val ( PreviousValue ) TO Val ( Result ) + 1 STEP -1

                        IF HMG_LEN ( _HMG_aControlPageMap[ x1 ][ a ] ) > 0

                           MsgStop ( aMsgs[ 223 ], 'HMG IDE' )
                           __mvPut( SelectedControlName + 'PageCount', PreviousValue )

                           lSuccess := .F.
                           EXIT
                        ELSE
                           DoMethod ( DesignForm, SelectedControlName, 'DeletePage', a )
                        ENDIF

                     NEXT a

                     IF lSuccess == .T.

                        cTemp := '{ '
                        FOR y := 1 TO HMG_LEN ( _HMG_aControlCaption[ x1 ] )
                           cTemp := cTemp + Chr( 34 ) + _HMG_aControlCaption[ x1 ][ y ] + Chr( 34 ) + ' , '
                        NEXT y
                        cTemp := AllTrim ( cTemp )
                        cTemp := hb_ULeft ( cTemp, HMG_LEN( cTemp ) - 1 )
                        cTemp := cTemp + '} '
                        __mvPut ( _HMG_aControlNames[ x1 ] + 'Captions', cTemp )


                        x := GetControlIndex ( SelectedControlName, DesignForm )

                        aTemp := StringToArray ( __mvGet( SelectedControlName + 'PageImages' ) )

                        cTemp := '{ '
                        FOR a := 1 TO HMG_LEN ( _HMG_aControlCaption[ x ] )
                           cTemp := cTemp + Chr( 34 ) + aTemp[ a ] + Chr( 34 ) + ' , '
                        NEXT a

                        cTemp := AllTrim ( cTemp )
                        cTemp := hb_ULeft ( cTemp, HMG_LEN( cTemp ) - 1 )
                        cTemp := cTemp + '} '
                        __mvPut ( _HMG_aControlNames[ x ] + 'PageImages', cTemp )

                     ENDIF

                  ENDIF

               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'CAPTIONS'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               aTemp := StringToArray ( Result )

               IF HMG_LEN ( aTemp ) != Val ( __mvGet ( SelectedControlName + 'PageCount' ) )
                  MsgStop ( 'Captions Array Length Must Be Equal To PageCount Value. Aborted', 'HMG IDE' )
                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )
                  RETURN
               ENDIF

               __mvPut( SelectedControlName + 'Captions', Result )


               FOR k := 1 TO HMG_LEN ( _HMG_aControlCaption[ x ] )
                  SetProperty ( DesignForm, SelectedControlName, 'Caption', k, aTemp[ k ] )
               NEXT k

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )


            ELSEIF PropertyName == 'BUTTONS'

               IF AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.T.' ;
                     .AND. ;
                     IsAppThemed() ;
                     .AND. ;
                     AllTrim ( HMG_UPPER ( Result ) ) == '.F.'

                  __mvPut( SelectedControlName + 'Vertical', '.F.' )

               ENDIF

               __mvPut( SelectedControlName + 'Buttons', Result )

               TabMultiline := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Multiline' ) ) ) == '.T.', .T., .F. )

               TabIndex := GetControlIndex ( SelectedControlName, DesignForm )
               TabRow := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               TabCol := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               TabWidth := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               TabHeight := GetProperty ( DesignForm, SelectedControlName, 'Height' )
               TabCaptions := _HMG_aControlCaption[ TabIndex ]
               TabPage := GetProperty ( DesignForm, SelectedControlName, 'Value' )
               TabButtons := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.T.', .T., .F. )
               TabFlat := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Flat' ) ) ) == '.T.', .T., .F. )
               TabHotTrack := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'HotTrack' ) ) ) == '.T.', .T., .F. )
               TabVertical := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Vertical' ) ) ) == '.T.', .T., .F. )
               TabFontName := __mvGet ( SelectedControlName + 'FontName' )
               TabFontSize := Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
               TabBold := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.', .T., .F. )
               TabItalic := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.', .T., .F. )
               TabUnderLine := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.', .T., .F. )
               TabStrikeout := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontStrikeout' ) ) ) == '.T.', .T., .F. )
               releaseControl ( _HMG_aControlHandles[ tabindex ] )
               _HMG_aControlHandles[ TabIndex ] := InitTabControl ( DesignFormhandle, 0, TabCol, TabRow, TabWidth, TabHeight, TabCaptions, TabPage, '', 0, TabButtons, TabFlat, TabHottrack, TabVertical, .F., TabMultiline )
               DeleteObject ( _HMG_aControlFontHandle[ tabindex ] )
               _HMG_aControlFontHandle[ TabIndex ] := _SetFont ( _HMG_aControlHandles[ TabIndex ], TabFontName, TabFontSize, TabBold, TabItalic, TabUnderLine, TabStrikeout )


               FOR x := 1 TO HMG_LEN ( _HMG_aControlType )

                  IF _HMG_aControlType[ x ] == 'SLIDER' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'FRAME' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'CHECKBOX' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'RADIOGROUP'

                     _HMG_aControlDblClick[ x ] := TabButtons

                  ENDIF

                  IF _HMG_aControlType[ x ] == 'SLIDER'

                     _HMG_aControlFontHandle[ x ] := SelectedControlName
                     _HMG_aControlBrushHandle[ x ] := dESIGNfORM

                     SetFocus ( _HMG_aControlHandles[ x ] )

                  ENDIF

               NEXT x

               _HMG_aControlRangeMin[ TabIndex ] := TabButtons

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FLAT'
               __mvPut( SelectedControlName + 'Flat', Result )

               TabMultiline := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Multiline' ) ) ) == '.T.', .T., .F. )


               TabIndex := GetControlIndex ( SelectedControlName, DesignForm )
               TabRow := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               TabCol := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               TabWidth := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               TabHeight := GetProperty ( DesignForm, SelectedControlName, 'Height' )
               TabCaptions := _HMG_aControlCaption[ TabIndex ]
               TabPage := GetProperty ( DesignForm, SelectedControlName, 'Value' )
               TabButtons := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.T.', .T., .F. )
               TabFlat := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Flat' ) ) ) == '.T.', .T., .F. )
               TabHotTrack := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'HotTrack' ) ) ) == '.T.', .T., .F. )
               TabVertical := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Vertical' ) ) ) == '.T.', .T., .F. )
               TabFontName := __mvGet ( SelectedControlName + 'FontName' )
               TabFontSize := Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
               TabBold := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.', .T., .F. )
               TabItalic := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.', .T., .F. )
               TabUnderLine := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.', .T., .F. )
               TabStrikeout := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.', .T., .F. )
               releaseControl ( _HMG_aControlHandles[ tabindex ] )
               _HMG_aControlHandles[ TabIndex ] := InitTabControl ( DesignFormhandle, 0, TabCol, TabRow, TabWidth, TabHeight, TabCaptions, TabPage, '', 0, TabButtons, TabFlat, TabHottrack, TabVertical, .F., TabMultiline )
               DeleteObject ( _HMG_aControlFontHandle[ tabindex ] )
               _HMG_aControlFontHandle[ TabIndex ] := _SetFont ( _HMG_aControlHandles[ TabIndex ], TabFontName, TabFontSize, TabBold, TabItalic, TabUnderLine, TabStrikeout )


               FOR x := 1 TO HMG_LEN ( _HMG_aControlType )

                  IF _HMG_aControlType[ x ] == 'SLIDER' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'FRAME' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'CHECKBOX' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'RADIOGROUP'

                     _HMG_aControlDblClick[ x ] := TabButtons

                  ENDIF

                  IF _HMG_aControlType[ x ] == 'SLIDER'

                     _HMG_aControlFontHandle[ x ] := SelectedControlName
                     _HMG_aControlBrushHandle[ x ] := dESIGNfORM

                     SetFocus ( _HMG_aControlHandles[ x ] )

                  ENDIF

               NEXT X

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HOTTRACK'
               __mvPut( SelectedControlName + 'HotTrack', Result )

               TabMultiline := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Multiline' ) ) ) == '.T.', .T., .F. )


               TabIndex := GetControlIndex ( SelectedControlName, DesignForm )
               TabRow := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               TabCol := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               TabWidth := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               TabHeight := GetProperty ( DesignForm, SelectedControlName, 'Height' )
               TabCaptions := _HMG_aControlCaption[ TabIndex ]
               TabPage := GetProperty ( DesignForm, SelectedControlName, 'Value' )
               TabButtons := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.T.', .T., .F. )
               TabFlat := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Flat' ) ) ) == '.T.', .T., .F. )
               TabHotTrack := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'HotTrack' ) ) ) == '.T.', .T., .F. )
               TabVertical := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Vertical' ) ) ) == '.T.', .T., .F. )
               TabFontName := __mvGet ( SelectedControlName + 'FontName' )
               TabFontSize := Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
               TabBold := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.', .T., .F. )
               TabItalic := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.', .T., .F. )
               TabUnderLine := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.', .T., .F. )
               TabStrikeout := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.', .T., .F. )
               releaseControl ( _HMG_aControlHandles[ tabindex ] )
               _HMG_aControlHandles[ TabIndex ] := InitTabControl ( DesignFormhandle, 0, TabCol, TabRow, TabWidth, TabHeight, TabCaptions, TabPage, '', 0, TabButtons, TabFlat, TabHottrack, TabVertical, .F., TabMultiline )
               DeleteObject ( _HMG_aControlFontHandle[ tabindex ] )
               _HMG_aControlFontHandle[ TabIndex ] := _SetFont ( _HMG_aControlHandles[ TabIndex ], TabFontName, TabFontSize, TabBold, TabItalic, TabUnderLine, TabStrikeout )

               FOR x := 1 TO HMG_LEN ( _HMG_aControlType )

                  IF _HMG_aControlType[ x ] == 'SLIDER' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'FRAME' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'CHECKBOX' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'RADIOGROUP'

                     _HMG_aControlDblClick[ x ] := TabButtons

                  ENDIF

                  IF _HMG_aControlType[ x ] == 'SLIDER'

                     _HMG_aControlFontHandle[ x ] := SelectedControlName
                     _HMG_aControlBrushHandle[ x ] := dESIGNfORM

                     SetFocus ( _HMG_aControlHandles[ x ] )

                  ENDIF

               NEXT X

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VERTICAL'

               __mvPut( SelectedControlName + 'Vertical', Result )

               IF ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.T.' ) ;
                     .OR. ;
                     ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.F.' .AND. ! IsAppThemed() .AND. ! IsVistaOrLater() )

                  TabMultiline := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Multiline' ) ) ) == '.T.', .T., .F. )


                  TabIndex := GetControlIndex ( SelectedControlName, DesignForm )
                  TabRow := GetProperty ( DesignForm, SelectedControlName, 'Row' )
                  TabCol := GetProperty ( DesignForm, SelectedControlName, 'Col' )
                  TabWidth := GetProperty ( DesignForm, SelectedControlName, 'Width' )
                  TabHeight := GetProperty ( DesignForm, SelectedControlName, 'Height' )
                  TabCaptions := _HMG_aControlCaption[ TabIndex ]
                  TabPage := GetProperty ( DesignForm, SelectedControlName, 'Value' )
                  TabButtons := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.T.', .T., .F. )
                  TabFlat := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Flat' ) ) ) == '.T.', .T., .F. )
                  TabHotTrack := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'HotTrack' ) ) ) == '.T.', .T., .F. )
                  TabVertical := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Vertical' ) ) ) == '.T.', .T., .F. )
                  TabFontName := __mvGet ( SelectedControlName + 'FontName' )
                  TabFontSize := Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
                  TabBold := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.', .T., .F. )
                  TabItalic := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.', .T., .F. )
                  TabUnderLine := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.', .T., .F. )
                  TabStrikeout := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.', .T., .F. )
                  releaseControl ( _HMG_aControlHandles[ tabindex ] )
                  _HMG_aControlHandles[ TabIndex ] := InitTabControl ( DesignFormhandle, 0, TabCol, TabRow, TabWidth, TabHeight, TabCaptions, TabPage, '', 0, TabButtons, TabFlat, TabHottrack, TabVertical, .F., TabMultiline )
                  DeleteObject ( _HMG_aControlFontHandle[ tabindex ] )
                  _HMG_aControlFontHandle[ TabIndex ] := _SetFont ( _HMG_aControlHandles[ TabIndex ], TabFontName, TabFontSize, TabBold, TabItalic, TabUnderLine, TabStrikeout )

                  FOR x := 1 TO HMG_LEN ( _HMG_aControlType )

                     IF _HMG_aControlType[ x ] == 'SLIDER' ;
                           .OR. ;
                           _HMG_aControlType[ x ] == 'FRAME' ;
                           .OR. ;
                           _HMG_aControlType[ x ] == 'CHECKBOX' ;
                           .OR. ;
                           _HMG_aControlType[ x ] == 'RADIOGROUP'

                        _HMG_aControlDblClick[ x ] := TabButtons

                     ENDIF

                     IF _HMG_aControlType[ x ] == 'SLIDER'

                        _HMG_aControlFontHandle[ x ] := SelectedControlName
                        _HMG_aControlBrushHandle[ x ] := dESIGNfORM

                        SetFocus ( _HMG_aControlHandles[ x ] )

                     ENDIF

                  NEXT X

               ENDIF

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PAGEIMAGES'

               // x := GetControlIndex ( SelectedControlName , DesignForm )
               aTemp := StringToArray ( Result )

               IF HMG_LEN ( aTemp ) != Val ( __mvGet ( SelectedControlName + 'PageCount' ) )
                  MsgStop ( 'Images Array Length Must Be Equal To PageCount Value. Aborted', 'HMG IDE' )
                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )
                  RETURN
               ENDIF

               __mvPut( SelectedControlName + 'PageImages', Result )

               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MULTILINE'
               __mvPut( SelectedControlName + 'Multiline', Result )

               TabMultiline := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Multiline' ) ) ) == '.T.', .T., .F. )


               TabIndex := GetControlIndex ( SelectedControlName, DesignForm )
               TabRow := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               TabCol := GetProperty ( DesignForm, SelectedControlName, 'Col' )
               TabWidth := GetProperty ( DesignForm, SelectedControlName, 'Width' )
               TabHeight := GetProperty ( DesignForm, SelectedControlName, 'Height' )
               TabCaptions := _HMG_aControlCaption[ TabIndex ]
               TabPage := GetProperty ( DesignForm, SelectedControlName, 'Value' )
               TabButtons := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Buttons' ) ) ) == '.T.', .T., .F. )
               TabFlat := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Flat' ) ) ) == '.T.', .T., .F. )
               TabHotTrack := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'HotTrack' ) ) ) == '.T.', .T., .F. )
               TabVertical := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'Vertical' ) ) ) == '.T.', .T., .F. )
               TabFontName := __mvGet ( SelectedControlName + 'FontName' )
               TabFontSize := Val ( __mvGet ( SelectedControlName + 'FontSize' ) )
               TabBold := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.', .T., .F. )
               TabItalic := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.', .T., .F. )
               TabUnderLine := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.', .T., .F. )
               TabStrikeout := if ( AllTrim ( HMG_UPPER ( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.', .T., .F. )
               releaseControl ( _HMG_aControlHandles[ tabindex ] )
               _HMG_aControlHandles[ TabIndex ] := InitTabControl ( DesignFormhandle, 0, TabCol, TabRow, TabWidth, TabHeight, TabCaptions, TabPage, '', 0, TabButtons, TabFlat, TabHottrack, TabVertical, .F., TabMultiline )
               DeleteObject ( _HMG_aControlFontHandle[ tabindex ] )
               _HMG_aControlFontHandle[ TabIndex ] := _SetFont ( _HMG_aControlHandles[ TabIndex ], TabFontName, TabFontSize, TabBold, TabItalic, TabUnderLine, TabStrikeout )


               FOR x := 1 TO HMG_LEN ( _HMG_aControlType )

                  IF _HMG_aControlType[ x ] == 'SLIDER' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'FRAME' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'CHECKBOX' ;
                        .OR. ;
                        _HMG_aControlType[ x ] == 'RADIOGROUP'

                     _HMG_aControlDblClick[ x ] := TabButtons

                  ENDIF

                  IF _HMG_aControlType[ x ] == 'SLIDER'

                     _HMG_aControlFontHandle[ x ] := SelectedControlName
                     _HMG_aControlBrushHandle[ x ] := dESIGNfORM

                     SetFocus ( _HMG_aControlHandles[ x ] )

                  ENDIF

               NEXT X

               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'ANIMATEBOX'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'File' )
                  __mvPut( Result + 'File', __mvGet ( PreviousValue + 'File' ) )
                  __mvXRelease( PreviousValue + 'File' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Transparent' )
                  __mvPut( Result + 'Transparent', __mvGet ( PreviousValue + 'Transparent' ) )
                  __mvXRelease( PreviousValue + 'Transparent' )

                  __mvPublic ( Result + 'AutoPlay' )
                  __mvPut( Result + 'AutoPlay', __mvGet ( PreviousValue + 'AutoPlay' ) )
                  __mvXRelease( PreviousValue + 'AutoPlay' )

                  __mvPublic ( Result + 'Center' )
                  __mvPut( Result + 'Center', __mvGet ( PreviousValue + 'Center' ) )
                  __mvXRelease( PreviousValue + 'Center' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FILE'
               __mvPut( SelectedControlName + 'File', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TRANSPARENT'
               __mvPut( SelectedControlName + 'Transparent', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'AUTOPLAY'
               __mvPut( SelectedControlName + 'AutoPlay', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'CENTER'
               __mvPut( SelectedControlName + 'Center', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'HYPERLINK'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'Address' )
                  __mvPut( Result + 'Address', __mvGet ( PreviousValue + 'Address' ) )
                  __mvXRelease( PreviousValue + 'Address' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'AutoSize' )
                  __mvPut( Result + 'AutoSize', __mvGet ( PreviousValue + 'AutoSize' ) )
                  __mvXRelease( PreviousValue + 'AutoSize' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'FontColor' )
                  __mvPut( Result + 'FontColor', __mvGet ( PreviousValue + 'FontColor' ) )
                  __mvXRelease( PreviousValue + 'FontColor' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'HandCursor' )
                  __mvPut( Result + 'HandCursor', __mvGet ( PreviousValue + 'HandCursor' ) )
                  __mvXRelease( PreviousValue + 'HandCursor' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ADDRESS'
               __mvPut( SelectedControlName + 'Address', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'AUTOSIZE'
               __mvPut( SelectedControlName + 'AutoSize', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTCOLOR'
               __mvPut( SelectedControlName + 'FontColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'FontColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HANDCURSOR'
               __mvPut( SelectedControlName + 'HandCursor', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'MONTHCALENDAR'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'Today' )
                  __mvPut( Result + 'Today', __mvGet ( PreviousValue + 'Today' ) )
                  __mvXRelease( PreviousValue + 'Today' )

                  __mvPublic ( Result + 'TodayCircle' )
                  __mvPut( Result + 'TodayCircle', __mvGet ( PreviousValue + 'TodayCircle' ) )
                  __mvXRelease( PreviousValue + 'TodayCircle' )

                  __mvPublic ( Result + 'WeekNumbers' )
                  __mvPut( Result + 'WeekNumbers', __mvGet ( PreviousValue + 'WeekNumbers' ) )
                  __mvXRelease( PreviousValue + 'WeekNumbers' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE MONTHCALENDAR &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Today' ) ) ) == '.T.'
                     NOTODAY .F.
                  ELSE
                     NOTODAY .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'TodayCircle' ) ) ) == '.T.'
                     NOTODAYCIRCLE .F.
                  ELSE
                     NOTODAYCIRCLE .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'WeekNumbers' ) ) ) == '.T.'
                     WEEKNUMBERS .T.
                  ELSE
                     WEEKNUMBERS .F.
                  ENDIF

               END MONTHCALENDAR

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               RedrawWindow ( DesignForm )
               DrawGrid()
               SelectControl ( SelectedControlName )
               DrawGrid()

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE MONTHCALENDAR &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Today' ) ) ) == '.T.'
                     NOTODAY .F.
                  ELSE
                     NOTODAY .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'TodayCircle' ) ) ) == '.T.'
                     NOTODAYCIRCLE .F.
                  ELSE
                     NOTODAYCIRCLE .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'WeekNumbers' ) ) ) == '.T.'
                     WEEKNUMBERS .T.
                  ELSE
                     WEEKNUMBERS .F.
                  ENDIF

               END MONTHCALENDAR

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TODAY'
               __mvPut( SelectedControlName + 'Today', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE MONTHCALENDAR &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Today' ) ) ) == '.T.'
                     NOTODAY .F.
                  ELSE
                     NOTODAY .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'TodayCircle' ) ) ) == '.T.'
                     NOTODAYCIRCLE .F.
                  ELSE
                     NOTODAYCIRCLE .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'WeekNumbers' ) ) ) == '.T.'
                     WEEKNUMBERS .T.
                  ELSE
                     WEEKNUMBERS .F.
                  ENDIF

               END MONTHCALENDAR

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TODAYCIRCLE'

               __mvPut( SelectedControlName + 'TodayCircle', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE MONTHCALENDAR &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Today' ) ) ) == '.T.'
                     NOTODAY .F.
                  ELSE
                     NOTODAY .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'TodayCircle' ) ) ) == '.T.'
                     NOTODAYCIRCLE .F.
                  ELSE
                     NOTODAYCIRCLE .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'WeekNumbers' ) ) ) == '.T.'
                     WEEKNUMBERS .T.
                  ELSE
                     WEEKNUMBERS .F.
                  ENDIF

               END MONTHCALENDAR


               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WEEKNUMBERS'

               __mvPut( SelectedControlName + 'WeekNumbers', Result )

               RowTemp := GetProperty ( DesignForm, SelectedControlName, 'Row' )
               ColTemp := GetProperty ( DesignForm, SelectedControlName, 'Col' )

               TabName := _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ]

               DoMethod ( DesignForm, SelectedControlName, 'Release' )

               DEFINE MONTHCALENDAR &SelectedControlName
                  ROW RowTemp
                  COL ColTemp
                  PARENT &DesignForm
                  ON CHANGE SelectControl ( This.Name )
                  FONTNAME __mvGet ( SelectedControlName + 'FontName' )
                  FONTSIZE Val ( __mvGet ( SelectedControlName + 'FontSize' ) )

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontBold' ) ) ) == '.T.'
                     FONTBOLD .T.
                  ELSE
                     FONTBOLD .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontItalic' ) ) ) == '.T.'
                     FONTITALIC .T.
                  ELSE
                     FONTITALIC .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontUnderLine' ) ) ) == '.T.'
                     FONTUNDERLINE .T.
                  ELSE
                     FONTUNDERLINE .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'FontStrikeOut' ) ) ) == '.T.'
                     FONTSTRIKEOUT .T.
                  ELSE
                     FONTSTRIKEOUT .F.
                  ENDIF

                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'Today' ) ) ) == '.T.'
                     NOTODAY .F.
                  ELSE
                     NOTODAY .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'TodayCircle' ) ) ) == '.T.'
                     NOTODAYCIRCLE .F.
                  ELSE
                     NOTODAYCIRCLE .T.
                  ENDIF
                  IF AllTrim( HMG_UPPER( __mvGet ( SelectedControlName + 'WeekNumbers' ) ) ) == '.T.'
                     WEEKNUMBERS .T.
                  ELSE
                     WEEKNUMBERS .F.
                  ENDIF

               END MONTHCALENDAR

               if ! Empty ( TabName )

                  TabPage := GetProperty ( DesignForm, TabName, 'Value' )

                  DoMethod ( DesignForm, TabName, 'AddControl', SelectedControlName, TabPage, RowTemp, ColTemp )

                  DrawGrid()

                  _HMG_aControlRangeMin[ GetControlIndex ( SelectedControlName, DesignForm ) ] := TabName

               ENDIF

               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'RICHEDITBOX'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'MaxLength' )
                  __mvPut( Result + 'MaxLength', __mvGet ( PreviousValue + 'MaxLength' ) )
                  __mvXRelease( PreviousValue + 'MaxLength' )

                  __mvPublic ( Result + 'Field' )
                  __mvPut( Result + 'Field', __mvGet ( PreviousValue + 'Field' ) )
                  __mvXRelease( PreviousValue + 'Field' )

                  __mvPublic ( Result + 'ReadOnly' )
                  __mvPut( Result + 'ReadOnly', __mvGet ( PreviousValue + 'ReadOnly' ) )
                  __mvXRelease( PreviousValue + 'ReadOnly' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF AllTrim( HMG_UPPER( result ) ) == 'NIL'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', { GetRed( GetControlSysColor() ), GetGreen( GetControlSysColor() ), GetBlue( GetControlSysColor() ) } )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MAXLENGTH'
               __mvPut( SelectedControlName + 'MaxLength', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FIELD'
               __mvPut( SelectedControlName + 'Field', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'READONLY'
               __mvPut( SelectedControlName + 'ReadOnly', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'PROGRESSBAR'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  __mvPublic ( Result + 'RangeMin' )
                  __mvPut( Result + 'RangeMin', __mvGet ( PreviousValue + 'RangeMin' ) )
                  __mvXRelease( PreviousValue + 'RangeMin' )

                  __mvPublic ( Result + 'RangeMax' )
                  __mvPut( Result + 'RangeMax', __mvGet ( PreviousValue + 'RangeMax' ) )
                  __mvXRelease( PreviousValue + 'RangeMax' )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'BackColor' )
                  __mvPut( Result + 'BackColor', __mvGet ( PreviousValue + 'BackColor' ) )
                  __mvXRelease( PreviousValue + 'BackColor' )

                  __mvPublic ( Result + 'ForeColor' )
                  __mvPut( Result + 'ForeColor', __mvGet ( PreviousValue + 'ForeColor' ) )
                  __mvXRelease( PreviousValue + 'ForeColor' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'Smooth' )
                  __mvPut( Result + 'Smooth', __mvGet ( PreviousValue + 'Smooth' ) )
                  __mvXRelease( PreviousValue + 'Smooth' )

                  __mvPublic ( Result + 'Orientation' )
                  __mvPut( Result + 'Orientation', __mvGet ( PreviousValue + 'Orientation' ) )
                  __mvXRelease( PreviousValue + 'Orientation' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RANGEMAX'
               __mvPut( SelectedControlName + 'RangeMax', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'RANGEMIN'
               __mvPut( SelectedControlName + 'RangeMin', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'BACKCOLOR'
               __mvPut( SelectedControlName + 'BackColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'BackColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlBkColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FORECOLOR'
               __mvPut( SelectedControlName + 'ForeColor', Result )
               IF hb_ULeft( AllTrim( result ), 1 ) == '{' .AND. hb_URight( AllTrim( result ), 1 ) == '}'
                  SetProperty ( DesignForm, SelectedControlName, 'ForeColor', &Result )
               ELSEIF HMG_UPPER( AllTrim( result ) ) == 'NIL' .OR. Empty( result )
                  z := GetControlIndex ( SelectedControlName, DesignForm )
                  _HMG_aControlFontColor[ z ] := NIL
                  redrawwindow ( _HMG_aControlHandles[ z ] )
               ELSE
                  MsgStop( 'Invalid Color Array', 'HMG IDE' )
               ENDIF
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SMOOTH'
               __mvPut( SelectedControlName + 'Smooth', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ORIENTATION'

               IF ( HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL' ;
                     .AND. ;
                     HMG_UPPER ( AllTrim ( Result ) ) == 'HORIZONTAL' )

                  HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
                  WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

                  SetProperty ( DesignForm, SelectedControlName, 'Width', WidthTemp )
                  SetProperty ( DesignForm, SelectedControlName, 'Height', HeightTemp )

               ELSEIF ( HMG_UPPER ( AllTrim ( __mvGet( SelectedControlName + 'Orientation' ) ) ) == 'HORIZONTAL' ;
                     .AND. ;
                     HMG_UPPER ( AllTrim ( Result ) ) == 'VERTICAL' )

                  HeightTemp := GetProperty ( DesignForm, SelectedControlName, 'Width' )
                  WidthTemp := GetProperty ( DesignForm, SelectedControlName, 'Height' )

                  SetProperty ( DesignForm, SelectedControlName, 'Width', WidthTemp )
                  SetProperty ( DesignForm, SelectedControlName, 'Height', HeightTemp )

               ENDIF

               __mvPut( SelectedControlName + 'Orientation', Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'PLAYER'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  __mvPublic ( Result + 'File' )
                  __mvPut( Result + 'File', __mvGet ( PreviousValue + 'File' ) )
                  __mvXRelease( PreviousValue + 'File' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  __mvPublic ( Result + 'AutoSizeWindow' )
                  __mvPut( Result + 'AutoSizeWindow', __mvGet ( PreviousValue + 'AutoSizeWindow' ) )
                  __mvXRelease( PreviousValue + 'AutoSizeWindow' )

                  __mvPublic ( Result + 'AutoSizeMovie' )
                  __mvPut( Result + 'AutoSizeMovie', __mvGet ( PreviousValue + 'AutoSizeMovie' ) )
                  __mvXRelease( PreviousValue + 'AutoSizeMovie' )

                  __mvPublic ( Result + 'ErrorDlg' )
                  __mvPut( Result + 'ErrorDlg', __mvGet ( PreviousValue + 'ErrorDlg' ) )
                  __mvXRelease( PreviousValue + 'ErrorDlg' )

                  __mvPublic ( Result + 'Menu' )
                  __mvPut( Result + 'Menu', __mvGet ( PreviousValue + 'Menu' ) )
                  __mvXRelease( PreviousValue + 'Menu' )

                  __mvPublic ( Result + 'Open' )
                  __mvPut( Result + 'Open', __mvGet ( PreviousValue + 'Open' ) )
                  __mvXRelease( PreviousValue + 'Open' )

                  __mvPublic ( Result + 'PlayBar' )
                  __mvPut( Result + 'PlayBar', __mvGet ( PreviousValue + 'PlayBar' ) )
                  __mvXRelease( PreviousValue + 'PlayBar' )

                  __mvPublic ( Result + 'ShowAll' )
                  __mvPut( Result + 'ShowAll', __mvGet ( PreviousValue + 'ShowAll' ) )
                  __mvXRelease( PreviousValue + 'ShowAll' )

                  __mvPublic ( Result + 'ShowMode' )
                  __mvPut( Result + 'ShowMode', __mvGet ( PreviousValue + 'ShowMode' ) )
                  __mvXRelease( PreviousValue + 'ShowMode' )

                  __mvPublic ( Result + 'ShowName' )
                  __mvPut( Result + 'ShowName', __mvGet ( PreviousValue + 'ShowName' ) )
                  __mvXRelease( PreviousValue + 'ShowName' )

                  __mvPublic ( Result + 'ShowPosition' )
                  __mvPut( Result + 'ShowPosition', __mvGet ( PreviousValue + 'ShowPosition' ) )
                  __mvXRelease( PreviousValue + 'ShowPosition' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FILE'
               __mvPut( SelectedControlName + 'File', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'AUTOSIZEWINDOW'
               __mvPut( SelectedControlName + 'AUTOSIZEWINDOW', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'AUTOSIZEMOVIE'
               __mvPut( SelectedControlName + 'AUTOSIZEMOVIE', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'ERRORDLG'
               __mvPut( SelectedControlName + 'ERRORDLG', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'MENU'
               __mvPut( SelectedControlName + 'MENU', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'OPEN'
               __mvPut( SelectedControlName + 'OPEN', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PLAYBAR'
               __mvPut( SelectedControlName + 'PLAYBAR', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SHOWALL'
               __mvPut( SelectedControlName + 'SHOWALL', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SHOWMODE'
               __mvPut( SelectedControlName + 'SHOWMODE', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SHOWNAME'
               __mvPut( SelectedControlName + 'SHOWNAME', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'SHOWPOSITION'
               __mvPut( SelectedControlName + 'SHOWPOSITION', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'ACTIVEX'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'ProgId' )
                  __mvPut( Result + 'ProgId', __mvGet ( PreviousValue + 'ProgId' ) )
                  __mvXRelease( PreviousValue + 'ProgId' )


                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'PROGID'
               __mvPut( SelectedControlName + 'PROGID', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'WINDOW'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'IPADDRESS'
			*******************************************************

            IF PropertyName == 'ROW'

               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )


            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  SetProperty ( DesignForm, SelectedControlName, 'Value', Result )

                  __mvPublic ( Result + 'Value' )
                  __mvPut( Result + 'Value', __mvGet ( PreviousValue + 'Value' ) )
                  __mvXRelease( PreviousValue + 'Value' )

                  __mvPublic ( Result + 'FontName' )
                  __mvPut( Result + 'FontName', __mvGet ( PreviousValue + 'FontName' ) )
                  __mvXRelease( PreviousValue + 'FontName' )

                  __mvPublic ( Result + 'FontSize' )
                  __mvPut( Result + 'FontSize', __mvGet ( PreviousValue + 'FontSize' ) )
                  __mvXRelease( PreviousValue + 'FontSize' )

                  __mvPublic ( Result + 'ToolTip' )
                  __mvPut( Result + 'ToolTip', __mvGet ( PreviousValue + 'ToolTip' ) )
                  __mvXRelease( PreviousValue + 'ToolTip' )

                  __mvPublic ( Result + 'OnChange' )
                  __mvPut( Result + 'OnChange', __mvGet ( PreviousValue + 'OnChange' ) )
                  __mvXRelease( PreviousValue + 'OnChange' )

                  __mvPublic ( Result + 'OnGotFocus' )
                  __mvPut( Result + 'OnGotFocus', __mvGet ( PreviousValue + 'OnGotFocus' ) )
                  __mvXRelease( PreviousValue + 'OnGotFocus' )

                  __mvPublic ( Result + 'OnLostFocus' )
                  __mvPut( Result + 'OnLostFocus', __mvGet ( PreviousValue + 'OnLostFocus' ) )
                  __mvXRelease( PreviousValue + 'OnLostFocus' )

                  __mvPublic ( Result + 'FontBold' )
                  __mvPut( Result + 'FontBold', __mvGet ( PreviousValue + 'FontBold' ) )
                  __mvXRelease( PreviousValue + 'FontBold' )

                  __mvPublic ( Result + 'FontItalic' )
                  __mvPut( Result + 'FontItalic', __mvGet ( PreviousValue + 'FontItalic' ) )
                  __mvXRelease( PreviousValue + 'FontItalic' )

                  __mvPublic ( Result + 'FontStrikeOut' )
                  __mvPut( Result + 'FontStrikeOut', __mvGet ( PreviousValue + 'FontStrikeOut' ) )
                  __mvXRelease( PreviousValue + 'FontStrikeOut' )

                  __mvPublic ( Result + 'FontUnderLine' )
                  __mvPut( Result + 'FontUnderLine', __mvGet ( PreviousValue + 'FontUnderLine' ) )
                  __mvXRelease( PreviousValue + 'FontUnderLine' )

                  __mvPublic ( Result + 'TabStop' )
                  __mvPut( Result + 'TabStop', __mvGet ( PreviousValue + 'TabStop' ) )
                  __mvXRelease( PreviousValue + 'TabStop' )

                  __mvPublic ( Result + 'Visible' )
                  __mvPut( Result + 'Visible', __mvGet ( PreviousValue + 'Visible' ) )
                  __mvXRelease( PreviousValue + 'Visible' )

                  __mvPublic ( Result + 'HelpId' )
                  __mvPut( Result + 'HelpId', __mvGet ( PreviousValue + 'HelpId' ) )
                  __mvXRelease( PreviousValue + 'HelpId' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ELSEIF PropertyName == 'COL'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'WIDTH'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HEIGHT'
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VALUE'
               __mvPut( SelectedControlName + 'Value', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTNAME'
               __mvPut( SelectedControlName + 'FontName', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Result )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSIZE'
               __mvPut( SelectedControlName + 'FontSize', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, Val ( Result ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TOOLTIP'
               __mvPut( SelectedControlName + 'ToolTip', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTBOLD'
               __mvPut( SelectedControlName + 'FontBold', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTITALIC'
               __mvPut( SelectedControlName + 'FontItalic', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTUNDERLINE'
               __mvPut( SelectedControlName + 'FontUnderLine', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'FONTSTRIKEOUT'
               __mvPut( SelectedControlName + 'FontStrikeout', Result )
               SetProperty ( DesignForm, SelectedControlName, PropertyName, if ( HMG_UPPER( AllTrim(Result ) ) == '.T.', .T., .F. ) )
               RedrawWindow ( DesignForm )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'VISIBLE'
               __mvPut( SelectedControlName + 'Visible', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'TABSTOP'
               __mvPut( SelectedControlName + 'TabStop', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'HELPID'
               __mvPut( SelectedControlName + 'HelpId', Result )
               SelectControl ( SelectedControlName )

            ENDIF

			*******************************************************
         ELSEIF SelectedControlType == 'TIMER'
			*******************************************************

            IF PropertyName == 'INTERVAL'
               __mvPut( SelectedControlName + 'Interval', Result )
               SelectControl ( SelectedControlName )

            ELSEIF PropertyName == 'NAME'

               x := GetControlIndex ( SelectedControlName, DesignForm )
               IF x > 0

                  IF AllTrim( HMG_UPPER( PreviousValue ) ) == AllTrim( HMG_UPPER( Result ) )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  If ! IsControNameValid ( Result )
                     MsgStop( 'Control Name Duplicated or Invalid', 'HMG IDE' )
                     RedrawWindow ( DesignForm )
                     SelectControl ( SelectedControlName )
                     RETURN
                  ENDIF

                  __mvPublic ( Result + 'Interval' )
                  __mvPut( Result + 'Interval', __mvGet ( PreviousValue + 'Interval' ) )
                  __mvXRelease( PreviousValue + 'Interval' )

                  __mvPublic ( Result + 'Action' )
                  __mvPut( Result + 'Action', __mvGet ( PreviousValue + 'Action' ) )
                  __mvXRelease( PreviousValue + 'Action' )

                  _HMG_aControlNames[ x ] := Result

                  __mvPublic ( '_' + DesignForm + '_' + Result )
                  __mvPut( '_' + DesignForm + '_' + Result, x )

                  __mvPut( '_' + DesignForm + '_' + SelectedControlName, 0 )

                  SelectedControlName := Result

                  RedrawWindow ( DesignForm )
                  SelectControl ( SelectedControlName )

               ENDIF

            ENDIF

         ENDIF

      ELSE

			*-.*.-*.-*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.

         Properties.Grid_1.Item ( i ) := { aRow[ 1 ], Result }

         IF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'TITLE'
            SetProperty ( DesignForm, aRow[ 1 ], Result )


         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'VIRTUAL SIZED'

            IF AllTrim( ( HMG_UPPER ( Result ) ) ) == '.T.'
               SetPropertyVirtualOn()
            ELSEIF AllTrim( ( HMG_UPPER ( Result ) ) ) == '.F.'
               SetPropertyVirtualOff()
            ENDIF

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'VIRTUAL WIDTH'

            IF Val( Result ) <= GetProperty( DesignForm, 'Width' )
               Properties.Grid_1.Item ( i ) := { aRow[ 1 ], PreviousValue }
               MsgStop( 'Invalid Value', 'ERROR' )
               RETURN
            ELSE
               __mvPut ( DesignForm + 'VirtualWidth', Result )
               SetScrollRange ( DesignFormhandle, SB_HORZ, 0, Val( Result ) - GetProperty( DesignForm, 'Width' ), 1 )
            ENDIF

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'VIRTUAL HEIGHT'

            IF Val( Result ) <= GetProperty( DesignForm, 'Height' )
               Properties.Grid_1.Item ( i ) := { aRow[ 1 ], PreviousValue }
               MsgStop( 'Invalid Value', 'ERROR' )
               RETURN
            ELSE
               __mvPut ( DesignForm + 'VirtualHeight', Result )
               SetScrollRange ( DesignFormhandle, SB_VERT, 0, Val( Result ) - GetProperty( DesignForm, 'Height' ), 1 )
            ENDIF

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'WINDOWTYPE'
            __mvPut ( DesignForm + 'WindowType', Result )
            UpdateDesignFormProperties()

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'HELPBUTTON'
            __mvPut ( DesignForm + 'HelpButton', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'BACKCOLOR'
            __mvPut ( DesignForm + 'BackColor', Result )

            IF AllTrim( HMG_UPPER( Result ) ) <> 'NIL'

               SetWindowBackColor ( DesignFormHandle, &Result )

            ELSE

               nTemp := GetWindowSysColor()
               aTemp := { GetRed( nTemp ), GetGreen( nTemp ), GetBlue( nTemp ) }

               SetWindowBackColor ( DesignFormHandle, aTemp )

            ENDIF

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'NOTIFYICON'
            __mvPut ( DesignForm + 'NotifyIcon', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'NOTIFYTOOLTIP'
            __mvPut ( DesignForm + 'NotifyToolTip', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'CURSOR'
            __mvPut ( DesignForm + 'Cursor', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'ICON'
            __mvPut ( DesignForm + 'Icon', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'VISIBLE'
            __mvPut ( DesignForm + 'Visible', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'TOPMOST'
            __mvPut ( DesignForm + 'Topmost', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'AUTORELEASE'
            __mvPut ( DesignForm + 'AutoRelease', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'MAXBUTTON'
            __mvPut ( DesignForm + 'MaxButton', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'MINBUTTON'
            __mvPut ( DesignForm + 'MinButton', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'SIZABLE'
            __mvPut ( DesignForm + 'Sizable', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'SYSMENU'
            __mvPut ( DesignForm + 'SysMenu', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'TITLEBAR'
            __mvPut ( DesignForm + 'TitleBar', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'BREAK'
            __mvPut ( DesignForm + 'Break', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'FOCUSED'
            __mvPut ( DesignForm + 'Focused', Result )

         ELSEIF AllTrim( HMG_UPPER ( aRow[ 1 ] ) ) == 'GRIPPERTEXT'
            __mvPut ( DesignForm + 'GripperText', Result )

         ELSE

            SetProperty ( DesignForm, aRow[ 1 ], Val ( Result ) )

         ENDIF

         RedrawWindow ( DesignForm )
         SelectControl ( SelectedControlName )

      ENDIF

      Properties.Grid_1.VALUE := i
      Properties.Grid_1.SetFocus

   ELSE

      IF ! Empty ( SelectedControlName )
         SelectControl ( SelectedControlName )
      ENDIF

      Properties.Grid_1.VALUE := i
      Properties.Grid_1.SetFocus

   ENDIF

   DoMethod ( DesignForm, 'SetFocus' )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Open( Arg )
*------------------------------------------------------------------------------*
LOCAL Line, NextToken, cUserPropertyName, cUserPropertyValue
LOCAL CurrentRowSource, CurrentColumnFields, CurrentAllowDelete, CurrentBuffered, CurrentDynamicDisplay, CurrentWhen
LOCAL CurrentDynamicBackColor, CurrentDynamicForeColor, CurrentColumnWhen, CurrentColumnValid, CurrentColumnControls
LOCAL CurrentUpperCase, CurrentLowerCase, CurrentVertical, CurrentPictAlignment, CurrentCenterAlign, CurrentTransparent
LOCAL CurrentOnGotFocus, CurrentOnLostFocus, WinRow, WinCol, VirtualWidth, VirtualHeight
Local LineBuffer , Width , Height , char , Row , Col , Started , c , z , a , ControlType, x , FileName , Code , LineCount , i , w , b
Local CurrentRow
Local CurrentCol
Local CurrentWidth
Local CurrentHeight
Local CurrentCaption
Local CurrentAction
Local TimersLoaded := 0
Local TabPageCount := 0
Local CurrentItems
Local CurrentRangeMax
Local CurrentRangeMin
Local CurrentPicture
Local CurrentValue
Local CurrentWorkArea
Local CurrentFields
Local CurrentHeaders
Local CurrentWidths
Local CurrentOptions
Local CurrentCaptions
Local CurrentFile
Local CurrentAddress
Local Interval
Local aTemp
Local Value
Local Title
Local WindowType
Local CurrentFontName := 'Arial'
Local CurrentFontSize := 9
Local Fontname
Local FontSize
Local CurrentToolTip
Local CurrentOnChange
Local ToolTip
Local OnChange
Local OnGotFocus
Local OnLostFocus
Local CurrentInputmask
Local CurrentFormat
Local CurrentNumeric
Local CurrentDate
Local QuoteFlag
Local CurrentFontBold
Local CurrentFontItalic
Local CurrentFontUnderLine
Local CurrentFontStrikeout
Local CurrentHelpId
Local CurrentFlat
Local CurrentTabStop
Local CurrentVisible
Local CurrentField
Local CurrentBackColor
Local CurrentFontColor
Local CurrentOnDblClick
Local CurrentOnSave
Local CurrentSort
Local CurrentMultiSelect
Local CurrentOnEnter
Local CurrentOnDisplayChange
Local CurrentDisplayEdit
Local CurrentItemSource
Local CurrentValueSource
Local CurrentOnHeadClick
Local CurrentOnQueryData
Local CurrentAllowEdit
Local CurrentVirtual
Local CurrentLines
Local CurrentImage
Local CurrentJustify
Local CurrentItemCount
Local CurrentBoth
Local CurrentTop
Local CurrentLeft
Local CurrentNoTicks
Local CurrentWrap
Local CurrentReadOnly
Local CurrentIncrement
Local CurrentStretch
Local CurrentUpDown
Local CurrentShowNone
Local CurrentRightAlign
Local CurrentMaxLength
Local CurrentPassword
Local CurrentAutoSize
Local OnDblClick
Local NodeImages
Local ItemImages
Local HelpId
Local CurrentAllowAppend
Local CurrentreadOnlyFields
Local CurrentValid
Local CurrentValidMessages
Local CurrentLock
Local CurrentvScrollBar
Local CurrentSpacing
Local CurrentOpaque
Local CurrentMediaProp
Local CurrentSmooth
Local CurrentToday
Local CurrentTodayCircle
Local CurrentMultiLine
Local CurrentWeekNumbers
Local CurrentHandCursor
Local CurrentAutoPlay
Local CurrentCenter
Local ClauseArgument
Local Icon
Local CurrentMenuLevel := 0
Local _hmgide_MainMenuProcessing := .F.
Local _hmgide_ContextMenuProcessing := .F.
Local _hmgide_StatusBarProcessing := .F.
Local _hmgide_ToolBarProcessing := .F.
Local _hmgide_NotifyMenuProcessing := .F.
Local _hmgide_DropDownMenuProcessing := .F.
Local _hmgide_SplitBoxProcessing := .F.
Local CurrentPageImages
Local CurrentTabName
local _hmgide_CurrentDropDownMenu := ''
local CURRENTHSCROLLBAR
Local CurrentShowHeaders
Local cTmpName
local CurrentHorizontal
Local CurrentProgId

Local CurrentInputItems
Local CurrentDisplayItems

Local CurrentDroppedWidth
Local CurrentOnDropDown
Local CurrentOnCloseUp

Local CurrentHeaderImages
Local t
Local lUserControlActive := .F.
Local cUserControlName := ''
Local cCurrentComponentType := ''
Local nCurrentComponentSubType := 0
Local CurrentDragItems
Local CurrentCellNavigation //:= .F.
/*
Local CurrentDisabledBackColor
Local CurrentDisabledFontColor
*/
Local xWidth
Local xHeight

Local CurrentLockColumns

Private Name
Private MacroVar

_hmgide_CurrentMainMenu := ''
_hmgide_CurrentContextMenu := ''
_hmgide_CurrentNotifyMenu := ''
_hmgide_CurrentStatusBar := ''
_hmgide_CurrentToolBar := ''
_hmgide_CurrentToolBar := ''
_hmgide_aDropDownMenus := {}
_hmgide_CurrentSplitBox := ''

*	1: CHECKBUTTON
*	2: PROGRESSBAR
*	3: PLAYER
*	4: IPADDRESS
*	5: TIMER
*	6: HYPERLINK
*	7: ACTIVEX

	InitControlCounters()

	*msginfo(arg)

	CurrentControl := 1
	SelectedControlName := ''
	SelectedControlIndex := 0

	If VALTYPE ( Arg ) == 'C'
		FileName := Arg
	Else
		FileName := Getfile ( { {'HMG Forms','*.fmg'} } , 'Open File' , , .f. , .f. )
	EndIf

	If Empty (FileName)
		Return
	Endif

	Code := HB_MEMOREAD ( FileName )

	LineCount := MlCount (Code)

	LineBuffer := ''

	loading.progress_1.rangemax := LineCount
	loading.show

	For i := 1 To LineCount

		Line := ALLTRIM ( MemoLine ( Code , 1024 , i , 4 , .t. ) )

		loading.progress_1.value := i

		* Join Splitted Lines

		if HB_URIGHT ( Line , 1 ) == ';'

			Line := HB_ULEFT ( Line , HMG_LEN ( Line ) - 1 ) + ' '

			LineBuffer := LineBuffer + Line
			Loop

		Else

			if ! Empty ( LineBuffer )

				Line := LineBuffer + Line
				LineBuffer := ''

			EndIf

		Endif

		*

		Line := RemoveExtraSpaces (Line)

		// PROCESS USER COMPONENTS

		If lUserControlActive == .F.

			For t := 1 To HMG_LEN (aComponentNames)

				If HMG_UPPER( Line ) = 'DEFINE ' + ALLTRIM(HMG_UPPER(aComponentNames[t])) + ' '

					cUserControlName := ALLTRIM ( HB_USUBSTR ( Line , HB_UTF8RAT ( ' ' , Line ) , 128 ) )

					cCurrentComponentType := ALLTRIM(HMG_UPPER(aComponentNames[t]))

					nCurrentComponentSubType := t

					lUserControlActive := .T.

					Exit

				EndIf

			Next t

			If lUserControlActive == .T.

				Loop

			EndIf

		Else

			If HMG_UPPER (Line) = 'ROW'
				CurrentRow := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			ElseIf HMG_UPPER (Line) = 'COL'
				CurrentCol := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			ElseIf HMG_UPPER ( HB_ULEFT ( Line , 6 ) ) == 'WIDTH '
				CurrentWidth := VAL ( HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

			ElseIf HMG_UPPER (Line) = 'HEIGHT'
				CurrentHeight := VAL ( HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

			ElseIf HMG_UPPER( Line ) = 'END ' + ALLTRIM(HMG_UPPER(cCurrentComponentType))

				@ CurrentRow , CurrentCol LABEL &cUserControlName ;
					OF &DesignForm ;
					VALUE cUserControlName ACTION SelectControl (This.Name) ;
					WIDTH CurrentWidth HEIGHT CurrentHeight ;
					FONT 'ARIAL' SIZE 9 ;
					BORDER

				_HMG_aControlMiscData1 [ GetControlIndex ( cUserControlName , DesignForm ) ][ 1 ] := 10 + nCurrentComponentSubType

				lUserControlActive		:= .F.
				cCurrentComponentType		:= ''
				cUserControlName		:= ''
				nCurrentComponentSubType	:= 0

				Loop

			Else

				cUserPropertyName := ALLTRIM ( HB_ULEFT ( Line , HB_UAT ( ' ' , Line ) ) )
				cUserPropertyValue := ALLTRIM ( HB_USUBSTR ( Line , HB_UTF8RAT ( ' ' , Line ) , 128 ) )

				__MVPUBLIC ( cUserControlName + cUserPropertyName )

				__MVPUT ( cUserControlName + cUserPropertyName , cUserPropertyValue )

			EndIf

		EndIf

		//


		// DEFINE COMMAND

		If	HMG_UPPER (Line) = 'DEFINE MAIN MENU'

			_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Line + CRLF
			CurrentMenuLevel := 1

			_hmgide_MainMenuProcessing	:= .T.
			_hmgide_ContextMenuProcessing	:= .F.
			_hmgide_NotifyMenuProcessing	:= .F.
			_hmgide_DropDownMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE TOOLBAR'

			if _hmgide_SplitBoxProcessing == .T.
				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

				cTmpName := ALLTRIM ( HB_USUBSTR ( Line , 16 , 255 ) )
				cTmpName := ALLTRIM ( HB_ULEFT ( cTmpName , HB_UAT( ' ' , cTmpName ) ) )

				__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' )
				__MVPUT ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' , Space (8) + Line + CRLF )

			else
				_hmgide_CurrentToolBar := _hmgide_CurrentToolBar + Space(4) + Line + CRLF
			endif

			_hmgide_ToolBarProcessing := .T.

		ElseIf	HMG_UPPER (Line) = 'BUTTON '

			if _hmgide_ToolBarProcessing == .T.

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + Line + CRLF
					__MVPUT ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' , __MVGET ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' ) + Space (12) + Line + CRLF )
				else
					_hmgide_CurrentToolBar := _hmgide_CurrentToolBar + Space(8) + Line + CRLF
				EndIf

			EndIf

		ElseIf	HMG_UPPER (Line) = 'END TOOLBAR'

			if _hmgide_ToolBarProcessing == .T.
				_hmgide_ToolBarProcessing := .F.

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF
					__MVPUT ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' , __MVGET ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' ) + Space (8) + Line + CRLF )
				else
					_hmgide_CurrentToolBar := _hmgide_CurrentToolBar + Space(4) + Line + CRLF
				endif

				CurrentMenuLevel := 0
			endif

		ElseIf	HMG_UPPER (Line) = 'DEFINE CONTEXT MENU'

			_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(4) + Line + CRLF

			_hmgide_ContextMenuProcessing	:= .T.
			_hmgide_MainMenuProcessing	:= .F.
			_hmgide_NotifyMenuProcessing	:= .F.
			_hmgide_DropDownMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE NOTIFY MENU'

			_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(4) + Line + CRLF

			_hmgide_NotifyMenuProcessing	:= .T.
			_hmgide_ContextMenuProcessing	:= .F.
			_hmgide_MainMenuProcessing	:= .F.
			_hmgide_DropDownMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE DROPDOWN MENU'

			_hmgide_CurrentDropDownMenu := ''

			_hmgide_CurrentDropDownMenu := _hmgide_CurrentDropDownMenu + Space(4) + Line + CRLF

			_hmgide_DropDownMenuProcessing	:= .T.
			_hmgide_NotifyMenuProcessing	:= .F.
			_hmgide_ContextMenuProcessing	:= .F.
			_hmgide_MainMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'END MENU'

			if _hmgide_MainMenuProcessing == .T.
				_hmgide_MainMenuProcessing := .F.
				_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
			endif

			if _hmgide_ContextMenuProcessing == .T.
				_hmgide_ContextMenuProcessing := .F.
				_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
			endif

			if _hmgide_NotifyMenuProcessing == .T.
				_hmgide_NotifyMenuProcessing := .F.
				_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
			endif

			if _hmgide_DropDownMenuProcessing == .T.
				_hmgide_DropDownMenuProcessing := .F.
				_hmgide_CurrentDropDownMenu := _hmgide_CurrentDropDownMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
				aadd ( _hmgide_aDropDownMenus , _hmgide_CurrentDropDownMenu )
			endif

		ElseIf	HMG_UPPER (Line) = 'DEFINE POPUP '

			_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF
			CurrentMenuLevel++

		ElseIf	HMG_UPPER (Line) = 'MENUITEM '

			if _hmgide_MainMenuProcessing == .T.
				_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF
			EndIf

			if _hmgide_ContextMenuProcessing == .T.
				_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(8) + Line + CRLF
			EndIf

			if _hmgide_NotifyMenuProcessing == .T.
				_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(8) + Line + CRLF
			EndIf

			if _hmgide_DropDownMenuProcessing == .T.
				_hmgide_CurrentDropDownMenu := _hmgide_CurrentDropDownMenu + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'SEPARATOR'

			if _hmgide_MainMenuProcessing == .T.
				_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF
			endif

			if _hmgide_ContextMenuProcessing == .T.
				_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(4) + Line + CRLF
			EndIf

			if _hmgide_NotifyMenuProcessing == .T.
				_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(4) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'END POPUP'

			CurrentMenuLevel--
			_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF

		ElseIf	HMG_UPPER (Line) = 'DEFINE STATUSBAR'

			_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(4) + Line + CRLF

			_hmgide_StatusBarProcessing := .T.

		ElseIf	HMG_UPPER (Line) = 'STATUSITEM '

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'CLOCK'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'DATE'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

			If	ControlType == 'TEXTBOX'

				CurrentDate := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if ALLTRIM(HMG_UPPER(CurrentDate)) == '.T.'
					__MVPUT( Name + 'DataType' , 'DATE' )
				endif

			EndIf

		ElseIf	HMG_UPPER (Line) = 'KEYBOARD'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'END STATUSBAR'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(4) + Line + CRLF
				_hmgide_StatusBarProcessing := .F.
			EndIf

		ElseIf	HMG_UPPER (Line) = 'DEFINE SPLITBOX'

			_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(4) + Line + CRLF

			_hmgide_SplitBoxProcessing := .T.

		ElseIf	HMG_UPPER (Line) = 'LOAD WINDOW'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				ControlType := 'WINDOW'

				* Determine Name

				Name := ''
				Started := .F.

				For z := 13 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Name := Name + Char
					EndIf
				Next z

				* Determine Row

				Row := ''
				a := HB_UAT ( " AT " , HMG_UPPER (Line) )

				if a > 0

					Started := .F.

					For z := a + 4 To HMG_LEN ( Line )
						char := HB_USUBSTR ( Line , z , 1 )
						if char == ' '
							if Started
								Exit
							EndIf
						Else
							if ! Started
								Started := .T.
							EndIf
							Row := Row + Char
						EndIf
					Next z

				EndIf

				* Determine Col

				Col := ''
				a := HB_UAT ( " , " , HMG_UPPER (Line) )

				if a > 0

					Started := .F.

					For z := a + 3 To HMG_LEN ( Line )
						char := HB_USUBSTR ( Line , z , 1 )
						if char == ' '
							if Started
								Exit
							EndIf
						Else
							if ! Started
								Started := .T.
							EndIf
							Col := Col + Char
						EndIf
					Next z

				EndIf

				* Determine Width

				xWidth := ''
				a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

				if a > 0

					Started := .F.

					For z := a + 7 To HMG_LEN ( Line )
						char := HB_USUBSTR ( Line , z , 1 )
						if char == ' '
							if Started
								Exit
							EndIf
						Else
							if ! Started
								Started := .T.
							EndIf
							xWidth := xWidth + Char
						EndIf
					Next z

				EndIf

				* Determine Height

				//xHeight := ''
				a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

				if a > 0
					xHeight := HB_USUBSTR ( Line , a + 7 , 255 )
				Else
					xHeight := ''
				EndIf


				@ VAL(Row)  , VAL(Col) LABEL &Name ;
					OF &DesignForm ;
					VALUE Name ACTION SelectControl (This.Name) ;
					WIDTH VAL(xWidth) HEIGHT VAL(xHeight) ;
					BORDER

				w := GetControlIndex ( Name , DesignForm )
				_HMG_aControlMiscData1 [w][1] := 8

				CurrentWidth	:= -1
				CurrentHeight	:= -1

			endif


		ElseIf	HMG_UPPER (Line) = 'END SPLITBOX'

			_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(4) + Line + CRLF

			_hmgide_SplitBoxProcessing := .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE BUTTON'
			ControlType := 'BUTTON'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , Name )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , 'Nil' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Flat' )
			__MVPUT( Name + 'Flat' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'Picture' )
			__MVPUT( Name + 'Picture' , '' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'PictAlignment' )
			__MVPUT( Name + 'PictAlignment' , 'TOP' )
			__MVPUBLIC ( Name + 'MultiLine' )
			__MVPUT( Name + 'MultiLine' , '.F.' )


			DEFINE BUTTON &Name
			PARENT &DesignForm
			ON GOTFOCUS SelectControl( This.Name )

		ElseIf	HMG_UPPER (Line) = 'DEFINE CHECKBOX'
			ControlType := 'CHECKBOX'
			Name := HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 )
			DEFINE CHECKBOX &Name
			PARENT &DesignForm
			ONCHANGE SelectControl (This.Name)

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , Name )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '.F.' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE LISTBOX'
			ControlType := 'LISTBOX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE LISTBOX &Name
				PARENT &DesignForm
				ITEMS { Name }
				ON GOTFOCUS SelectControl ( This.Name )

			endif

			__MVPUBLIC ( Name + 'Items' )
			__MVPUT( Name + 'Items' , '{""}' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Sort' )
			__MVPUT( Name + 'Sort' , '.F.' )
			__MVPUBLIC ( Name + 'MultiSelect' )
 			__MVPUT( Name + 'MultiSelect' , '.F.' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )
			__MVPUBLIC ( Name + 'DragItems' )
			__MVPUT( Name + 'DragItems' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE COMBOBOX'
			ControlType := 'COMBOBOX'
			Name := HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE COMBOBOX &Name
				PARENT &DesignForm
				ITEMS { Name }
				VALUE 1
				ONGOTFOCUS SelectControl ( This.Name )

			endif

			__MVPUBLIC ( Name + 'Items' )
			__MVPUT( Name + 'Items' , '{""}' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Sort' )
			__MVPUT( Name + 'Sort' , '.F.' )
			__MVPUBLIC ( Name + 'OnEnter' )
			__MVPUT( Name + 'OnEnter' , 'Nil' )
			__MVPUBLIC ( Name + 'OnDisplayChange' )
			__MVPUT( Name + 'OnDisplayChange' , 'Nil' )
			__MVPUBLIC ( Name + 'DisplayEdit' )
			__MVPUT( Name + 'DisplayEdit' , '.F.' )
			__MVPUBLIC ( Name + 'ValueSource' )
			__MVPUT( Name + 'ValueSource' , '' )
			__MVPUBLIC ( Name + 'ItemSource' )
			__MVPUT( Name + 'ItemSource' , 'Nil' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )

			__MVPUBLIC ( Name + 'DroppedWidth' )
			__MVPUT( Name + 'DroppedWidth' , 'Nil' )
			__MVPUBLIC ( Name + 'Image' )
			__MVPUT( Name + 'Image' , 'Nil' )
			__MVPUBLIC ( Name + 'OnDropDown' )
			__MVPUT( Name + 'OnDropDown' , 'Nil' )
			__MVPUBLIC ( Name + 'OnCloseUp' )
			__MVPUT( Name + 'OnCloseUp' , 'Nil' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE CHECKBUTTON'
			ControlType := 'CHECKBUTTON'
			Name := HB_USUBSTR ( Line , 20 , HMG_LEN (Line) - 19 )
			DEFINE CHECKBUTTON &Name
			PARENT &DesignForm
			ONCHANGE SelectControl (This.name)
			CAPTION Name

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , Name )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '.F.' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Picture' )
			__MVPUT( Name + 'Picture' , '' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE GRID'
			ControlType := 'GRID'
			Name := HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE GRID &Name
				PARENT &DesignForm
				ONGOTFOCUS SelectControl(This.name)
				HEADERS { '' , '' , '' }
				WIDTHS { 90 , 90 , 90 }
				ITEMS { { Name , '' , '' } }

			endif

			__MVPUBLIC ( Name + 'Items' )
			__MVPUT( Name + 'Items' , '{""}' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'Widths' )
			__MVPUT( Name + 'Widths' , '{}' )
			__MVPUBLIC ( Name + 'Headers' )
			__MVPUT( Name + 'Headers' , '{}' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , 'Nil' )
			__MVPUBLIC ( Name + 'OnHeadClick' )
			__MVPUT( Name + 'OnHeadClick' , 'Nil' )
			__MVPUBLIC ( Name + 'OnQueryData' )
			__MVPUT( Name + 'OnQueryData' , 'Nil' )
			__MVPUBLIC ( Name + 'MultiSelect' )
			__MVPUT( Name + 'MultiSelect' , '.F.' )
			__MVPUBLIC ( Name + 'AllowEdit' )
			__MVPUT( Name + 'AllowEdit' , '.F.' )
			__MVPUBLIC ( Name + 'Virtual' )
			__MVPUT( Name + 'Virtual' , '.F.' )
			__MVPUBLIC ( Name + 'Lines' )
			__MVPUT( Name + 'Lines' , '.T.' )
			__MVPUBLIC ( Name + 'Image' )
			__MVPUT( Name + 'Image' , 'Nil' )
			__MVPUBLIC ( Name + 'Justify' )
			__MVPUT( Name + 'Justify' , 'Nil' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'ItemCount' )
			__MVPUT( Name + 'ItemCount' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )

			__MVPUBLIC ( Name + 'DynamicBackColor' )
			__MVPUT( Name + 'DynamicBackColor' , 'Nil' )

			__MVPUBLIC ( Name + 'DynamicForeColor' )
			__MVPUT( Name + 'DynamicForeColor' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnWhen' )
			__MVPUT( Name + 'ColumnWhen' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnValid' )
			__MVPUT( Name + 'ColumnValid' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnControls' )
			__MVPUT( Name + 'ColumnControls' , 'Nil' )

			__MVPUBLIC ( Name + 'ShowHeaders' )
			__MVPUT( Name + 'ShowHeaders' , '.T.' )

			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )

			__MVPUBLIC ( Name + 'HeaderImages' )
			__MVPUT( Name + 'HeaderImages' , 'Nil' )

			__MVPUBLIC ( Name + 'CellNavigation' )
			__MVPUT( Name + 'CellNavigation' , '.F.' )



			__MVPUBLIC ( Name + 'RowSource' )
			__MVPUT( Name + 'RowSource' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnFields' )
			__MVPUT( Name + 'ColumnFields' , 'Nil' )

			__MVPUBLIC ( Name + 'AllowAppend' )
			__MVPUT( Name + 'AllowAppend' , '.F.' )

			__MVPUBLIC ( Name + 'AllowDelete' )
			__MVPUT( Name + 'AllowDelete' , '.F.' )

			__MVPUBLIC ( Name + 'Buffered' )
			__MVPUT( Name + 'Buffered' , '.F.' )

			__MVPUBLIC ( Name + 'DynamicDisplay' )
			__MVPUT( Name + 'DynamicDisplay' , '.F.' )

			__MVPUBLIC ( Name + 'OnSave' )
			__MVPUT( Name + 'OnSave' , 'Nil' )

			__MVPUBLIC ( Name + 'LockColumns' )
			__MVPUT( Name + 'LockColumns' , 'Nil' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE SLIDER'
			ControlType := 'SLIDER'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )
			DEFINE SLIDER &Name
			PARENT &DesignForm
			ONCHANGE SelectControl (This.Name)
			RANGEMIN 1
			RANGEMAX 10

			__MVPUBLIC ( Name + 'RangeMax' )
			__MVPUT( Name + 'RangeMax' , '1' )
			__MVPUBLIC ( Name + 'RangeMin' )
			__MVPUT( Name + 'RangeMin' , '10' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'TickMarks' )
			__MVPUT( Name + 'TickMarks' , 'BOTTOM' )
			__MVPUBLIC ( Name + 'Orientation' )
			__MVPUT( Name + 'Orientation' , 'HORIZONTAL' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE SPINNER'
			ControlType := 'SPINNER'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )
			DEFINE SPINNER &Name
			PARENT &DesignForm
			VALUE 5
			RANGEMIN 1
			RANGEMAX 10
			ONGOTFOCUS SelectControl (This.Name)

			__MVPUBLIC ( Name + 'RangeMax' )
			__MVPUT( Name + 'RangeMax' , '1' )
			__MVPUBLIC ( Name + 'RangeMin' )
			__MVPUT( Name + 'RangeMin' , '10' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'Wrap' )
			__MVPUT( Name + 'Wrap' , '.F.' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )

			__MVPUBLIC ( Name + 'Increment' )
			__MVPUT( Name + 'Increment' , '1' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE IMAGE'
			ControlType := 'IMAGE'
			Name := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )
			DEFINE IMAGE &Name
			PARENT &DesignForm
			ACTION SelectControl (This.name)
			PICTURE 'demo'
			STRETCH .T.

			__MVPUBLIC ( Name + 'Picture' )
			__MVPUT( Name + 'Picture' , '' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Stretch' )
			__MVPUT( Name + 'Stretch' , '.F.' )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TREE'
			ControlType := 'TREE'

			* Determine Name

			Name := ''
			Started := .F.

			For z := 13 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Name := Name + Char
				EndIf
			Next z

			* Determine Row & Col

			a := HB_UAT ( " AT " , HMG_UPPER (Line) )
			c := HB_UAT ( "," , HMG_UPPER (Line) )
			Row := HB_USUBSTR ( Line , a + 4 , c - a - 4 )
			Col := ''
			Started := .F.

			For z := c + 1 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Col := Col + Char
				EndIf
			Next z

			* Determine Width

			a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			if a > 0

				Width := ''
				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Width := Width + Char
					EndIf
				Next z

			EndIf

			* Determine Height

			a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				Height := ''
				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Height := Height + Char
					EndIf
				Next z

			endif

			* Determine Value

			Value := ''

			a := HB_UAT ( " VALUE " , HMG_UPPER (Line) )

			if a > 0

				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Value := Value + Char
					EndIf
				Next z

			endif

			__MVPUBLIC ( Name + 'Value' )

			If Empty ( value )
				__MVPUT( Name + 'Value' , '0' )
			Else
				__MVPUT( Name + 'Value' , Value )
			EndIf

			* Determine FontName

			a := HB_UAT ( " FONT " , HMG_UPPER (Line) )

			FontName := ''

			if a > 0

				Started := .F.

				For z := a + 5 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontName := FontName + Char
					EndIf
				Next z

			endif

			Fontname := ALLTRIM ( FontName )

			if	HB_ULEFT ( Fontname , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( Fontname , 1 ) == "'"

				Fontname := HB_URIGHT ( Fontname , HMG_LEN( Fontname ) - 1 )

			EndIf

			if	HB_URIGHT ( Fontname , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( Fontname , 1 ) == "'"

				Fontname := HB_ULEFT ( Fontname , HMG_LEN( Fontname ) - 1 )

			EndIf

			if Empty ( FontName )
				FontName := 'Arial'
			EndIf

			* Determine FontSize

			a := HB_UAT ( " SIZE " , HMG_UPPER (Line) )

			FontSize := ''

			if a > 0

				Started := .F.

				For z := a + 5 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontSize := FontSize + Char
					EndIf
				Next z

			endif

			FontSize := ALLTRIM ( FontSize )

			if Empty ( FontSize )
				FontSize := '9'
			EndIf

			__MVPUBLIC( Name + 'FontName' )
			__MVPUBLIC( Name + 'FontSize' )

			__MVPUT( Name + 'FontName' , FontName )
			__MVPUT( Name + 'FontSize' ,  FontSize )

			* Determine ToolTip

			a := HB_UAT ( " TOOLTIP " , HMG_UPPER (Line) )

			ToolTip := ''

			if a > 0

				Started := .F.

				For z := a + 9 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						if Started
							Exit
						Else
							Started := .T.
						EndIf
					Else
						if Started
							ToolTip := ToolTip + Char
						EndIf
					EndIf
				Next z

			EndIf

			ToolTip := ALLTRIM(ToolTip)

			if	HB_ULEFT ( ToolTip , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( ToolTip , 1 ) == "'"

				ToolTip := HB_URIGHT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			if	HB_URIGHT ( ToolTip, 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( ToolTip , 1 ) == "'"

				ToolTip := HB_ULEFT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			ToolTip := ALLTRIM(ToolTip)

			* Determine OnGotFocus

			a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

			OnGotFocus := ''

			if a > 0

				//Started := .F.

				For z := a + 13 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 9 )
					if NextToken == 'ON CHANGE'
						Exit
					endif

					NextToken := HB_USUBSTR ( Line , z , 12 )
					if NextToken == 'ON LOSTFOCUS'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnGotFocus := OnGotFocus + Char

				Next z

				OnGotFocus := ALLTRIM(OnGotFocus)

				if Empty (OnGotFocus)
					OnGotFocus := 'Nil'
				EndIf

			EndIf

			* Determine OnChange

			a := HB_UAT ( " ON CHANGE " , HMG_UPPER (Line) )

			OnChange := ''

			if a > 0

				//Started := .F.

				For z := a + 11 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 12 )

					if NextToken == 'ON LOSTFOCUS'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnChange := OnChange + Char

				Next z

				OnChange := ALLTRIM(OnChange)

				if Empty (OnChange)
					OnChange := 'Nil'
				EndIf

			EndIf

			* Determine OnLostFocus

			a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

			OnLostFocus := ''

			if a > 0

				//Started := .F.

				For z := a + 14 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 11 )

					if NextToken == 'ON DBLCLICK'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnLostFocus := OnLostFocus + Char

				Next z

				OnLostFocus := ALLTRIM(OnLostFocus)

				if Empty (OnLostFocus)
					OnLostFocus := 'Nil'
				EndIf

			EndIf

			* Determine OnDblClick

			a := HB_UAT ( " ON DBLCLICK " , HMG_UPPER (Line) )

			OnDblClick := ''

			if a > 0

				//Started := .F.

				For z := a + 13 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 10 )

					if NextToken == 'NODEIMAGES'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnDblClick := OnDblClick + Char

				Next z

				OnDblClick := ALLTRIM(OnDblClick)

				if Empty (OnDblClick)
					OnDblClick := 'Nil'
				EndIf

			EndIf

			* Determine NodeImages

			a := HB_UAT ( " NODEIMAGES " , HMG_UPPER (Line) )

			NodeImages := ''

			if a > 0

				//Started := .F.

				For z := a + 12 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 10 )

					if NextToken == 'ITEMIMAGES'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					NodeImages := NodeImages + Char

				Next z

				NodeImages := ALLTRIM(NodeImages)

				if Empty (NodeImages)
					NodeImages := 'Nil'
				EndIf

			EndIf

			* Determine ItemImages

			a := HB_UAT ( " ITEMIMAGES " , HMG_UPPER (Line) )

			ItemImages := ''

			if a > 0

				//Started := .F.

				For z := a + 12 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 12 )
					if NextToken == 'NOROOTBUTTON'
						Exit
					endif
					NextToken := HB_USUBSTR ( Line , z , 7 )
					if NextToken == 'ITEMIDS'
						Exit
					endif
					NextToken := HB_USUBSTR ( Line , z , 6 )
					if NextToken == 'HELPID'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					ItemImages := ItemImages + Char

				Next z

				ItemImages := ALLTRIM(ItemImages)

				if Empty (ItemImages)
					ItemImages := 'Nil'
				EndIf

			EndIf

			* Determine RootButton

			__MVPUBLIC ( Name + 'RootButton' )

			a := HB_UAT ( " NOROOTBUTTON" , HMG_UPPER (Line) )

			if a != 0
				__MVPUT( Name + 'RootButton' , '.F.' )
			else
				__MVPUT( Name + 'RootButton' , '.T.' )
			endif

			* Determine ItemIds

			__MVPUBLIC ( Name + 'ItemIds' )

			a := HB_UAT ( " ITEMIDS" , HMG_UPPER (Line) )

			if a != 0
				__MVPUT( Name + 'ItemIds' , '.T.' )
			else
				__MVPUT( Name + 'ItemIds' , '.F.' )
			endif

			* Determine HelpId

			a := HB_UAT ( " HELPID " , HMG_UPPER (Line) )

			HelpId := ''

			if a > 0

				//Started := .F.

				For z := a + 8 To HMG_LEN ( Line )

					char := HB_USUBSTR ( Line , z , 1 )

					HelpId := HelpId + Char

				Next z

				HelpId := ALLTRIM(HelpId)

				if Empty (HelpId)
					HelpId := 'Nil'
				EndIf

			EndIf

			*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , HelpId )

			__MVPUBLIC ( Name + 'ItemImages' )
			__MVPUT( Name + 'ItemImages' , ItemImages )

			__MVPUBLIC ( Name + 'NodeImages' )
			__MVPUT( Name + 'NodeImages' , NodeImages )

			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , OnDblClick )

			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , ToolTip )

			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , OnGotFocus )

			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , OnChange )

			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , OnLostFocus )

			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUBLIC ( Name + 'FontUnderLine' )


			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

				__MVPUBLIC ( Name + 'Row' )
				__MVPUT( Name + 'Row' , 'Nil' )

				__MVPUBLIC ( Name + 'Col' )
				__MVPUT( Name + 'Col' , 'Nil' )

				__MVPUBLIC ( Name + 'Break' )
				__MVPUT( Name + 'Break' , '.F.' )

				__MVPUBLIC ( Name + 'Width' )
				__MVPUT( Name + 'Width' , Width )
				__MVPUBLIC ( Name + 'Height' )
				__MVPUT( Name + 'Height' , Height )

			else

				*

				if	Empty (Width) .and. Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				ElseIf Empty (Width) .and. !Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) HEIGHT VAL ( Height )  FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				ElseIf !Empty (Width) .and. Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) WIDTH VAL ( Width )  FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				ElseIf !Empty (Width) .and. !Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) WIDTH VAL ( Width ) HEIGHT VAL ( Height )  FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				EndIf

				NODE Name
				END NODE

			endif

			* Determine Bold
			a := HB_UAT ( " BOLD" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'FontBold' , '.T.' )
				SetProperty ( DesignForm , Name , 'FontBold' , .T. )
			else
				__MVPUT( Name + 'FontBold' , '.F.' )
			endif
			* Determine Italic
			a := HB_UAT ( " ITALIC" , HMG_UPPER (Line) )
			if a > 0
				SetProperty ( DesignForm , Name , 'FontItalic' , .T. )
				__MVPUT( Name + 'FontItalic' , '.T.' )
			else
				__MVPUT( Name + 'FontItalic' , '.F.' )
			endif
			* Determine UnderLine
			a := HB_UAT ( " UNDERLINE" , HMG_UPPER (Line) )
			if a > 0
				SetProperty ( DesignForm , Name , 'FontUnderLine' , .T. )
				__MVPUT( Name + 'FontUnderLine' , '.T.' )
			else
				__MVPUT( Name + 'FontUnderLine' , '.F.' )
			endif
			* Determine StrikeOut
			a := HB_UAT ( " STRIKEOUT" , HMG_UPPER (Line) )
			if a > 0
				SetProperty ( DesignForm , Name , 'FontStrikeOut' , .T. )
				__MVPUT( Name + 'FontStrikeOut' , '.T.' )
			else
				__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			endif

		ElseIf	HMG_UPPER (Line) = 'DEFINE DATEPICKER'
			ControlType := 'DATEPICKER'
			Name := HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 )
			DEFINE DATEPICKER &Name
			PARENT &DesignForm
			ONGOTFOCUS SelectControl(This.Name)

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , 'CTOD(  /  /  )' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'OnEnter' )
			__MVPUT( Name + 'OnEnter' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'ShowNone' )
			__MVPUT( Name + 'ShowNone' , '.F.' )
			__MVPUBLIC ( Name + 'UpDown' )
			__MVPUT( Name + 'UpDown' , '.F.' )
			__MVPUBLIC ( Name + 'RightAlign' )
			__MVPUT( Name + 'RightAlign' , '.F.' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TEXTBOX'
			ControlType := 'TEXTBOX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )
			DEFINE TEXTBOX &Name
			PARENT &DesignForm
			VALUE Name
			ON GOTFOCUS SelectControl( This.Name )

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'InputMask' )
			__MVPUT( Name + 'InputMask' , '' )
			__MVPUBLIC ( Name + 'Format' )
			__MVPUT( Name + 'Format' , '' )
			__MVPUBLIC ( Name + 'DataType' )
			__MVPUT( Name + 'DataType' , 'CHARACTER' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'OnEnter' )
			__MVPUT( Name + 'OnEnter' , 'Nil' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )
			__MVPUBLIC ( Name + 'RightAlign' )
			__MVPUT( Name + 'RightAlign' , '.F.' )
			__MVPUBLIC ( Name + 'MaxLength' )
			__MVPUT( Name + 'MaxLength' , 'Nil' )
			__MVPUBLIC ( Name + 'Password' )
			__MVPUT( Name + 'Password' , '.F.' )
			__MVPUBLIC ( Name + 'CaseConvert' )
			__MVPUT( Name + 'CaseConvert' , 'NONE' )
/*
			__MVPUBLIC ( Name + 'DisabledBackColor' )
			__MVPUT( Name + 'DisabledBackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'DisabledFontColor' )
			__MVPUT( Name + 'DisabledFontColor' , 'Nil' )
*/

		ElseIf	HMG_UPPER (Line) = 'DEFINE EDITBOX'
			ControlType := 'EDITBOX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )

			currenthscrollbar := ''
			currentvscrollbar := ''

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE EDITBOX &Name
				PARENT &DesignForm
				ON GOTFOCUS SelectControl (This.Name)
				VALUE Name

			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'MaxLength' )
			__MVPUT( Name + 'MaxLength' , 'Nil' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )
			__MVPUBLIC ( Name + 'hScrollBar' )
			__MVPUT( Name + 'hScrollBar' , '.T.' )
			__MVPUBLIC ( Name + 'vScrollBar' )
			__MVPUT( Name + 'vScrollBar' , '.T.' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )
/*
			__MVPUBLIC ( Name + 'DisabledBackColor' )
			__MVPUT( Name + 'DisabledBackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'DisabledFontColor' )
			__MVPUT( Name + 'DisabledFontColor' , 'Nil' )
*/

		ElseIf	HMG_UPPER (Line) = 'DEFINE LABEL'
			ControlType := 'LABEL'
			Name := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )
			DEFINE LABEL &Name
			PARENT &DesignForm
			VALUE Name

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , 'Nil' )
			__MVPUBLIC ( Name + 'AutoSize' )
			__MVPUT( Name + 'AutoSize' , '.F.' )
			__MVPUBLIC ( Name + 'Alignment' )
			__MVPUT( Name + 'Alignment' , 'LEFT' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE BROWSE'
			ControlType := 'BROWSE'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE BROWSE &Name
				PARENT &DesignForm
				HEADERS { Name }
				WIDTHS { 100 }
				WORKAREA Test
				FIELDS { 'Test->Code' }
				TOOLTIP Name
				ON GOTFOCUS SelectControl (This.Name)
				VSCROLLBAR .F.

			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'WorkArea' )
			__MVPUT( Name + 'WorkArea' , 'Nil' )
			__MVPUBLIC ( Name + 'Fields' )
			__MVPUT( Name + 'Fields' , '{}' )
			__MVPUBLIC ( Name + 'Widths' )
			__MVPUT( Name + 'Widths' , '{}' )
			__MVPUBLIC ( Name + 'Headers' )
			__MVPUT( Name + 'Headers' , '{}' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , 'Nil' )
			__MVPUBLIC ( Name + 'AllowEdit' )
			__MVPUT( Name + 'AllowEdit' , '.F.' )
			__MVPUBLIC ( Name + 'AllowAppend' )
			__MVPUT( Name + 'AllowAppend' , '.F.' )
			__MVPUBLIC ( Name + 'OnHeadClick' )
			__MVPUT( Name + 'OnHeadClick' , 'Nil' )
			__MVPUBLIC ( Name + 'AllowDelete' )
			__MVPUT( Name + 'AllowDelete' , '.F.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Image' )
			__MVPUT( Name + 'Image' , 'Nil' )
			__MVPUBLIC ( Name + 'Justify' )
			__MVPUT( Name + 'Justify' , 'Nil' )
			__MVPUBLIC ( Name + 'Lines' )
			__MVPUT( Name + 'Lines' , '.T.' )
			__MVPUBLIC ( Name + 'ReadOnlyFields' )
			__MVPUT( Name + 'ReadOnlyFields' , 'Nil' )
			__MVPUBLIC ( Name + 'Valid' )
			__MVPUT( Name + 'Valid' , 'Nil' )
			__MVPUBLIC ( Name + 'ValidMessages' )
			__MVPUT( Name + 'ValidMessages' , 'Nil' )
			__MVPUBLIC ( Name + 'Lock' )
			__MVPUT( Name + 'Lock' , 'Nil' )
			__MVPUBLIC ( Name + 'vScrollBar' )
			__MVPUT( Name + 'vScrollBar' , '.T.' )
			__MVPUBLIC ( Name + 'DynamicBackColor' )
			__MVPUT( Name + 'DynamicBackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'DynamicForeColor' )
			__MVPUT( Name + 'DynamicForeColor' , 'Nil' )
			__MVPUBLIC ( Name + 'InputMask' )
			__MVPUT( Name + 'InputMask' , 'Nil' )
			__MVPUBLIC ( Name + 'Format' )
			__MVPUT( Name + 'Format' , 'Nil' )
			__MVPUBLIC ( Name + 'When' )
			__MVPUT( Name + 'When' , 'Nil' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )

			__MVPUBLIC ( Name + 'InputItems' )
			__MVPUT( Name + 'InputItems' , 'Nil' )

			__MVPUBLIC ( Name + 'DisplayItems' )
			__MVPUT( Name + 'DisplayItems' , 'Nil' )

			__MVPUBLIC ( Name + 'HeaderImages' )
			__MVPUT( Name + 'HeaderImages' , 'Nil' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE RADIOGROUP'
			ControlType := 'RADIOGROUP'
			Name := HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 )
			CurrentOptions := "{ 'Option 1','Option 2'}"

			CurrentFontBold		:= '.F.'
			CurrentFontItalic	:= '.F.'
			CurrentFontUnderLine	:= '.F.'
			CurrentFontStrikeout	:= '.F.'
			CurrentHorizontal	:= '.F.'

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'Spacing' )
			__MVPUT( Name + 'Spacing' , '25' )

			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , 'Nil' )

			__MVPUBLIC ( Name + 'Orientation' )
			__MVPUT( Name + 'Orientation' , 'VERTICAL' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE FRAME'
			ControlType := 'FRAME'
			Name := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )
			DEFINE FRAME &Name
			PARENT &DesignForm

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , "" )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TAB'
			TabPageCount := 0
			ControlType := 'TAB'

			* Determine Name

			Name := ''
			Started := .F.

			For z := 12 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Name := Name + Char
				EndIf
			Next z

			* Determine Row & Col

			a := HB_UAT ( " AT " , HMG_UPPER (Line) )
			c := HB_UAT ( "," , HMG_UPPER (Line) )
			Row := HB_USUBSTR ( Line , a + 4 , c - a - 4 )
			Col := ''
			Started := .F.

			For z := c + 1 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Col := Col + Char
				EndIf
			Next z

			* Determine Width

			a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			if a > 0

				Width := ''
				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Width := Width + Char
					EndIf
				Next z

			EndIf

			* Determine Height

			a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				Height := ''
				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Height := Height + Char
					EndIf
				Next z

			endif

			* Determine Value

			a := HB_UAT ( " VALUE " , HMG_UPPER (Line) )

			Value := ''

			if a > 0

				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Value := Value + Char
					EndIf
				Next z

			endif

			* Determine FontName

			a := HB_UAT ( ' FONT "' , HMG_UPPER (Line) )

			FontName := ''

			if a > 0

				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontName := FontName + Char
					EndIf
				Next z

			endif

			Fontname := ALLTRIM ( FontName )

			if Empty ( FontName )
				FontName := 'Arial'
			EndIf

			* Determine FontSize

			a := HB_UAT ( " SIZE " , HMG_UPPER (Line) )

			FontSize := ''

			if a > 0

				Started := .F.

				For z := a + 5 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontSize := FontSize + Char
					EndIf
				Next z

			endif

			FontSize := ALLTRIM ( FontSize )

			if Empty ( FontSize )
				FontSize := '9'
			EndIf

			* Determine ToolTip

			a := HB_UAT ( " TOOLTIP " , HMG_UPPER (Line) )

			ToolTip := ''

			if a > 0

				Started := .F.

				For z := a + 9 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						if Started
							Exit
						Else
							Started := .T.
						EndIf
					Else
						if Started
							ToolTip := ToolTip + Char
						EndIf
					EndIf
				Next z

			EndIf

			ToolTip := ALLTRIM(ToolTip)

			if	HB_ULEFT ( ToolTip , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( ToolTip , 1 ) == "'"

				ToolTip := HB_URIGHT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			if	HB_URIGHT ( ToolTip, 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( ToolTip , 1 ) == "'"

				ToolTip := HB_ULEFT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			ToolTip := ALLTRIM(ToolTip)


			* Determine OnChange

			a := HB_UAT ( " ON CHANGE " , HMG_UPPER (Line) )

			OnChange := ''

			if a > 0

				//Started := .F.

				For z := a + 11 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 9 )

					if NextToken == 'NOTABSTOP'
						Exit
					endif

					if NextToken == 'MULTILINE'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnChange := OnChange + Char

				Next z

				OnChange := ALLTRIM(OnChange)

				if Empty (OnChange)
					OnChange := 'Nil'
				EndIf

			EndIf

			__MVPUBLIC( Name + 'FontName' )
			__MVPUBLIC( Name + 'FontSize' )
			__MVPUT( Name + 'FontName' , FontName )
			__MVPUT( Name + 'FontSize' ,  FontSize )
			__MVPUBLIC( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , ToolTip )
			__MVPUBLIC( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , OnChange )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUBLIC ( Name + 'Buttons' )
			__MVPUBLIC ( Name + 'Flat' )
			__MVPUBLIC ( Name + 'HotTrack' )
			__MVPUBLIC ( Name + 'Vertical' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUBLIC ( Name + 'Multiline' )

			CurrentTabName := Name

			DEFINE TAB &Name OF &DesignForm AT VAL (Row) , VAL (Col) WIDTH VAL ( Width ) HEIGHT VAL ( Height ) ;
				FONT Fontname SIZE VAL(FontSize) ;
				ON CHANGE ( SelectControl (This.Name) , SelectControl (This.Name) )

			* Determine MultiLine
			a := HB_UAT ( " MULTILINE" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Multiline' , '.T.' )
			else
				__MVPUT( Name + 'Multiline' , '.F.' )
			endif

			* Determine TabStop
			a := HB_UAT ( " NOTABSTOP" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'TabStop' , '.F.' )
			else
				__MVPUT( Name + 'TabStop' , '.T.' )
			endif

			* Determine Vertical
			a := HB_UAT ( " VERTICAL" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Vertical' , '.T.' )
				_HMG_ActiveTabVertical	:= .T.
			else
				__MVPUT( Name + 'Vertical' , '.F.' )
			endif

			* Determine HotTrack
			a := HB_UAT ( " HOTTRACK" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'HotTrack' , '.T.' )
				_HMG_ActiveTabHotTrack	:= .T.
			else
				__MVPUT( Name + 'HotTrack' , '.F.' )
			endif

			* Determine Buttons
			a := HB_UAT ( " BUTTONS" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Buttons' , '.T.' )
				_HMG_ActiveTabButtons	:= .T.
			else
				__MVPUT( Name + 'Buttons' , '.F.' )
			endif

			* Determine Flat
			a := HB_UAT ( " FLAT" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Flat' , '.T.' )
				_HMG_ActiveTabFlat	:= .T.
			else
				__MVPUT( Name + 'Flat' , '.F.' )
			endif


			* Determine Bold
			a := HB_UAT ( " BOLD" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'FontBold' , '.T.' )
				_HMG_ActiveTabBold	:= .T.
			else
				__MVPUT( Name + 'FontBold' , '.F.' )
			endif
			* Determine Italic
			a := HB_UAT ( " ITALIC" , HMG_UPPER (Line) )
			if a > 0
				_HMG_ActiveTabItalic	:= .T.
				__MVPUT( Name + 'FontItalic' , '.T.' )
			else
				__MVPUT( Name + 'FontItalic' , '.F.' )
			endif
			* Determine UnderLine
			a := HB_UAT ( " UNDERLINE" , HMG_UPPER (Line) )
			if a > 0
				_HMG_ActiveTabUnderline	:= .T.
				__MVPUT( Name + 'FontUnderLine' , '.T.' )
			else
				__MVPUT( Name + 'FontUnderLine' , '.F.' )
			endif
			* Determine StrikeOut
			a := HB_UAT ( " STRIKEOUT" , HMG_UPPER (Line) )
			if a > 0
				_HMG_ActiveTabStrikeout	:= .T.
				__MVPUT( Name + 'FontStrikeOut' , '.T.' )
			else
				__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			endif


			CurrentCaptions :=  '{ '
			CurrentPageImages := '{ '

			if empty(value)
				value := '0'
			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , Value )
			__MVPUBLIC ( Name + 'Captions' )
			__MVPUBLIC ( Name + 'PageCount' )
			__MVPUT( Name + 'PageCount' , '0' )
			__MVPUT( Name + 'Captions' ,  "{'',''}" )

		ElseIf	HMG_UPPER (Line) = 'PAGE '
			TabPageCount ++

			* Get Image

			x := HB_UTF8RAT ( ' IMAGE ' , HMG_UPPER(Line) )

			if x > 0 .and. !IsLiteral ( Line , x )
				CurrentImage := HB_USUBSTR ( Line , x + 7 , 255 )
				Line := HB_ULEFT ( Line , x )
			Else
				CurrentImage := ''
			EndIf

			if	HB_ULEFT ( CurrentImage , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( CurrentImage , 1 ) == "'"

				CurrentImage := HB_URIGHT (CurrentImage , HMG_LEN(CurrentImage) - 1 )

			EndIf

			if	HB_URIGHT ( CurrentImage , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( CurrentImage , 1 ) == "'"

				CurrentImage := HB_ULEFT (CurrentImage , HMG_LEN(CurrentImage) - 1 )

			EndIf

			CurrentPageImages :=  CurrentpageImages + chr(34) + CurrentImage + chr(34) + " , "


			CurrentCaption := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN (Line) - 5 ) )

			if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( CurrentCaption , 1 ) == "'"

				CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

			EndIf

			if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( CurrentCaption , 1 ) == "'"

				CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

			EndIf

			DEFINE PAGE CurrentCaption

			CurrentCaptions :=  CurrentCaptions + chr(34) + CurrentCaption + chr(34) + " , "

		ElseIf	HMG_UPPER (Line) = 'END PAGE'
			END PAGE

		ElseIf	HMG_UPPER (Line) = 'END TAB'

			END TAB

			CurrentCaptions :=  ALLTRIM(CurrentCaptions)
			CurrentCaptions := HB_ULEFT ( CurrentCaptions , HMG_LEN(CurrentCaptions) - 1 )
			CurrentCaptions :=  CurrentCaptions + ' }'

			CurrentPageImages :=  ALLTRIM(CurrentPageImages)
			CurrentPageImages := HB_ULEFT ( CurrentpageImages , HMG_LEN(CurrentPageImages) - 1 )
			CurrentpageImages :=  CurrentPageImages + ' }'

			__MVPUT( CurrentTabName + 'PageCount' , ALLTRIM(STR(TabpageCount)) )
			__MVPUT( CurrentTabName + 'Captions' ,  CurrentCaptions )

			__MVPUBLIC ( CurrentTabName + 'PageImages' )
			__MVPUT( CurrentTabName + 'PageImages' ,  CurrentPageImages )


		ElseIf	HMG_UPPER (Line) = 'DEFINE ANIMATEBOX'
			ControlType := 'ANIMATEBOX'
			Name := HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 )
			DEFINE ANIMATEBOX &Name
			PARENT &DesignForm
			FILE ''
			CENTER .T.
			AUTOPLAY .T.

			__MVPUBLIC ( Name + 'File' )
			__MVPUT( Name + 'File' , "" )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'AutoPlay' )
			__MVPUT( Name + 'AutoPlay' , '.F.' )
			__MVPUBLIC ( Name + 'Center' )
			__MVPUT( Name + 'Center' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE HYPERLINK'
			ControlType := 'HYPERLINK'
			Name := HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 )
			DEFINE HYPERLINK &Name
			PARENT &DesignForm
			ADDRESS _HLK

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'Address' )
			__MVPUT( Name + 'Address' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'AutoSize' )
			__MVPUT( Name + 'AutoSize' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'HandCursor' )
			__MVPUT( Name + 'HandCursor' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE MONTHCALENDAR'
			ControlType := 'MONTHCALENDAR'
			Name := HB_USUBSTR ( Line , 22 , HMG_LEN (Line) - 21 )
			DEFINE MONTHCALENDAR &Name
			PARENT &DesignForm
			ON CHANGE SelectControl (This.Name)

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , 'CTOD(  /  /  )' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Today' )
			__MVPUT( Name + 'Today' , '.T.' )
			__MVPUBLIC ( Name + 'TodayCircle' )
			__MVPUT( Name + 'TodayCircle' , '.T.' )
			__MVPUBLIC ( Name + 'WeekNumbers' )
			__MVPUT( Name + 'WeekNumbers' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE RICHEDITBOX'
			ControlType := 'RICHEDITBOX'
			Name := HB_USUBSTR ( Line , 20 , HMG_LEN (Line) - 19 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE RICHEDITBOX &Name
				PARENT &DesignForm
				ON GOTFOCUS SelectControl (This.Name)
				VALUE Name

			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'MaxLength' )
			__MVPUT( Name + 'MaxLength' , 'Nil' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE ACTIVEX'
			ControlType := 'ACTIVEX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )

			__MVPUBLIC ( Name + 'ProgId' )
			__MVPUT( Name + 'ProgId' , '' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE PROGRESSBAR'
			ControlType := 'PROGRESSBAR'
			Name := HB_USUBSTR ( Line , 20 , HMG_LEN (Line) - 19 )

			__MVPUBLIC ( Name + 'RangeMax' )
			__MVPUT( Name + 'RangeMax' , '1' )
			__MVPUBLIC ( Name + 'RangeMin' )
			__MVPUT( Name + 'RangeMin' , '10' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'ForeColor' )
			__MVPUT( Name + 'ForeColor' , 'Nil' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Smooth' )
			__MVPUT( Name + 'Smooth' , '.F.' )
			__MVPUBLIC ( Name + 'Orientation' )
			__MVPUT( Name + 'Orientation' , 'HORIZONTAL' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE PLAYER'
			ControlType := 'PLAYER'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			__MVPUBLIC ( Name + 'File' )
			__MVPUT( Name + 'File' , "" )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )

			__MVPUBLIC ( Name + 'AutoSizeWindow' )
			__MVPUT( Name + 'AutoSizeWindow' , '.T.' )

			__MVPUBLIC ( Name + 'AutoSizeMovie' )
			__MVPUT( Name + 'AutoSizeMovie' , '.T.' )

			__MVPUBLIC ( Name + 'ErrorDlg' )
			__MVPUT( Name + 'ErrorDlg' , '.T.' )

			__MVPUBLIC ( Name + 'Menu' )
			__MVPUT( Name + 'Menu' , '.T.' )

			__MVPUBLIC ( Name + 'Open' )
			__MVPUT( Name + 'Open' , '.T.' )

			__MVPUBLIC ( Name + 'PlayBar' )
			__MVPUT( Name + 'PlayBar' , '.T.' )

			__MVPUBLIC ( Name + 'ShowAll' )
			__MVPUT( Name + 'ShowAll' , '.F.' )

			__MVPUBLIC ( Name + 'ShowMode' )
			__MVPUT( Name + 'ShowMode' , '.F.' )

			__MVPUBLIC ( Name + 'ShowName' )
			__MVPUT( Name + 'ShowName' , '.F.' )

			__MVPUBLIC ( Name + 'ShowPosition' )
			__MVPUT( Name + 'ShowPosition' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE IPADDRESS'
			ControlType := 'IPADDRESS'
			Name := HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 )

			CurrentFontBold		:= '.F.'
			CurrentFontItalic	:= '.F.'
			CurrentFontUnderLine	:= '.F.'
			CurrentFontStrikeout	:= '.F.'

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '{ 0 , 0 , 0 , 0 }' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TIMER'
			ControlType := 'TIMER'

			* Determine Name

			Name := ''
			Started := .F.

			For z := 14 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Name := Name + Char
				EndIf
			Next z

			* Determine Interval

			Interval := ''
			a := HB_UAT ( " INTERVAL " , HMG_UPPER (Line) )

			if a > 0

				Started := .F.

				For z := a + 9 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Interval := Interval + Char
					EndIf
				Next z

			EndIf

			* Determine Action

			//CurrentAction := ''
			a := HB_UAT ( " ACTION " , HMG_UPPER (Line) )

			if a > 0
				CurrentAction := HB_USUBSTR ( Line , a + 7 , HMG_LEN (Line) - ( a + 6 ) )
			Else
				CurrentAction := ''
			EndIf

			DEFINE BUTTON &Name
				PARENT &DesignForm
				ROW GetProperty ( DesignForm , 'Height' ) - 45 - GetTitleHeight()
				COL 10 + (TimersLoaded * 40)
				WIDTH 30
				HEIGHT 30
				ACTION SelectControl (This.name)
				PICTURE 'timer'
				FLAT .T.
			END BUTTON

			_HMG_aControlMiscData1 [ GetControlIndex ( Name , DesignForm ) ] := 5

			TimersLoaded++

			if empty ( interval )
				interval := '0'
			endif
			if empty ( Currentaction )
				Currentaction := 'Nil'
			endif

			__MVPUBLIC ( Name + 'Interval' )
			__MVPUT( Name + 'Interval' , Interval )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , Currentaction )


*******************************************************************************
*******************************************************************************

		// END COMMAND

		ElseIf	HMG_UPPER (Line) = 'END BUTTON'
			END BUTTON

		ElseIf	HMG_UPPER (Line) = 'END CHECKBOX'
			END CHECKBOX

		ElseIf	HMG_UPPER (Line) = 'END LISTBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END LISTBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END COMBOBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END COMBOBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END CHECKBUTTON'
			END CHECKBUTTON
			_HMG_aControlMiscData1 [ GetControlIndex ( Name , DesignForm ) ] := 1

		ElseIf	HMG_UPPER (Line) = 'END GRID'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				if ALLTRIM(HMG_UPPER(  __MVGET ( Name + 'ShowHeaders' )  )) == '.T.'
					SHOWHEADERS .T.
				else
					SHOWHEADERS .F.
				endif

				END GRID

			endif

		ElseIf	HMG_UPPER (Line) = 'END SLIDER'
			END SLIDER
			if __MVGET ( name + 'Orientation' ) == 'VERTICAL' ;
				.and. ;
				__MVGET ( name + 'TickMarks' ) == 'BOTTOM'

				__MVPUT ( name + 'TickMarks' , 'RIGHT' )

			endif
		ElseIf	HMG_UPPER (Line) = 'END SPINNER'
			END SPINNER

		ElseIf	HMG_UPPER (Line) = 'END IMAGE'
			END IMAGE

		ElseIf	HMG_UPPER (Line) = 'END TREE'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END TREE

			endif

		ElseIf	HMG_UPPER (Line) = 'END DATEPICKER'
			END DATEPICKER

		ElseIf	HMG_UPPER (Line) = 'END TEXTBOX'
			END TEXTBOX

		ElseIf	HMG_UPPER (Line) = 'END EDITBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				IF HMG_UPPER ( ALLTRIM( CURRENTHSCROLLBAR ) ) == '.T.'
					HSCROLLBAR .T.
				ELSE
					HSCROLLBAR .F.
				ENDIF

				IF HMG_UPPER ( ALLTRIM( CURRENTVSCROLLBAR ) ) == '.T.'
					VSCROLLBAR .T.
				ELSE
					VSCROLLBAR .F.
				ENDIF

				END EDITBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END LABEL'
			ACTION SelectControl( This.Name )
			END LABEL

		ElseIf	HMG_UPPER (Line) = 'END BROWSE'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END BROWSE

			endif

		ElseIf	HMG_UPPER (Line) = 'END RADIOGROUP'

			aTemp := StringToArray ( CurrentOptions )

			DEFINE RADIOGROUP &Name
				WIDTH CurrentWidth
				ROW CurrentRow
				COL CurrentCol
				PARENT &DesignForm
				OPTIONS aTemp
				ON CHANGE SelectControl (This.Name)
				FONTNAME CurrentFontName
				FONTSIZE CurrentFontSize
				BACKCOLOR &CurrentBackColor
				FONTCOLOR &CurrentFontColor
				SPACING CurrentSpacing

				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentHorizontal)) == '.T.'
					HORIZONTAL .T.
				else
					HORIZONTAL .F.
				endif

			END RADIOGROUP

			__MVPUBLIC ( Name + 'Options' )
			__MVPUT( Name + 'Options' , CurrentOptions )

		ElseIf	HMG_UPPER (Line) = 'END FRAME'

			if empty ( currentcaption )
				FONTSIZE 1
			endif

			END FRAME

		ElseIf	HMG_UPPER (Line) = 'END ANIMATEBOX'
			END ANIMATEBOX

		ElseIf	HMG_UPPER (Line) = 'END HYPERLINK'
			END HYPERLINK

			w := GetControlIndex ( Name , DesignForm )
			macrovar := 'SelectControl ('+ chr(34) + Name + chr(34) + ')'
			_HMG_aControlProcedures [w] := { || &macrovar }
			_HMG_aControlMiscData1 [w][1] := 6

			RedrawWindow ( GetControlHandle ( Name , DesignForm ) )

		ElseIf	HMG_UPPER (Line) = 'END MONTHCALENDAR'
			END MONTHCALENDAR

		ElseIf	HMG_UPPER (Line) = 'END RICHEDITBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END RICHEDITBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END PROGRESSBAR'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) ;
				HEIGHT if ( CurrentHeight == -1 , 25 , CurrentHeight ) ;
				BORDER ;
				BACKCOLOR &CurrentBackColor ;
				FONTCOLOR &CurrentFontColor

			w := GetControlIndex ( Name , DesignForm )
			_HMG_aControlMiscData1 [w][1] := 2

			CurrentWidth	:= -1
			CurrentHeight	:= -1

		ElseIf	HMG_UPPER (Line) = 'END PLAYER'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) HEIGHT if ( CurrentHeight == -1 , 120 , CurrentHeight ) ;
				BORDER

			w := GetControlIndex ( Name , DesignForm )
			_HMG_aControlMiscData1 [w][1] := 3

			CurrentWidth	:= -1
			CurrentHeight	:= -1

		ElseIf	HMG_UPPER (Line) = 'END ACTIVEX'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) HEIGHT if ( CurrentHeight == -1 , 120 , CurrentHeight ) ;
				BORDER

			w := GetControlIndex ( Name , DesignForm )
			_HMG_aControlMiscData1 [w][1] := 7

			CurrentWidth	:= -1
			CurrentHeight	:= -1

		ElseIf	HMG_UPPER (Line) = 'END IPADDRESS'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) HEIGHT if ( CurrentHeight == -1 , 24 , CurrentHeight ) ;
				BORDER

			w := GetControlIndex ( Name , DesignForm )
			_HMG_aControlMiscData1 [w][1] := 4

			SetProperty ( DesignForm , Name , 'FontName' , CurrentFontName )
			SetProperty ( DesignForm , Name , 'FontSize' , VAL ( CurrentFontSize ) )

			SetProperty ( DesignForm , Name , 'FontBold' , if ( ALLTRIM(HMG_UPPER(CurrentFontBold )) == '.T.' , .T. , .F. ) )
			SetProperty ( DesignForm , Name , 'FontItalic' , if ( ALLTRIM(HMG_UPPER(CurrentFontItalic )) == '.T.' , .T. , .F. ) )
			SetProperty ( DesignForm , Name , 'FontUnderLine' , if ( ALLTRIM(HMG_UPPER(CurrentFontUnderLine )) == '.T.' , .T. , .F. ) )
			SetProperty ( DesignForm , Name , 'FontStrikeout' , if ( ALLTRIM(HMG_UPPER(CurrentFontStrikeout )) == '.T.' , .T. , .F. ) )

			CurrentWidth	:= -1
			CurrentHeight	:= -1

		///////////////////////////////////////////////////////////////
		// ROWSOURCE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ROWSOURCE'

			CurrentRowSource := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ROWSOURCE ' + CurrentRowSource + CRLF

				__MVPUT( Name + 'ROWSOURCE' , CurrentRowSource )

			else

				__MVPUT( Name + 'ROWSOURCE' , CurrentRowSource )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNFIELDS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNFIELDS'

			CurrentColumnFields := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNFIELDS ' + CurrentColumnFields + CRLF

				__MVPUT( Name + 'COLUMNFIELDS' , CurrentColumnFields )

			else

				__MVPUT( Name + 'COLUMNFIELDS' , CurrentColumnFields )

			endif

		///////////////////////////////////////////////////////////////
		// ALLOWAPPEND PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ALLOWAPPEND'

			CurrentAllowAppend := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWAPPEND ' + CurrentAllowAppend + CRLF

				__MVPUT( Name + 'ALLOWAPPEND' , CurrentAllowAppend )

			else

				__MVPUT( Name + 'ALLOWAPPEND' , CurrentAllowAppend )

			endif

		///////////////////////////////////////////////////////////////
		// ALLOWDELETE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ALLOWDELETE'

			CurrentAllowDelete := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWDELETE ' + CurrentAllowDelete + CRLF

				__MVPUT( Name + 'ALLOWDELETE' , CurrentAllowDelete )

			else

				__MVPUT( Name + 'ALLOWDELETE' , CurrentAllowDelete )

			endif

		///////////////////////////////////////////////////////////////
		// BUFFERED PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'BUFFERED'

			CurrentBuffered := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BUFFERED ' + CurrentBuffered + CRLF

				__MVPUT( Name + 'BUFFERED' , CurrentBuffered )

			else

				__MVPUT( Name + 'BUFFERED' , CurrentBuffered )

			endif

		///////////////////////////////////////////////////////////////
		// DYNAMICDISPLAY PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DYNAMICDISPLAY'

			CurrentDynamicDisplay := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DYNAMICDISPLAY ' + CurrentDynamicDisplay + CRLF

				__MVPUT( Name + 'DYNAMICDISPLAY' , CurrentDynamicDisplay )

			else

				__MVPUT( Name + 'DYNAMICDISPLAY' , CurrentDynamicDisplay )

			endif

		///////////////////////////////////////////////////////////////
		// WHEN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WHEN'

			CurrentWhen := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WHEN ' + CurrentWhen + CRLF

				__MVPUT( Name + 'WHEN' , CurrentWhen )

			else

				__MVPUT( Name + 'WHEN' , CurrentWhen )

			endif

		///////////////////////////////////////////////////////////////
		// DYNAMICBACKCOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DYNAMICBACKCOLOR'

			CurrentDynamicBackColor := ALLTRIM(HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DYNAMICBACKCOLOR ' + CurrentDynamicBackColor + CRLF

				__MVPUT( Name + 'DYNAMICBACKCOLOR' , CurrentDynamicBackColor )

			else

				__MVPUT( Name + 'DYNAMICBACKCOLOR' , CurrentDynamicBackColor )

			endif

		///////////////////////////////////////////////////////////////
		// DYNAMICFORECOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DYNAMICFORECOLOR'

			CurrentDynamicForeColor := ALLTRIM(HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DYNAMICFORECOLOR ' + CurrentDynamicForeColor + CRLF

				__MVPUT( Name + 'DYNAMICFORECOLOR' , CurrentDynamicForeColor )

			else

				__MVPUT( Name + 'DYNAMICFORECOLOR' , CurrentDynamicForeColor )

			endif

		///////////////////////////////////////////////////////////////
		// INPUTITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'INPUTITEMS'

			CurrentInputItems := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'INPUTITEMS ' + CurrentInputItems + CRLF

				__MVPUT( Name + 'INPUTITEMS' , CurrentInputItems )

			else

				__MVPUT( Name + 'INPUTITEMS' , CurrentInputItems )

			endif

		///////////////////////////////////////////////////////////////
		// DISPLAYITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DISPLAYITEMS'

			CurrentDisplayItems := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISPLAYITEMS ' + CurrentDisplayItems + CRLF

				__MVPUT( Name + 'DISPLAYITEMS' , CurrentDisplayItems )

			else

				__MVPUT( Name + 'DISPLAYITEMS' , CurrentDisplayItems )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNWHEN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNWHEN'

			CurrentColumnWhen := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNWHEN ' + CurrentColumnWhen + CRLF

				__MVPUT( Name + 'COLUMNWHEN' , CurrentColumnWhen )

			else

				__MVPUT( Name + 'COLUMNWHEN' , CurrentColumnWhen )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNVALID PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNVALID'

			CurrentColumnValid := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNVALID ' + CurrentColumnValid + CRLF

				__MVPUT( Name + 'COLUMNVALID' , CurrentColumnValid )

			else

				__MVPUT( Name + 'COLUMNVALID' , CurrentColumnValid )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNCONTROLS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNCONTROLS'

			CurrentColumnControls := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNCONTROLS ' + CurrentColumnControls + CRLF

				__MVPUT( Name + 'COLUMNCONTROLS' , CurrentColumnControls )

			else

				__MVPUT( Name + 'COLUMNCONTROLS' , CurrentColumnControls )

			endif

		///////////////////////////////////////////////////////////////
		// TODAY PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOTODAY '

			CurrentToday := HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOTODAY ' + CurrentToday + CRLF

				if ALLTRIM(HMG_UPPER(CurrentToday)) == '.T.'
					__MVPUT( Name + 'Today' , '.F.' )
				else
					__MVPUT( Name + 'Today' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentToday)) == '.T.'
					__MVPUT( Name + 'Today' , '.F.' )
					NOTODAY .T.
				else
					__MVPUT( Name + 'Today' , '.T.' )
					NOTODAY .F.
				endif

			endif

		///////////////////////////////////////////////////////////////
		// TODAYCIRCLE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOTODAYCIRCLE'

			CurrentTodayCircle := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOTODAYCIRCLE ' + CurrentTodayCircle + CRLF

				if ALLTRIM(HMG_UPPER(CurrentTodayCircle)) == '.T.'
					__MVPUT( Name + 'TodayCircle' , '.F.' )
				else
					__MVPUT( Name + 'TodayCircle' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentTodayCircle)) == '.T.'
					__MVPUT( Name + 'TodayCircle' , '.F.' )
					NOTODAYCIRCLE .T.
				else
					__MVPUT( Name + 'TodayCircle' , '.T.' )
					NOTODAYCIRCLE .F.
				endif

			endif

		///////////////////////////////////////////////////////////////
		// WEEKNUMBERS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WEEKNUMBERS'

			CurrentWeekNumbers := HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WEEKNUMBERS ' + CurrentWeekNumbers + CRLF

				if ALLTRIM(HMG_UPPER(CurrentWeekNumbers)) == '.T.'
					__MVPUT( Name + 'WeekNumbers' , '.T.' )
				else
					__MVPUT( Name + 'WeekNumbers' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentWeekNumbers)) == '.T.'
					__MVPUT( Name + 'WeekNumbers' , '.T.' )
					WEEKNUMBERS .T.
				else
					__MVPUT( Name + 'WeekNumbers' , '.F.' )
					WEEKNUMBERS .F.
				endif

			endif

		///////////////////////////////////////////////////////////////
		// AUTOSIZEWINDOW PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOAUTOSIZEWINDOW'

			CurrentMediaProp := HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOAUTOSIZEWINDOW ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeWindow' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeWindow' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeWindow' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeWindow' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// AUTOSIZEMOVIE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOAUTOSIZEMOVIE'

			CurrentMediaProp := HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOAUTOSIZEMOVIE ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeMovie' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeMovie' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeMovie' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeMovie' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// ERRORDLG PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOERRORDLG'

			CurrentMediaProp := HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOERRORDLG ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ErrorDlg' , '.F.' )
				else
					__MVPUT( Name + 'ErrorDlg' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ErrorDlg' , '.F.' )
				else
					__MVPUT( Name + 'ErrorDlg' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// MENU PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOMENU'

			CurrentMediaProp := HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOMENU ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Menu' , '.F.' )
				else
					__MVPUT( Name + 'Menu' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Menu' , '.F.' )
				else
					__MVPUT( Name + 'Menu' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// OPEN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOOPEN'

			CurrentMediaProp := HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOOPEN ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Open' , '.F.' )
				else
					__MVPUT( Name + 'Open' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Open' , '.F.' )
				else
					__MVPUT( Name + 'Open' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// PLAYBAR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOPLAYBAR'

			CurrentMediaProp := HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOPLAYBAR ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'PlayBar' , '.F.' )
				else
					__MVPUT( Name + 'PlayBar' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'PlayBar' , '.F.' )
				else
					__MVPUT( Name + 'PlayBar' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWALL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWALL'

			CurrentMediaProp := HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWALL ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowAll' , '.T.' )
				else
					__MVPUT( Name + 'ShowAll' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowAll' , '.T.' )
				else
					__MVPUT( Name + 'ShowAll' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// BREAK PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'BREAK'

			CurrentMediaProp := HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BREAK ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Break' , '.T.' )
				else
					__MVPUT( Name + 'Break' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWMODE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWMODE'

			CurrentMediaProp := HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWMODE ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowMode' , '.T.' )
				else
					__MVPUT( Name + 'ShowMode' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowMode' , '.T.' )
				else
					__MVPUT( Name + 'ShowMode' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWNAME PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWNAME'

			CurrentMediaProp := HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWNAME ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowName' , '.T.' )
				else
					__MVPUT( Name + 'ShowName' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowName' , '.T.' )
				else
					__MVPUT( Name + 'ShowName' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWPOSITION PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWPOSITION'

			CurrentMediaProp := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWPOSITION ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowPosition' , '.T.' )
				else
					__MVPUT( Name + 'ShowPosition' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowPosition' , '.T.' )
				else
					__MVPUT( Name + 'ShowPosition' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// ROW PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ROW'

			CurrentRow := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ROW Nil' + CRLF

				__MVPUT ( Name + 'Row' , 'Nil' )

			else

				ROW CurrentRow

			endif

		///////////////////////////////////////////////////////////////
		// COL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COL'

			CurrentCol := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COL Nil' + CRLF

				__MVPUT ( Name + 'Col' , 'Nil' )

			else

				COL CurrentCol

			endif

		///////////////////////////////////////////////////////////////
		// LOCKCOLUMNS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LOCKCOLUMNS '

			CurrentLockColumns := VAL ( HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'LOCKCOLUMNS ' + ALLTRIM ( STR ( CurrentLockColumns ) ) + CRLF

			endif

			__MVPUT ( Name + 'LockColumns' , ALLTRIM ( STR ( CurrentLockColumns ) ) )


		///////////////////////////////////////////////////////////////
		// WIDTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WIDTH '

			CurrentWidth := VAL ( HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WIDTH ' + ALLTRIM ( STR ( CurrentWidth ) ) + CRLF

				__MVPUT ( Name + 'Width' , ALLTRIM ( STR ( CurrentWidth ) ) )

			else

				WIDTH CurrentWidth

			endif

		///////////////////////////////////////////////////////////////
		// HEIGHT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HEIGHT'

			CurrentHeight := VAL ( HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEIGHT ' + ALLTRIM ( STR ( CurrentHeight ) ) + CRLF

				__MVPUT ( Name + 'Height' , ALLTRIM ( STR ( CurrentHeight ) ) )

			else

				HEIGHT CurrentHeight

			endif

		///////////////////////////////////////////////////////////////
		// PROGID PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'PROGID'

			CurrentProgId := HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 )


			if	HB_ULEFT ( CurrentProgId , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( CurrentProgId , 1 ) == "'"

				CurrentProgId := HB_URIGHT (CurrentProgId , HMG_LEN(CurrentProgId) - 1 )

			EndIf

			if	HB_URIGHT ( CurrentProgId , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( CurrentProgId , 1 ) == "'"

				CurrentProgId := HB_ULEFT (CurrentProgId , HMG_LEN(CurrentProgId) - 1 )

			EndIf

			__MVPUT( Name + 'PROGID' , CurrentProgId )

		///////////////////////////////////////////////////////////////
		// CAPTION PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CAPTION'

			If ControlType == 'BUTTON'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				If   HMG_UPPER(CurrentCaption) == "NIL"
                                     CurrentCaption := ""
                                EndIf

				__MVPUT( Name + 'Caption' , CurrentCaption )

				CAPTION CurrentCaption

			ElseIf ControlType == 'CHECKBOX'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				__MVPUT( Name + 'Caption' , CurrentCaption )

				CAPTION CurrentCaption

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				__MVPUT( Name + 'Caption' , CurrentCaption )

				CAPTION CurrentCaption

			ElseIf ControlType == 'FRAME'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if ALLTRIM(HMG_UPPER(CurrentCaption)) == 'NIL'

					__MVPUT( Name + 'Caption' , "" )
					CurrentCaption := ""
					CAPTION ""

				else

					__MVPUT( Name + 'Caption' , CurrentCaption )
					CAPTION CurrentCaption

				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// TOP PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'TOP'

			If ControlType == 'SLIDER'

				CurrentTop := ALLTRIM(HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

				if ALLTRIM(HMG_UPPER(CurrentTop)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'TOP' )
					TOP .T.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// CASECONVERT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CASECONVERT LOWER'

			__MVPUT( Name + 'CaseConvert' , 'LOWER' )

		ElseIf	HMG_UPPER (Line) = 'CASECONVERT UPPER'

			__MVPUT( Name + 'CaseConvert' , 'UPPER' )

		ElseIf	HMG_UPPER (Line) = 'CASECONVERT NONE'

			__MVPUT( Name + 'CaseConvert' , 'NONE' )

		///////////////////////////////////////////////////////////////
		// UPPERCASE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'UPPERCASE'

			If ControlType == 'TEXTBOX'

				CurrentUpperCase := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if ALLTRIM(HMG_UPPER(CurrentUpperCase)) == ".T."
					__MVPUT( Name + 'CaseConvert' , 'UPPER' )
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// DRAGITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DRAGITEMS'

			CurrentDragItems := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

			if _hmgide_SplitBoxProcessing == .T.
				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DRAGITEMS ' + CurrentDragItems + CRLF
			endif

			if ALLTRIM(HMG_UPPER(CurrentDragItems)) == ".T."
				__MVPUT( Name + 'DragItems' , '.T.' )
			else
				__MVPUT( Name + 'DragItems' , '.F.' )
			endif

		///////////////////////////////////////////////////////////////
		// LOWERCASE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LOWERCASE'

			If ControlType == 'TEXTBOX'

				CurrentLowerCase := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if ALLTRIM(HMG_UPPER(CurrentLowerCase)) == ".T."
					__MVPUT( Name + 'CaseConvert' , 'LOWER' )
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// BOTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'BOTH'

			If ControlType == 'SLIDER'

				CurrentBoth := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if ALLTRIM(HMG_UPPER(CurrentBoth)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'BOTH' )
					BOTH .T.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// NOTICKS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOTICKS'

			If ControlType == 'SLIDER'

				CurrentNoticks := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if ALLTRIM(HMG_UPPER(CurrentNoTicks)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'NONE' )
					NOTICKS .T.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// LEFT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LEFT'

			If ControlType == 'SLIDER'

				CurrentLeft := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if ALLTRIM(HMG_UPPER(CurrentLeft)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'LEFT' )
					LEFT .T.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// VERTICAL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VERTICAL'

			If ControlType == 'SLIDER'

				CurrentVertical := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if ALLTRIM(HMG_UPPER(CurrentVertical)) == ".T."
					__MVPUT( Name + 'Orientation' , 'VERTICAL' )
					VERTICAL .T.
				endif

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentVertical := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if ALLTRIM(HMG_UPPER(CurrentVertical)) == ".T."
					__MVPUT( Name + 'Orientation' , 'VERTICAL' )
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// HORIZONTAL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HORIZONTAL'

			If ControlType == 'RADIOGROUP'

				CurrentHorizontal := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if ALLTRIM(HMG_UPPER(CurrentHorizontal)) == ".T."

					__MVPUT( Name + 'Orientation' , 'HORIZONTAL' )
					HORIZONTAL .T.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ITEMSOURCE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ITEMSOURCE'

			If ControlType == 'COMBOBOX'

				CurrentItemSource := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMSOURCE ' + CurrentItemSource + CRLF
				endif

				__MVPUT( Name + 'ItemSource' , CurrentItemSource )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALUESOURCE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VALUESOURCE'

			If ControlType == 'COMBOBOX'

				CurrentValueSource := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUESOURCE ' + CurrentValueSource + CRLF
				endif

				__MVPUT( Name + 'ValueSource' , CurrentValueSource )

			EndIf

		///////////////////////////////////////////////////////////////
		// FIELD PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FIELD '

			If ControlType == 'CHECKBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'DATEPICKER'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'TEXTBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'EDITBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FIELD ' + CurrentField + CRLF
				endif

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'RICHEDITBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FIELD ' + CurrentField + CRLF
				endif

				__MVPUT( Name + 'Field' , CurrentField )

			EndIf

		///////////////////////////////////////////////////////////////
		// ACTION EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ACTION'

			If ControlType == 'BUTTON'

				CurrentAction := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Action' , CurrentAction )

			ElseIf ControlType == 'IMAGE'

				CurrentAction := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Action' , CurrentAction )

			ElseIf ControlType == 'LABEL'

				CurrentAction := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Action' , CurrentAction )

			EndIf

		///////////////////////////////////////////////////////////////
		// ITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ITEMS'

			If ControlType == 'LISTBOX'

				CurrentItems := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMS ' + CurrentItems + CRLF
				endif

				__MVPUT( Name + 'Items' , CurrentItems )

			ElseIf ControlType == 'COMBOBOX'

				CurrentItems := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMS ' + CurrentItems + CRLF
				endif

				__MVPUT( Name + 'Items' , CurrentItems )

			ElseIf ControlType == 'GRID'

				CurrentItems := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMS ' + CurrentItems + CRLF
				endif

				__MVPUT( Name + 'Items' , CurrentItems )

			EndIf

		///////////////////////////////////////////////////////////////
		// SHOWHEADERS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWHEADERS'

			If ControlType == 'GRID'

				CurrentShowHeaders := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWHEADERS ' + CurrentShowHeaders + CRLF
				endif

				__MVPUT( Name + 'ShowHeaders' , CurrentShowHeaders )

			EndIf

		///////////////////////////////////////////////////////////////
		// RANGEMAX PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'RANGEMAX'

			If ControlType == 'SLIDER'

				CurrentRangeMax := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMax' , CurrentRangeMax )

			ElseIf ControlType == 'SPINNER'

				CurrentRangeMax := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMax' , CurrentRangeMax )

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentRangeMax := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMax' , CurrentRangeMax )

			EndIf

		///////////////////////////////////////////////////////////////
		// RANGEMIN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'RANGEMIN'

			If ControlType == 'SLIDER'

				CurrentRangeMin := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMin' , CurrentRangeMin )

			ElseIf ControlType == 'SPINNER'

				CurrentRangeMin := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMin' , CurrentRangeMin )

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentRangeMin := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMin' , CurrentRangeMin )

			EndIf

		///////////////////////////////////////////////////////////////
		// PICTURE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'PICTURE'

			If	ControlType == 'BUTTON'

				CurrentPicture := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_URIGHT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_ULEFT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentPicture) ) == 'NIL'
					CurrentPicture := ''
				endif

				__MVPUT( Name + 'Picture' , CurrentPicture )

			ElseIf	ControlType == 'CHECKBUTTON'

				CurrentPicture := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_URIGHT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_ULEFT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentPicture) ) == 'NIL'
					CurrentPicture := ''
				endif

				__MVPUT( Name + 'Picture' , CurrentPicture )

			ElseIf ControlType == 'IMAGE'

				CurrentPicture := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_URIGHT (CurrentPicture , HMG_LEN(CurrentPicture) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_ULEFT (CurrentPicture , HMG_LEN(CurrentPicture) - 1 )

				EndIf

				__MVPUT( Name + 'Picture' , CurrentPicture )

			EndIf

		///////////////////////////////////////////////////////////////
		// PICTALIGNMENT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'PICTALIGNMENT'

			If	ControlType == 'BUTTON'

				CurrentPictAlignment := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )

				__MVPUT( Name + 'PictAlignment' , CurrentPictAlignment )

			EndIf

		///////////////////////////////////////////////////////////////
		// INCREMENT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'INCREMENT'

			If ControlType == 'SPINNER'

				CurrentIncrement := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				__MVPUT( Name + 'Increment' , CurrentIncrement )

			EndIf

		///////////////////////////////////////////////////////////////
		// MAXLENGTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'MAXLENGTH'

			If ControlType == 'TEXTBOX'

				CurrentMaxLength := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				__MVPUT( Name + 'MaxLength' , CurrentMaxLength )

			ElseIf ControlType == 'EDITBOX'

				CurrentMaxLength := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MAXLENGTH ' + CurrentMaxLength + CRLF
				endif

				__MVPUT( Name + 'MaxLength' , CurrentMaxLength )

			ElseIf ControlType == 'RICHEDITBOX'

				CurrentMaxLength := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MAXLENGTH ' + CurrentMaxLength + CRLF
				endif

				__MVPUT( Name + 'MaxLength' , CurrentMaxLength )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALUE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VALUE'

			If ControlType == 'DATEPICKER'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'TEXTBOX'

				QuoteFlag := .F.

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

					QuoteFlag := .T.

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

					QuoteFlag := .T.

				EndIf

				if	QuoteFlag == .T.

					__MVPUT( Name + 'Value' , CurrentValue )

				Elseif 	HMG_UPPER(ALLTRIM(CurrentValue)) == 'NIL'

					__MVPUT( Name + 'Value' , '' )

				Else

					__MVPUT( Name + 'Value' , CurrentValue )

				EndIf

			ElseIf ControlType == 'EDITBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + '"' + CurrentValue + '"' + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'LABEL'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				__MVPUT( Name + 'Value' , CurrentValue )

				VALUE CurrentValue

			ElseIf ControlType == 'BROWSE'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'GRID'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'HYPERLINK'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				__MVPUT( Name + 'Value' , CurrentValue )

				VALUE CurrentValue

			ElseIf ControlType == 'RICHEDITBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + '"' + CurrentValue + '"' + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'MONTHCALENDAR'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'IPADDRESS'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'LISTBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'COMBOBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'CHECKBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'SPINNER'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'SLIDER'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'RADIOGROUP'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )


			EndIf

		///////////////////////////////////////////////////////////////
		// WORKAREA PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WORKAREA'

			If ControlType == 'BROWSE'

				CurrentWorkArea := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WORKAREA ' + CurrentWorkArea + CRLF
				endif

				__MVPUT( Name + 'WorkArea' , CurrentWorkArea )

			EndIf

		///////////////////////////////////////////////////////////////
		// FIELDS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FIELDS'

			If ControlType == 'BROWSE'

				CurrentFields := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FIELDS ' + CurrentFields + CRLF
				endif

				__MVPUT( Name + 'Fields' , CurrentFields )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALID PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VALID '

			If ControlType == 'BROWSE'

				CurrentValid := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALID ' + CurrentValid + CRLF
				endif

				__MVPUT( Name + 'Valid' , CurrentValid )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALIDMESSAGES PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VALIDMESSAGES'

			If ControlType == 'BROWSE'

				CurrentValidMessages := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALIDMESSAGES ' + CurrentValidMessages + CRLF
				endif

				__MVPUT( Name + 'ValidMessages' , CurrentValidMessages )

			EndIf

		///////////////////////////////////////////////////////////////
		// LOCK PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LOCK'

			If ControlType == 'BROWSE'

				CurrentLock := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'LOCK ' + CurrentLock + CRLF
				endif

				__MVPUT( Name + 'Lock' , CurrentLock )

			EndIf

		///////////////////////////////////////////////////////////////
		// DISABLEDBACKCOLOR PROPERTY
		///////////////////////////////////////////////////////////////
/*
		ElseIf	HMG_UPPER (Line) = 'DISABLEDBACKCOLOR'

			If ControlType == 'EDITBOX'

				CurrentDisabledBackColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISABLEDBACKCOLOR ' + CurrentDisabledBackColor + CRLF
				endif

				__MVPUT( Name + 'DisabledBackColor' , CurrentDisabledBackColor )


			ElseIf ControlType == 'TEXTBOX'

				CurrentDisabledBackColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				__MVPUT( Name + 'DisabledBackColor' , CurrentDisabledBackColor )

			EndIf

		///////////////////////////////////////////////////////////////
		// DISABLEDFONTCOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DISABLEDFONTCOLOR'

			If ControlType == 'EDITBOX'

				CurrentDisabledFontColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISABLEDFONTCOLOR ' + CurrentDisabledFontColor + CRLF
				endif

				__MVPUT( Name + 'DisabledFontColor' , CurrentDisabledFontColor )

			ElseIf ControlType == 'TEXTBOX'

				CurrentDisabledFontColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				__MVPUT( Name + 'DisabledFontColor' , CurrentDisabledFontColor )

			EndIf
*/

		///////////////////////////////////////////////////////////////
		// VSCROLLBAR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VSCROLLBAR'

			If ControlType == 'BROWSE'

				CurrentvScrollBar := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VSCROLLBAR ' + CurrentvScrollBar + CRLF
				endif

				__MVPUT( Name + 'vScrollBar' , CurrentvScrollBar )

			ElseIf ControlType == 'EDITBOX'

				CurrentvScrollBar := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VSCROLLBAR ' + CurrentvScrollBar + CRLF
				endif

				__MVPUT( Name + 'vScrollBar' , CurrentvScrollBar )

			EndIf

		///////////////////////////////////////////////////////////////
		// HSCROLLBAR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HSCROLLBAR'

			If ControlType == 'EDITBOX'

				CurrenthScrollBar := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HSCROLLBAR ' + CurrenthScrollBar + CRLF
				endif

				__MVPUT( Name + 'hScrollBar' , CurrenthScrollBar )

			EndIf

		///////////////////////////////////////////////////////////////
		// WIDTHS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WIDTHS'

			If ControlType == 'BROWSE'

				CurrentWidths := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WIDTHS ' + CurrentWidths + CRLF
				endif

				__MVPUT( Name + 'Widths' , CurrentWidths )

			ElseIf ControlType == 'GRID'

				CurrentWidths := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WIDTHS ' + CurrentWidths + CRLF
				endif

				__MVPUT( Name + 'Widths' , CurrentWidths )

			EndIf

		///////////////////////////////////////////////////////////////
		// ITEMCOUNT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ITEMCOUNT'

			If ControlType == 'GRID'

				CurrentItemCount := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMCOUNT ' + CurrentItemCount + CRLF
				endif

				__MVPUT( Name + 'ItemCount' , CurrentItemCount )

			EndIf


		///////////////////////////////////////////////////////////////
		// HEADERS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HEADERS'

			If ControlType == 'BROWSE'

				CurrentHeaders := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERS ' + CurrentHeaders + CRLF
				endif

				__MVPUT( Name + 'Headers' , CurrentHeaders )

			ElseIf ControlType == 'GRID'

				CurrentHeaders := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERS ' + CurrentHeaders + CRLF
				endif

				__MVPUT( Name + 'Headers' , CurrentHeaders )

			EndIf


		///////////////////////////////////////////////////////////////
		// HEADERIMAGES PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HEADERIMAGES'

			If ControlType == 'BROWSE'

				CurrentHeaderImages := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERIMAGES ' + CurrentHeaderImages + CRLF
				endif

				__MVPUT( Name + 'HeaderImages' , CurrentHeaderImages )

			ElseIf ControlType == 'GRID'

				CurrentHeaderImages := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERIMAGES ' + CurrentHeaderImages + CRLF
				endif

				__MVPUT( Name + 'HeaderImages' , CurrentHeaderImages )

			EndIf


		///////////////////////////////////////////////////////////////
		// OPTIONS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'OPTIONS'

			If ControlType == 'RADIOGROUP'

				CurrentOptions := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				__MVPUT( Name + 'Options' , CurrentOptions )

			EndIf

		///////////////////////////////////////////////////////////////
		// FILE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FILE'

			If ControlType == 'ANIMATEBOX'

				CurrentFile := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if	HB_ULEFT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_URIGHT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_ULEFT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				__MVPUBLIC ( Name + 'File' )
				__MVPUT( Name + 'File' , CurrentFile )

			ElseIf ControlType == 'PLAYER'

				CurrentFile := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if	HB_ULEFT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_URIGHT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_ULEFT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				__MVPUBLIC ( Name + 'File' )
				__MVPUT( Name + 'File' , CurrentFile )

			EndIf

		///////////////////////////////////////////////////////////////
		// ADDRESS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ADDRESS'

			If ControlType == 'HYPERLINK'

				CurrentAddress := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentAddress , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentAddress , 1 ) == "'"

					CurrentAddress := HB_URIGHT (CurrentAddress , HMG_LEN(CurrentAddress) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentAddress , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentAddress , 1 ) == "'"

					CurrentAddress := HB_ULEFT (CurrentAddress , HMG_LEN(CurrentAddress) - 1 )

				EndIf

				__MVPUT( Name + 'Address' , CurrentAddress )

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTNAME PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTNAME'

			If ControlType == 'BUTTON'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf ControlType == 'LISTBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"'  + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"' + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf ControlType == 'GRID'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"' + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"'  + CurrentFontName + '"'  + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'BROWSE'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"' + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'FRAME'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"'  + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

			EndIf

		///////////////////////////////////////////////////////////////
		// HELPID PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HELPID'
			If ControlType == 'BUTTON'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'CHECKBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'LISTBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'CHECKBUTTON'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'GRID'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'SLIDER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'SPINNER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'IMAGE'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'DATEPICKER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'TEXTBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'EDITBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'LABEL'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'IPADDRESS'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'BROWSE'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'PLAYER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'PROGRESSBAR'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'MONTHCALENDAR'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'HYPERLINK'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'ANIMATEBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			EndIf

		///////////////////////////////////////////////////////////////
		// BACKCOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'BACKCOLOR'
			If ControlType == 'CHECKBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'LISTBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'GRID'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'SLIDER'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'SPINNER'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'TEXTBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'EDITBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'LABEL'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'FRAME'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'PROGRESSBAR'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif

			ElseIf ControlType == 'RICHEDITBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'HYPERLINK'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// FONTCOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTCOLOR'
			If ControlType == 'CHECKBOX'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'GRID'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'SPINNER'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif

			ElseIf ControlType == 'TEXTBOX'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif

			ElseIf ControlType == 'EDITBOX'

				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'LABEL'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif

			ElseIf ControlType == 'FRAME'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif

			ElseIf ControlType == 'HYPERLINK'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// FORECOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FORECOLOR'
			If ControlType == 'PROGRESSBAR'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'ForeColor' , CurrentFontColor )
				else
					__MVPUT( Name + 'ForeColor' , 'NIL' )
				endif
			endif

		///////////////////////////////////////////////////////////////
		// DISPLAYEDIT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DISPLAYEDIT'
			If ControlType == 'COMBOBOX'

				CurrentDisplayEdit := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

				__MVPUT( Name + 'DisplayEdit' , CurrentDisplayEdit )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISPLAYEDIT ' + CurrentDisplayEdit + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// DROPPEDWIDTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DROPPEDWIDTH'
			If ControlType == 'COMBOBOX'

				CurrentDroppedWidth := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

				__MVPUT( Name + 'DroppedWidth' , CurrentDroppedWidth )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DROPPEDWIDTH ' + CurrentDroppedWidth + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// JUSTIFY PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'JUSTIFY'
			If ControlType == 'GRID'
				CurrentJustify := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Justify' , CurrentJustify )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'JUSTIFY ' + CurrentJustify + CRLF
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentJustify := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Justify' , CurrentJustify )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'JUSTIFY ' + CurrentJustify + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// IMAGE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'IMAGE'
			If ControlType == 'GRID'
				CurrentImage := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )
				__MVPUT( Name + 'Image' , CurrentImage )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'IMAGE ' + CurrentImage + CRLF
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentImage := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )
				__MVPUT( Name + 'Image' , CurrentImage )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'IMAGE ' + CurrentImage + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentImage := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )
				__MVPUT( Name + 'Image' , CurrentImage )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'IMAGE ' + CurrentImage + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// WRAP PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WRAP'
			If ControlType == 'SPINNER'
				CurrentWrap := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Wrap' , CurrentWrap )

			EndIf

		///////////////////////////////////////////////////////////////
		// CENTER PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CENTER '
			If ControlType == 'ANIMATEBOX'
				CurrentCenter := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Center' , CurrentCenter )

			EndIf

		///////////////////////////////////////////////////////////////
		// READONLY PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'READONLY '
			If ControlType == 'SPINNER'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

			ElseIf ControlType == 'TEXTBOX'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

			ElseIf ControlType == 'RICHEDITBOX'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'READONLY ' + CurrentReadOnly + CRLF
				endif

			ElseIf ControlType == 'EDITBOX'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'READONLY ' + CurrentReadOnly + CRLF
				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

			EndIf

		///////////////////////////////////////////////////////////////
		// READONLYFIELDS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'READONLYFIELDS'
			If ControlType == 'BROWSE'
				CurrentReadOnlyFields := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )
				__MVPUT( Name + 'ReadOnlyFields' , CurrentReadOnlyFields )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'READONLYFIELDS ' + CurrentReadOnlyFields + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// STRETCH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'STRETCH'
			If ControlType == 'IMAGE'
				CurrentStretch := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Stretch' , CurrentStretch )

			EndIf

		///////////////////////////////////////////////////////////////
		// FLAT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FLAT'
			If ControlType == 'BUTTON'
				CurrentFlat := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Flat' , CurrentFlat )
				if ALLTRIM(HMG_UPPER(CurrentFlat)) == '.T.'
					FLAT .T.
				else
					FLAT .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// HANDCURSOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HANDCURSOR'
			If ControlType == 'HYPERLINK'
				CurrentHandCursor := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'HandCursor' , CurrentHandCursor )
			EndIf

		///////////////////////////////////////////////////////////////
		// AUTOPLAY PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'AUTOPLAY'
			If ControlType == 'ANIMATEBOX'
				CurrentAutoPlay := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'AutoPlay' , CurrentAutoPlay )
			EndIf

		///////////////////////////////////////////////////////////////
		// SMOOTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SMOOTH'
			If ControlType == 'PROGRESSBAR'
				CurrentSmooth := ALLTRIM ( HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Smooth' , CurrentSmooth )
			EndIf

		///////////////////////////////////////////////////////////////
		// AUTOSIZE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'AUTOSIZE'
			If ControlType == 'LABEL'
				CurrentAutoSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'AutoSize' , CurrentAutoSize )
			ElseIf ControlType == 'HYPERLINK'
				CurrentAutoSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'AutoSize' , CurrentAutoSize )
			EndIf

		///////////////////////////////////////////////////////////////
		// PASSWORD PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'PASSWORD'
			If ControlType == 'TEXTBOX'
				CurrentPassword := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'Password' , CurrentPassword )
			EndIf

		///////////////////////////////////////////////////////////////
		// TABSTOP PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'TABSTOP'
			If ControlType == 'BUTTON'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'CHECKBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'LISTBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop  + CRLF
				endif

			ElseIf ControlType == 'CHECKBUTTON'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'SLIDER'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'SPINNER'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'DATEPICKER'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'TEXTBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'EDITBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop + CRLF
				endif

			ElseIf ControlType == 'IPADDRESS'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'RADIOGROUP'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop + CRLF
				endif

			ElseIf ControlType == 'MONTHCALENDAR'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			EndIf

		///////////////////////////////////////////////////////////////
		// SHOWNONE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWNONE'
			If ControlType == 'DATEPICKER'
				CurrentShowNone := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ShowNone' , CurrentShowNone )
				if ALLTRIM(HMG_UPPER(CurrentShowNone)) == '.T.'
					SHOWNONE .T.
				else
					SHOWNONE .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// UPDOWN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'UPDOWN'
			If ControlType == 'DATEPICKER'
				CurrentUpDown := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'UpDown' , CurrentUpDown )
				if ALLTRIM(HMG_UPPER(CurrentUpDown)) == '.T.'
					UPDOWN .T.
				else
					UPDOWN .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// RIGHTALIGN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'RIGHTALIGN'
			If ControlType == 'DATEPICKER'
				CurrentRightAlign := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'RightAlign' , CurrentRightAlign )
				if ALLTRIM(HMG_UPPER(CurrentRightAlign)) == '.T.'
					RIGHTALIGN .T.
				else
					RIGHTALIGN .F.
				endif
			ElseIf ControlType == 'TEXTBOX'
				CurrentRightAlign := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'RightAlign' , CurrentRightAlign )
				if ALLTRIM(HMG_UPPER(CurrentRightAlign)) == '.T.'
					RIGHTALIGN .T.
				else
					RIGHTALIGN .F.
				endif
			ElseIf ControlType == 'LABEL'
				CurrentRightAlign := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				if ALLTRIM(HMG_UPPER(CurrentRightAlign)) == '.T.'
					RIGHTALIGN .T.
					__MVPUT( Name + 'Alignment' , 'RIGHT' )
				else
					RIGHTALIGN .F.
					__MVPUT( Name + 'Alignment' , 'LEFT' )
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// CENTERALIGN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CENTERALIGN'
			If ControlType == 'LABEL'
				CurrentCenterAlign := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				if ALLTRIM(HMG_UPPER(CurrentCenterAlign)) == '.T.'
					__MVPUT( Name + 'Alignment' , 'CENTER' )
					CENTERALIGN .T.
				else
					__MVPUT( Name + 'Alignment' , 'LEFT' )
					CENTERALIGN .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// VISIBLE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VISIBLE'
			If ControlType == 'BUTTON'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'CHECKBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'LISTBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'CHECKBUTTON'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'SLIDER'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'SPINNER'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'IMAGE'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'DATEPICKER'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'TEXTBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'EDITBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'LABEL'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'IPADDRESS'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'RADIOGROUP'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'PROGRESSBAR'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'MONTHCALENDAR'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'HYPERLINK'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			EndIf

		///////////////////////////////////////////////////////////////
		// ALLOWEDIT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ALLOWEDIT'
			If ControlType == 'GRID'
				CurrentAllowEdit := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'AllowEdit' , CurrentAllowEdit )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWEDIT ' + CurrentAllowEdit + CRLF
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentAllowEdit := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'AllowEdit' , CurrentAllowEdit )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWEDIT ' + CurrentAllowEdit + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ALLOWAPPEND PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ALLOWAPPEND'
			If ControlType == 'BROWSE'
				CurrentAllowAppend := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'AllowAppend' , CurrentAllowAppend )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWAPPEND ' + CurrentAllowAppend + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ALLOWDELETE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ALLOWDELETE'
			If ControlType == 'BROWSE'
				CurrentAllowDelete := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'AllowDelete' , CurrentAllowDelete )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWDELETE ' + CurrentAllowDelete + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// VIRTUAL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VIRTUAL'
			If ControlType == 'GRID'
				CurrentVirtual := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Virtual' , CurrentVirtual )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VIRTUAL ' + CurrentVirtual + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// LINES PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOLINES'
			If ControlType == 'GRID'
				CurrentLines := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOLINES ' + CurrentLines + CRLF

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				else

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						NOLINES .T.
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						NOLINES .F.
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				endif

			ElseIf ControlType == 'BROWSE'
				CurrentLines := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOLINES ' + CurrentLines + CRLF

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				else

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						NOLINES .T.
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						NOLINES .F.
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// TRANSPARENT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'TRANSPARENT'
			If ControlType == 'BUTTON'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'CHECKBOX'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'LABEL'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'RADIOGROUP'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'FRAME'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
				if ALLTRIM(HMG_UPPER(CurrentTransparent)) == '.F.'
					OPAQUE .T.
				endif
			ElseIf ControlType == 'ANIMATEBOX'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			EndIf

		///////////////////////////////////////////////////////////////
		// OPAQUE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'OPAQUE'
			If ControlType == 'FRAME'
				CurrentOpaque := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				if ALLTRIM(HMG_UPPER(CurrentOpaque)) == '.T.'
					__MVPUT( Name + 'Transparent' , '.F.' )
					OPAQUE .T.
				else
					__MVPUT( Name + 'Transparent' , '.T.' )
					OPAQUE .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// FONTSIZE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTSIZE'

			If ControlType == 'BUTTON'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf ControlType == 'LISTBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf ControlType == 'GRID'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'BROWSE'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				CurrentFontSize := VAL ( CurrentFontSize )

			ElseIf	ControlType == 'FRAME'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			EndIf

		///////////////////////////////////////////////////////////////
		// SPACING PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SPACING'

			If	ControlType == 'RADIOGROUP'
				CurrentSpacing := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Spacing' , CurrentSpacing )
				CurrentSpacing := VAL ( CurrentSpacing )
			EndIf

		///////////////////////////////////////////////////////////////
		// TOOLTIP PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'TOOLTIP'

			If ControlType == 'BUTTON'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'CHECKBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'LISTBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'COMBOBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'CHECKBUTTON'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'GRID'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'SLIDER'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'SPINNER'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'DATEPICKER'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'TEXTBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'EDITBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'BROWSE'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'HYPERLINK'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'PROGRESSBAR'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'IPADDRESS'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			EndIf


		///////////////////////////////////////////////////////////////
		// ONDROPDOWN EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONDROPDOWN'

			If ControlType == 'COMBOBOX'
				CurrentOnDropDown := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDropDown' , CurrentOnDropDown )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDROPDOWN ' + CurrentOnDropDown + CRLF
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// ONCLOSEUP EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONCLOSEUP'

			If ControlType == 'COMBOBOX'
				CurrentOnCloseUp := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'OnCloseUp' , CurrentOnCloseUp )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCLOSEUP ' + CurrentOnCloseUp + CRLF
				endif
			EndIf


		///////////////////////////////////////////////////////////////
		// ONENTER EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONENTER'
			If ControlType == 'COMBOBOX'
				CurrentOnEnter := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'OnEnter' , CurrentOnEnter )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONENTER ' + CurrentOnEnter + CRLF
				endif

			ElseIf ControlType == 'DATEPICKER'
				CurrentOnEnter := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'OnEnter' , CurrentOnEnter )
			ElseIf ControlType == 'TEXTBOX'
				CurrentOnEnter := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'OnEnter' , CurrentOnEnter )
			EndIf

		///////////////////////////////////////////////////////////////
		// ONDISPLAYCHANGE EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONDISPLAYCHANGE'
			If ControlType == 'COMBOBOX'
				CurrentOnDisplayChange := ALLTRIM(HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 ) )
				__MVPUT( Name + 'OnDisplayChange' , CurrentOnDisplayChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDISPLAYCHANGE ' + CurrentOnDisplayChange + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONCHANGE EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONCHANGE'

			If ControlType == 'CHECKBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'LISTBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'COMBOBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'CHECKBUTTON'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'GRID'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'SLIDER'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'SPINNER'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'DATEPICKER'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'TEXTBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'EDITBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			EndIf

		///////////////////////////////////////////////////////////////
		// ONGOTFOCUS EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONGOTFOCUS'

			If	ControlType == 'BUTTON'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'CHECKBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'LISTBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'COMBOBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'CHECKBUTTON'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'GRID'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'SPINNER'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'DATEPICKER'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'TEXTBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'EDITBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'RADIOGROUP'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'RICHEDITBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'IPADDRESS'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			EndIf

		///////////////////////////////////////////////////////////////
		// ONSAVE EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONSAVE'

			If	ControlType == 'GRID'
				CurrentOnSave := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'OnSave' , CurrentOnSave )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONSAVE ' + CurrentOnSave + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONDBLCLICK EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONDBLCLICK'

			If	ControlType == 'LISTBOX'
				CurrentOnDblClick := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDblClick' , CurrentOnDblClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDBLCLICK ' + CurrentOnDblClick + CRLF
				endif

			ElseIf	ControlType == 'GRID'
				CurrentOnDblClick := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDblClick' , CurrentOnDblClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDBLCLICK ' + CurrentOnDblClick + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnDblClick := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDblClick' , CurrentOnDblClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDBLCLICK ' + CurrentOnDblClick + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONHEADCLICK EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONHEADCLICK'

			If	ControlType == 'GRID'
				CurrentOnHeadClick := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnHeadClick' , CurrentOnHeadClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONHEADCLICK ' + CurrentOnHeadClick + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnHeadClick := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnHeadClick' , CurrentOnHeadClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONHEADCLICK ' + CurrentOnHeadClick + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONQUERYDATA EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONQUERYDATA'

			If	ControlType == 'GRID'
				CurrentOnQueryData := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnQueryData' , CurrentOnQueryData )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONQUERYDATA ' + CurrentOnQueryData + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONLOSTFOCUS EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONLOSTFOCUS'

			If	ControlType == 'BUTTON'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'CHECKBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'LISTBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'COMBOBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'CHECKBUTTON'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'GRID'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'SPINNER'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'DATEPICKER'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'TEXTBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'EDITBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'RADIOGROUP'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'RICHEDITBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'IPADDRESS'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			EndIf

		///////////////////////////////////////////////////////////////
		// INPUTMASK PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'INPUTMASK'

			If	ControlType == 'TEXTBOX'

				CurrentInputMask := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if	HB_ULEFT ( CurrentInputMask , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentInputMask , 1 ) == "'"

					CurrentInputMask := HB_URIGHT ( CurrentInputMask , HMG_LEN( CurrentInputMask ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentInputMask , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentInputMask , 1 ) == "'"

					CurrentInputMask := HB_ULEFT ( CurrentInputMask , HMG_LEN( CurrentInputMask ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentInputMask) ) == 'NIL'
					CurrentInputMask := ''
				endif

				__MVPUT( Name + 'InputMask' , CurrentInputMask )

			EndIf

			If	ControlType == 'BROWSE'

				CurrentInputMask := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'InputMask' , CurrentInputMask )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'INPUTMASK ' + CurrentInputMask + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FORMAT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FORMAT'

			If	ControlType == 'TEXTBOX'

				CurrentFormat := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if	HB_ULEFT ( CurrentFormat , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFormat , 1 ) == "'"

					CurrentFormat := HB_URIGHT ( CurrentFormat , HMG_LEN( CurrentFormat ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFormat , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFormat , 1 ) == "'"

					CurrentFormat := HB_ULEFT ( CurrentFormat , HMG_LEN( CurrentFormat ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentFormat) ) == 'NIL'
					CurrentFormat := ''
				endif

				__MVPUT( Name + 'Format' , CurrentFormat )

			EndIf

			If	ControlType == 'BROWSE'
				CurrentFormat := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Format' , CurrentFormat )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FORMAT ' + CurrentFormat + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// NUMERIC PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NUMERIC'

			If	ControlType == 'TEXTBOX'

				CurrentNumeric := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if ALLTRIM(HMG_UPPER(CurrentNumeric)) == '.T.'
					__MVPUT( Name + 'DataType' , 'NUMERIC' )
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// SORT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SORT'

			If ControlType == 'LISTBOX'
				CurrentSort := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Sort' , CurrentSort )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SORT ' + CurrentSort + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentSort := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Sort' , CurrentSort )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SORT ' + CurrentSort + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// MULTISELECT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'MULTISELECT'

			If ControlType == 'LISTBOX'
				CurrentMultiSelect := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'MultiSelect' , CurrentMultiSelect )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MULTISELECT ' + CurrentMultiSelect + CRLF
				endif

			ElseIf ControlType == 'GRID'
				CurrentMultiSelect := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'MultiSelect' , CurrentMultiSelect )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MULTISELECT ' + CurrentMultiSelect + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// CELLNAVIGATION PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CELLNAVIGATION'

			If ControlType == 'GRID'
				CurrentCellNavigation := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )
				__MVPUT( Name + 'CellNavigation' , CurrentCellNavigation )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'CELLNAVIGATION ' + CurrentCellNavigation + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// MULTILINE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'MULTILINE'

			If ControlType == 'BUTTON'

				CurrentMultiLine := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'MultiLine' , CurrentMultiLine )
				if ALLTRIM(HMG_UPPER(CurrentMultiLine)) == '.T.'
					MULTILINE .T.
				else
					MULTILINE .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTBOLD PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTBOLD'

			If ControlType == 'BUTTON'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTITALIC PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTITALIC'

			If ControlType == 'BUTTON'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTSTRIKEOUT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTSTRIKEOUT'

			If ControlType == 'BUTTON'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTUNDERLINE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTUNDERLINE'

			If ControlType == 'BUTTON'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			EndIf


		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////
		// DEFINE WINDOW COMMAND
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DEFINE WINDOW TEMPLATE'

			* Determine AT

			a := 27
			b := HB_UAT ( "," , HMG_UPPER (Line) )
			c := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			WinRow := HB_USUBSTR ( Line , a , b-a )
			WinCol := HB_USUBSTR ( Line , b + 1 , c-b  )

			* Determine Width

			a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			if a > 0

				Width := ''
				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Width := Width + Char
					EndIf
				Next z

			EndIf

			* Determine Height

			a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				Height := ''
				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Height := Height + Char
					EndIf
				Next z

			EndIf


			* Determine Virtual Width

			a := HB_UAT ( " VIRTUAL WIDTH " , HMG_UPPER (Line) )

			if a > 0

				VirtualWidth := ''
				Started := .F.

				For z := a + 14 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						VirtualWidth := VirtualWidth + Char
					EndIf
				Next z

			else

				VirtualWidth := 'Nil'

			EndIf

			if VirtualWidth = 'Nil'
				lVirtualForm := .F.
			else
				lVirtualForm := .T.
			endif

			* Determine Virtual Height

			a := HB_UAT ( " VIRTUAL HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				VirtualHeight := ''
				Started := .F.

				For z := a + 15 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						VirtualHeight := VirtualHeight + Char
					EndIf
				Next z

			else

				VirtualHeight := 'Nil'

			EndIf

			if VirtualHeight = 'Nil'
				lVirtualForm := .F.
			else
				lVirtualForm := .T.
			endif

			__MVPUBLIC	( DesignForm + 'VirtualWidth' )
			__MVPUBLIC	( DesignForm + 'VirtualHeight' )
			__MVPUBLIC	( DesignForm + 'VirtualSized' )
			__MVPUT		( DesignForm + 'VirtualWidth' , VirtualWidth )
			__MVPUT		( DesignForm + 'VirtualHeight' , VirtualHeight )

			if VirtualHeight = 'Nil' .and. VirtualWidth = 'Nil'
				__MVPUT		( DesignForm + 'VirtualSized' , '.F.' )
			else
				__MVPUT		( DesignForm + 'VirtualSized' , '.T.' )
			endif


			* Determine Title

			a := HB_UAT ( " TITLE " , HMG_UPPER (Line) )

			Title := ''

			if a > 0

				For z := a + 8 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						exit
					Else
						Title := Title + Char
					EndIf
				Next z

			EndIf

			Title := ALLTRIM(Title)

			line := HB_URIGHT (line , HMG_LEN(line) - z )

			line := ALLTRIM(line)


			* Determine Icon

			Icon := ""

			if line = 'ICON NIL'
				icon := ""
				line := HB_URIGHT ( line , HMG_LEN(line) - 8 )

			elseif line = 'ICON "'

				For z := 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						Exit
					Else
						Icon := Icon + Char
					EndIf
				Next z

				line := HB_URIGHT ( line , HMG_LEN(line) - z )

			EndIf

			Icon := ALLTRIM(Icon)

			line := ALLTRIM(line)


			* Determine Type

			if	line = "MAIN "

				WindowType := 'MAIN'

			elseif	line = "MODAL "

				WindowType := 'MODAL'

			elseif  line = "CHILD "

				WindowType := 'CHILD'

			elseif  line = "PANEL "

				WindowType := 'PANEL'

			elseif line = "SPLITCHILD "

				WindowType := 'SPLITCHILD'

			else

				WindowType := 'STANDARD'

				line := ' ' + line
			endif

			/*
			MsgInfo ( WindowType , 'WindowType' )
			MsgInfo ( Width , 'Width' )
			MsgInfo ( Height , 'Height' )
			MsgInfo ( VirtualWidth , 'VirtualWidth' )
			MsgInfo ( VirtualHeight , 'VirtualHeight' )
                        */

			New(.F.)
			OpenFormName := FileName


			If ! Empty ( Width )
				SetProperty ( DesignForm , 'Width' , VAL (Width) )
			EndIf

			If ! Empty ( Height )
				SetProperty ( DesignForm , 'Height' , VAL (Height) )
			EndIf

			If ! Empty ( Title )
				SetProperty ( DesignForm , 'Title' , Title )
			EndIf


			If ! Empty ( WinRow )
				SetProperty ( DesignForm , 'Row' , VAL(WinRow) )
			EndIf

			If ! Empty ( WinCol )
				SetProperty ( DesignForm , 'Col' , VAL(WinCol) )
			EndIf

			__MVPUT ( DesignForm + 'WindowType' , WindowType )
			__MVPUT		( DesignForm + 'Icon' , Icon )

			////////////////////////////////////////////////////////
			If	WindowType == 'STANDARD' ;
				.Or. ;
				WindowType == 'MAIN' ;
				.Or. ;
				WindowType == 'CHILD' ;
				.Or. ;
				WindowType == 'PANEL'

			////////////////////////////////////////////////////////

				*..............................................
				* Determine Caption
				*..............................................

				a := HB_UAT ( " NOCAPTION " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'TitleBar' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'TitleBar' , '.T.' )
				EndIf

				*..............................................
				* Determine SysMenu
				*..............................................

				a := HB_UAT ( " NOSYSMENU " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'SysMenu' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'SysMenu' , '.T.' )
				EndIf

				*..............................................
				* Determine Visible
				*..............................................

				a := HB_UAT ( " NOSHOW " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Visible' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Visible' , '.T.' )
				EndIf

				*..............................................
				* Determine Topmost
				*..............................................

				a := HB_UAT ( " TOPMOST " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Topmost' , '.T.' )
				Else
					__MVPUT ( DesignForm + 'Topmost' , '.F.' )
				EndIf

				*..............................................
				* Determine AutoRelease
				*..............................................

				a := HB_UAT ( " NOAUTORELEASE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'AutoRelease' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'AutoRelease' , '.T.' )
				EndIf

				*..............................................
				* Determine MaxButton
				*..............................................

				a := HB_UAT ( " NOMAXIMIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'MaxButton' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'MaxButton' , '.T.' )
				EndIf

				*..............................................
				* Determine MinButton
				*..............................................

				a := HB_UAT ( " NOMINIMIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'MinButton' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'MinButton' , '.T.' )
				EndIf

				*..............................................
				* Determine Sizable
				*..............................................

				a := HB_UAT ( " NOSIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Sizable' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Sizable' , '.T.' )
				EndIf

				*..............................................
				* Determine Cursor
				*..............................................

				a := HB_UAT ( " CURSOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 8 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON INIT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'Cursor' , ClauseArgument )

				*..............................................
				* Determine OnInit
				*..............................................

				a := HB_UAT ( " ON INIT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'ON RELEASE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInit' , ClauseArgument )

				*..............................................
				* Determine OnRelease
				*..............................................

				a := HB_UAT ( " ON RELEASE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 12 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 19 )

						if NextToken == 'ON INTERACTIVECLOSE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnRelease' , ClauseArgument )

				*..............................................
				* Determine OnInteractiveClose
				*..............................................

				a := HB_UAT ( " ON INTERACTIVECLOSE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 21 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON MOUSECLICK'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInteractiveClose' , ClauseArgument )

				*..............................................
				* Determine OnMouseClick
				*..............................................

				a := HB_UAT ( " ON MOUSECLICK " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEDRAG'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseClick' , ClauseArgument )

				*..............................................
				* Determine OnMouseDrag
				*..............................................

				a := HB_UAT ( " ON MOUSEDRAG " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEMOVE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseDrag' , ClauseArgument )

				* Determine OnMouseMove

				a := HB_UAT ( " ON MOUSEMOVE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON SIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseMove' , ClauseArgument )

				*..............................................
				* Determine OnSize
				*..............................................

				a := HB_UAT ( " ON SIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON MAXIMIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnSize' , ClauseArgument )

				*..............................................
				* Determine OnMaximize
				*..............................................

				a := HB_UAT ( " ON MAXIMIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON MINIMIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMaximize' , ClauseArgument )

				*..............................................
				* Determine OnMinimize
				*..............................................

				a := HB_UAT ( " ON MINIMIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 8 )

						if NextToken == 'ON PAINT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMinimize' , ClauseArgument )

				*..............................................
				* Determine OnPaint
				*..............................................

				a := HB_UAT ( " ON PAINT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 10 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 9 )

						if NextToken == 'BACKCOLOR'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnPaint' , ClauseArgument )

				*..............................................
				* Determine BackColor
				*..............................................

				a := HB_UAT ( " BACKCOLOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 11 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'NOTIFYICON'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'BackColor' , ClauseArgument )

				if ALLTRIM(HMG_UPPER(ClauseArgument)) = '{'
					SetWindowBackColor ( DesignFormHandle , &ClauseArgument )
				endif

				*..............................................
				* Determine NotifyIcon
				*..............................................

				a := HB_UAT ( " NOTIFYICON " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 12 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'NOTIFYTOOLTIP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

					if HMG_UPPER (ClauseArgument) == 'NIL'

						ClauseArgument := ''

					Else

						ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
						ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )

					EndIf

				EndIf

				__MVPUT ( DesignForm + 'NotifyIcon' , ClauseArgument )

				*..............................................
				* Determine NotifyToolTip
				*..............................................

				a := HB_UAT ( " NOTIFYTOOLTIP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON NOTIFYCLICK'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

					if HMG_UPPER (ClauseArgument) == 'NIL'

						ClauseArgument := ''

					Else

						ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
						ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )

					EndIf

				EndIf

				__MVPUT ( DesignForm + 'NotifyToolTip' , ClauseArgument )

				*..............................................
				* Determine OnNotifyClick
				*..............................................

				a := HB_UAT ( " ON NOTIFYCLICK " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON GOTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnNotifyClick' , ClauseArgument )

				*..............................................
				* Determine OnGotFocus
				*..............................................

				a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON LOSTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnGotFocus' , ClauseArgument )

				*..............................................
				* Determine OnLostFocus
				*..............................................

				a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON SCROLLUP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnLostFocus' , ClauseArgument )

				*..............................................
				* Determine OnScrollUp
				*..............................................

				a := HB_UAT ( " ON SCROLLUP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLDOWN'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollUp' , ClauseArgument )
				*..............................................
				* Determine OnScrollDown
				*..............................................

				a := HB_UAT ( " ON SCROLLDOWN " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLLEFT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollDown' , ClauseArgument )
				*..............................................
				* Determine OnScrollLeft
				*..............................................

				a := HB_UAT ( " ON SCROLLLEFT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON SCROLLRIGHT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollLeft' , ClauseArgument )
				*..............................................
				* Determine OnScrollRight
				*..............................................

				a := HB_UAT ( " ON SCROLLRIGHT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON HSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollRight' , ClauseArgument )
				*..............................................
				* Determine OnHScroolBox
				*..............................................

				a := HB_UAT ( " ON HSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON VSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnHScrollBox' , ClauseArgument )

				*..............................................
				* Determine OnVScroolBox
				*..............................................

				a := HB_UAT ( " ON VSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'HELPBUTTON'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnVScrollBox' , ClauseArgument )

				*..............................................
				* Determine HelpButton
				*..............................................

				a := HB_UAT ( " HELPBUTTON" , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'HelpButton' , '.T.' )
				EndIf

			////////////////////////////////////////////////////////
			ElseIf	WindowType == 'MODAL'
			////////////////////////////////////////////////////////

				*..............................................
				* Determine Caption
				*..............................................

				a := HB_UAT ( " NOCAPTION " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'TitleBar' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'TitleBar' , '.T.' )
				EndIf

				*..............................................
				* Determine SysMenu
				*..............................................

				a := HB_UAT ( " NOSYSMENU " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'SysMenu' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'SysMenu' , '.T.' )
				EndIf

				*..............................................
				* Determine Visible
				*..............................................

				a := HB_UAT ( " NOSHOW " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Visible' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Visible' , '.T.' )
				EndIf

				*..............................................
				* Determine AutoRelease
				*..............................................

				a := HB_UAT ( " NOAUTORELEASE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'AutoRelease' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'AutoRelease' , '.T.' )
				EndIf

				*..............................................
				* Determine Sizable
				*..............................................

				a := HB_UAT ( " NOSIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Sizable' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Sizable' , '.T.' )
				EndIf

				*..............................................
				* Determine Cursor
				*..............................................

				a := HB_UAT ( " CURSOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 8 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON INIT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'Cursor' , ClauseArgument )

				*..............................................
				* Determine OnInit
				*..............................................

				a := HB_UAT ( " ON INIT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'ON RELEASE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInit' , ClauseArgument )

				*..............................................
				* Determine OnRelease
				*..............................................

				a := HB_UAT ( " ON RELEASE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 12 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 19 )

						if NextToken == 'ON INTERACTIVECLOSE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnRelease' , ClauseArgument )

				*..............................................
				* Determine OnInteractiveClose
				*..............................................

				a := HB_UAT ( " ON INTERACTIVECLOSE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 21 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON MOUSECLICK'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInteractiveClose' , ClauseArgument )

				*..............................................
				* Determine OnMouseClick
				*..............................................

				a := HB_UAT ( " ON MOUSECLICK " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEDRAG'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseClick' , ClauseArgument )

				*..............................................
				* Determine OnMouseDrag
				*..............................................

				a := HB_UAT ( " ON MOUSEDRAG " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEMOVE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseDrag' , ClauseArgument )

				*..............................................
				* Determine OnMouseMove
				*..............................................

				a := HB_UAT ( " ON MOUSEMOVE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON SIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseMove' , ClauseArgument )

				*..............................................
				* Determine OnSize
				*..............................................

				a := HB_UAT ( " ON SIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 8 )

						if NextToken == 'ON PAINT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnSize' , ClauseArgument )

				*..............................................
				* Determine OnPaint
				*..............................................

				a := HB_UAT ( " ON PAINT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 10 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 9 )

						if NextToken == 'BACKCOLOR'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnPaint' , ClauseArgument )

				*..............................................
				* Determine BackColor
				*..............................................

				a := HB_UAT ( " BACKCOLOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 11 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON GOTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'BackColor' , ClauseArgument )

				if ALLTRIM(HMG_UPPER(ClauseArgument)) = '{'
					SetWindowBackColor ( DesignFormHandle , &ClauseArgument )
				endif

				*..............................................
				* Determine OnGotFocus
				*..............................................

				a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON LOSTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnGotFocus' , ClauseArgument )

				*..............................................
				* Determine OnLostFocus
				*..............................................

				a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON SCROLLUP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnLostFocus' , ClauseArgument )

				*..............................................
				* Determine OnScrollUp
				*..............................................

				a := HB_UAT ( " ON SCROLLUP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLDOWN'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollUp' , ClauseArgument )
				*..............................................
				* Determine OnScrollDown
				*..............................................

				a := HB_UAT ( " ON SCROLLDOWN " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLLEFT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollDown' , ClauseArgument )
				*..............................................
				* Determine OnScrollLeft
				*..............................................

				a := HB_UAT ( " ON SCROLLLEFT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON SCROLLRIGHT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollLeft' , ClauseArgument )
				*..............................................
				* Determine OnScrollRight
				*..............................................

				a := HB_UAT ( " ON SCROLLRIGHT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON HSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollRight' , ClauseArgument )
				*..............................................
				* Determine OnHScroolBox
				*..............................................

				a := HB_UAT ( " ON HSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON VSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnHScrollBox' , ClauseArgument )
				*..............................................
				* Determine OnVScroolBox
				*..............................................

				a := HB_UAT ( " ON VSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'HELPBUTTON'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnVScrollBox' , ClauseArgument )

				*..............................................
				* Determine HelpButton
				*..............................................

				a := HB_UAT ( " HELPBUTTON" , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'HelpButton' , '.T.' )
				EndIf

			////////////////////////////////////////////////////////
			ElseIf	WindowType == 'SPLITCHILD'
			////////////////////////////////////////////////////////

				*..............................................
				* Determine Caption
				*..............................................

				a := HB_UAT ( " NOCAPTION " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'TitleBar' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'TitleBar' , '.T.' )
				EndIf

				*..............................................
				* Determine Break
				*..............................................

				a := HB_UAT ( " BREAK " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Break' , '.T.' )
				Else
					__MVPUT ( DesignForm + 'Break' , '.F.' )
				EndIf

				*..............................................
				* Determine Focused
				*..............................................

				a := HB_UAT ( " FOCUSED " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Focused' , '.T.' )
				Else
					__MVPUT ( DesignForm + 'Focused' , '.F.' )
				EndIf

				*..............................................
				* Determine Cursor
				*..............................................

				a := HB_UAT ( " CURSOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 8 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )
						if NextToken == 'ON GOTFOCUS'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 11 )
						if NextToken == 'GRIPPERTEXT'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 5 )
						if NextToken == 'BREAK'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 7 )
						if NextToken == 'FOCUSED'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'Cursor' , ClauseArgument )

				*..............................................
				* Determine GripperText
				*..............................................

				a := HB_UAT ( " GRIPPERTEXT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 5 )
						if NextToken == 'BREAK'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 7 )
						if NextToken == 'FOCUSED'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 11 )
						if NextToken == 'ON GOTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'GripperText' , ClauseArgument )

				*..............................................
				* Determine OnGotFocus
				*..............................................

				a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON LOSTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnGotFocus' , ClauseArgument )

				*..............................................
				* Determine OnLostFocus
				*..............................................

				a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON SCROLLUP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnLostFocus' , ClauseArgument )

				*..............................................
				* Determine OnScrollUp
				*..............................................

				a := HB_UAT ( " ON SCROLLUP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLDOWN'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollUp' , ClauseArgument )
				*..............................................
				* Determine OnScrollDown
				*..............................................

				a := HB_UAT ( " ON SCROLLDOWN " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLLEFT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollDown' , ClauseArgument )
				*..............................................
				* Determine OnScrollLeft
				*..............................................

				a := HB_UAT ( " ON SCROLLLEFT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON SCROLLRIGHT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollLeft' , ClauseArgument )
				*..............................................
				* Determine OnScrollRight
				*..............................................

				a := HB_UAT ( " ON SCROLLRIGHT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON HSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollRight' , ClauseArgument )
				*..............................................
				* Determine OnHScroolBox
				*..............................................

				a := HB_UAT ( " ON HSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON VSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnHScrollBox' , ClauseArgument )
				*..............................................
				* Determine OnVScroolBox
				*..............................................

				a := HB_UAT ( " ON VSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					//Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnVScrollBox' , ClauseArgument )

			EndIf

		EndIf

	Next i

	loading.hide

	UpdateCombo()
	Properties.Combo_1.Value := 1
	DesignFormModified := .F.

	if ! _IsWindowDefined ( 'Form_1' )

		__MVPUBLIC	( DesignForm + 'VirtualWidth' )
		__MVPUBLIC	( DesignForm + 'VirtualHeight' )
		__MVPUBLIC	( DesignForm + 'VirtualSized' )
		__MVPUT		( DesignForm + 'VirtualWidth' , 'Nil' )
		__MVPUT		( DesignForm + 'VirtualHeight' , 'Nil' )
		__MVPUT		( DesignForm + 'VirtualSized' , '.F.' )

		lVirtualForm := .F.

		New(.F.)
		OpenFormName := FileName

	endif

	UpdateDesignFormProperties()

	If nComponentCount > 0
		Form_main.user.enabled := .T.
	EndIf

	DoMethod (DesignForm , 'Activate')

	If nComponentCount > 0
		Form_main.user.enabled := .F.
	EndIf

	lVirtualForm := .F.

RETURN

*------------------------------------------------------------------------------*
STATIC PROCEDURE UpdateCombo
*------------------------------------------------------------------------------*
   LOCAL i

   Properties.Combo_1.DeleteAllItems

   Properties.Combo_1.AddItem ( 'Form' )

   FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )

      IF _HMG_aControlParenthandles[ i ] == DesignFormhandle

         If ! Empty ( _HMG_aControlNames[ i ] ) .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'INTERNAL_TIMER_1' .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'TEXT_DUMMY' .AND. _HMG_aControlDeleted[ i ] == .F.

            Properties.Combo_1.AddItem ( _HMG_aControlNames[ i ] )

         ENDIF

      ENDIF

   NEXT i

RETURN

*------------------------------------------------------------------------------*
STATIC FUNCTION RemoveExtraSpaces ( Line )
*------------------------------------------------------------------------------*
   LOCAL i, l, c, p, NewLine

   l := HMG_LEN ( Line )

   p := ''
   NewLine := ''

   FOR i := 1 TO l

      c := hb_USubStr ( Line, i, 1 )

      if !( c == ' ' .AND. p == ' ' )

         IF c != Chr ( 8 )
            NewLine := NewLine + c
         ENDIF

      ENDIF

      p := c

   NEXT i

RETURN ( NewLine )

*------------------------------------------------------------------------------*
STATIC FUNCTION HitTest ( mr, mc, cr, cc, cw, ch )
*------------------------------------------------------------------------------*
   LOCAL RetVal := .F.

   IF mr >= cr ;
         .AND. ;
         mr <= ( cr + ch ) ;
         .AND. ;
         mc >= cc ;
         .AND. ;
         mc <= ( cc + cw )

      RetVal := .T.

   ENDIF

RETURN RetVal

*------------------------------------------------------------------------------*
STATIC FUNCTION TabHit ( TestRow, TestCol )
*------------------------------------------------------------------------------*
   LOCAL ControlRow, ControlCol, ControlWidth, ControlHeight
   LOCAL i
   LOCAL TabName := ''

   FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )

      IF _HMG_aControlParenthandles[ i ] == DesignFormhandle

         IF _HMG_aControlType[ i ] == 'TAB'

            ControlRow := _HMG_aControlRow[ i ]
            ControlCol := _HMG_aControlCol[ i ]
            ControlWidth := _HMG_aControlWidth[ i ]
            ControlHeight := _HMG_aControlHeight[ i ]

            IF HitTest( TestRow, TestCol, ControlRow, ControlCol, ControlWidth, ControlHeight ) == .T.
               TabName := _HMG_aControlNames[ i ]
               EXIT
            ENDIF

         ENDIF

      ENDIF

   NEXT i

RETURN TabName

*------------------------------------------------------------------------------*
STATIC FUNCTION IsFrameActive( i )
*------------------------------------------------------------------------------*
   LOCAL TabValue
   LOCAL RetVal
   LOCAL x
   LOCAL PageMap
   LOCAL y
   LOCAL z
   LOCAL TabIndex
   LOCAL TabPage

   IF _HMG_aControlContainerRow[ i ] == -1 .AND. _HMG_aControlContainerCol[ i ] == -1
      RetVal := .T.
   ELSE

      FOR x := 1 TO HMG_LEN ( _HMG_aControlHandles )

         IF _HMG_aControlType[ x ] == 'TAB' .AND. _HMG_aControlParenthandles[ x ] == DesignFormHandle

            PageMap := _HMG_aControlPageMap[ x ]

            FOR y := 1 TO HMG_LEN ( PageMap )

               FOR z := 1 TO HMG_LEN ( PageMap[ y ] )

                  IF ValType ( PageMap[ y ][ z ] ) == 'N'

                     IF PageMap[ y ][ z ] == _HMG_aControlHandles[ i ]
                        TabIndex := x
                        TabPage := y
                        EXIT
                     ENDIF

                  ENDIF

               NEXT z

            NEXT y

         ENDIF

      NEXT x

      TabValue := GetProperty ( DesignForm, _HMG_aControlNames[ TabIndex ], 'Value' )

      IF TabValue == TabPage
         RetVal := .T.
      ELSE
         RetVal := .F.
      ENDIF

   ENDIF

RETURN RetVal

*------------------------------------------------------------------------------*
FUNCTION Save ( lView )
*------------------------------------------------------------------------------*
   LOCAL aTemp
   LOCAL i
   LOCAL Code := ''
   LOCAL PageMap
   LOCAL x
   LOCAL j
   LOCAL k
   LOCAL idx
   LOCAL RetVal := NIL
   LOCAL WindowType
   LOCAL a
   LOCAL ImageFlag
   LOCAL b

   if ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN NIL
   ENDIF

   IF Empty ( OpenFormName )
      RETURN NIL
   ENDIF

   WindowType := AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'WindowType' ) ) )

   Code := Code + _GCN + CRLF + CRLF

   IF WindowType == 'STANDARD' ;
         .OR. ;
         WindowType == 'MAIN' ;
         .OR. ;
         WindowType == 'CHILD' ;
         .OR. ;
         WindowType == 'PANEL'


      Code := Code + 'DEFINE WINDOW TEMPLATE AT ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Row' ) ) ) ;
         + ' , ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Col' ) ) ) ;
         + ' WIDTH ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Width' ) ) ) ;
         + ' HEIGHT ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Height' ) ) ) ;
         + ' VIRTUAL WIDTH ' ;
         +AllTrim( __mvGet ( DesignForm + 'VirtualWidth' ) ) ;
         + ' VIRTUAL HEIGHT ' ;
         +AllTrim( __mvGet ( DesignForm + 'VirtualHeight' ) ) ;
         + ' TITLE ' ;
         +Chr( 34 ) + GetProperty ( DesignForm, 'Title' ) + Chr( 34 )

      IF Empty ( __mvGet ( DesignForm + 'Icon' ) )
         Code := Code + ' ICON NIL'
      ELSE
         Code := Code + ' ICON ' + Chr( 34 ) + __mvGet ( DesignForm + 'Icon' ) + Chr( 34 )
      ENDIF

      Code := Code + ' ' + if ( HMG_UPPER ( __mvGet ( DesignForm + 'WindowType' ) ) == 'STANDARD', '', HMG_UPPER ( __mvGet ( DesignForm + 'WindowType' ) ) )

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'Visible' ) ) ) == '.F.'
         Code := Code + ' NOSHOW'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'Topmost' ) ) ) == '.T.'
         Code := Code + ' TOPMOST'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'AutoRelease' ) ) ) == '.F.'
         Code := Code + ' NOAUTORELEASE'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'MaxButton' ) ) ) == '.F.'
         Code := Code + ' NOMAXIMIZE'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'MinButton' ) ) ) == '.F.'
         Code := Code + ' NOMINIMIZE'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'Sizable' ) ) ) == '.F.'
         Code := Code + ' NOSIZE'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'SysMenu' ) ) ) == '.F.'
         Code := Code + ' NOSYSMENU'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'TitleBar' ) ) ) == '.F.'
         Code := Code + ' NOCAPTION'
      ENDIF

      IF Empty ( __mvGet ( DesignForm + 'Cursor' ) )
         Code := Code + ' CURSOR NIL'
      ELSE
         Code := Code + ' CURSOR ' + Chr( 34 ) + __mvGet ( DesignForm + 'Cursor' ) + Chr( 34 )
      ENDIF

      Code := Code + ' ON INIT ' + __mvGet ( DesignForm + 'OnInit' )
      Code := Code + ' ON RELEASE ' + __mvGet ( DesignForm + 'OnRelease' )
      Code := Code + ' ON INTERACTIVECLOSE ' + __mvGet ( DesignForm + 'OnInteractiveClose' )
      Code := Code + ' ON MOUSECLICK ' + __mvGet ( DesignForm + 'OnMouseClick' )
      Code := Code + ' ON MOUSEDRAG ' + __mvGet ( DesignForm + 'OnMouseDrag' )
      Code := Code + ' ON MOUSEMOVE ' + __mvGet ( DesignForm + 'OnMouseMove' )
      Code := Code + ' ON SIZE ' + __mvGet ( DesignForm + 'OnSize' )
      Code := Code + ' ON MAXIMIZE ' + __mvGet ( DesignForm + 'OnMaximize' )
      Code := Code + ' ON MINIMIZE ' + __mvGet ( DesignForm + 'OnMinimize' )
      Code := Code + ' ON PAINT ' + __mvGet ( DesignForm + 'OnPaint' )

      if ! Empty ( __mvGet ( DesignForm + 'BackColor' ) )
         Code := Code + ' BACKCOLOR ' + __mvGet ( DesignForm + 'BackColor' )
      ELSE
         Code := Code + ' BACKCOLOR NIL'
      ENDIF

      if ! Empty ( __mvGet ( DesignForm + 'NotifyIcon' ) )
         Code := Code + ' NOTIFYICON ' + Chr( 34 ) + __mvGet ( DesignForm + 'NotifyIcon' ) + Chr( 34 )
      ELSE
         Code := Code + ' NOTIFYICON NIL'
      ENDIF

      if ! Empty ( __mvGet ( DesignForm + 'NotifyToolTip' ) )
         Code := Code + ' NOTIFYTOOLTIP ' + Chr( 34 ) + __mvGet ( DesignForm + 'NotifyToolTip' ) + Chr( 34 )
      ELSE
         Code := Code + ' NOTIFYTOOLTIP NIL'
      ENDIF

      Code := Code + ' ON NOTIFYCLICK ' + __mvGet ( DesignForm + 'OnNotifyClick' )
      Code := Code + ' ON GOTFOCUS ' + __mvGet ( DesignForm + 'OnGotFocus' )
      Code := Code + ' ON LOSTFOCUS ' + __mvGet ( DesignForm + 'OnLostFocus' )
      Code := Code + ' ON SCROLLUP ' + __mvGet ( DesignForm + 'ONSCROLLUP' )
      Code := Code + ' ON SCROLLDOWN ' + __mvGet ( DesignForm + 'ONSCROLLDOWN' )
      Code := Code + ' ON SCROLLLEFT ' + __mvGet ( DesignForm + 'ONSCROLLLEFT' )
      Code := Code + ' ON SCROLLRIGHT ' + __mvGet ( DesignForm + 'ONSCROLLRIGHT' )
      Code := Code + ' ON HSCROLLBOX ' + __mvGet ( DesignForm + 'ONHSCROLLBOX' )
      Code := Code + ' ON VSCROLLBOX ' + __mvGet ( DesignForm + 'ONVSCROLLBOX' )

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'HelpButton' ) ) ) == '.T.'
         Code := Code + ' HELPBUTTON '
      ENDIF

   ELSEIF WindowType == 'MODAL'

      Code := Code + 'DEFINE WINDOW TEMPLATE AT ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Row' ) ) ) ;
         + ' , ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Col' ) ) ) ;
         + ' WIDTH ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Width' ) ) ) ;
         + ' HEIGHT ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Height' ) ) ) ;
         + ' VIRTUAL WIDTH ' ;
         +AllTrim( __mvGet ( DesignForm + 'VirtualWidth' ) ) ;
         + ' VIRTUAL HEIGHT ' ;
         +AllTrim( __mvGet ( DesignForm + 'VirtualHeight' ) ) ;
         + ' TITLE ' ;
         +Chr( 34 ) + GetProperty ( DesignForm, 'Title' ) + Chr( 34 )

      IF Empty ( __mvGet ( DesignForm + 'Icon' ) )
         Code := Code + ' ICON NIL'
      ELSE
         Code := Code + ' ICON ' + Chr( 34 ) + __mvGet ( DesignForm + 'Icon' ) + Chr( 34 )
      ENDIF

      Code := Code + ' MODAL'

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'Visible' ) ) ) == '.F.'
         Code := Code + ' NOSHOW'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'AutoRelease' ) ) ) == '.F.'
         Code := Code + ' NOAUTORELEASE'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'Sizable' ) ) ) == '.F.'
         Code := Code + ' NOSIZE'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'SysMenu' ) ) ) == '.F.'
         Code := Code + ' NOSYSMENU'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'TitleBar' ) ) ) == '.F.'
         Code := Code + ' NOCAPTION'
      ENDIF

      IF Empty ( __mvGet ( DesignForm + 'Cursor' ) )
         Code := Code + ' CURSOR NIL'
      ELSE
         Code := Code + ' CURSOR ' + Chr( 34 ) + __mvGet ( DesignForm + 'Cursor' ) + Chr( 34 )
      ENDIF

      Code := Code + ' ON INIT ' + __mvGet ( DesignForm + 'OnInit' )
      Code := Code + ' ON RELEASE ' + __mvGet ( DesignForm + 'OnRelease' )
      Code := Code + ' ON INTERACTIVECLOSE ' + __mvGet ( DesignForm + 'OnInteractiveClose' )
      Code := Code + ' ON MOUSECLICK ' + __mvGet ( DesignForm + 'OnMouseClick' )
      Code := Code + ' ON MOUSEDRAG ' + __mvGet ( DesignForm + 'OnMouseDrag' )
      Code := Code + ' ON MOUSEMOVE ' + __mvGet ( DesignForm + 'OnMouseMove' )
      Code := Code + ' ON SIZE ' + __mvGet ( DesignForm + 'OnSize' )
      Code := Code + ' ON PAINT ' + __mvGet ( DesignForm + 'OnPaint' )

      if ! Empty ( __mvGet ( DesignForm + 'BackColor' ) )
         Code := Code + ' BACKCOLOR ' + __mvGet ( DesignForm + 'BackColor' )
      ELSE
         Code := Code + ' BACKCOLOR NIL'
      ENDIF

      Code := Code + ' ON GOTFOCUS ' + __mvGet ( DesignForm + 'OnGotFocus' )
      Code := Code + ' ON LOSTFOCUS ' + __mvGet ( DesignForm + 'OnLostFocus' )
      Code := Code + ' ON SCROLLUP ' + __mvGet ( DesignForm + 'ONSCROLLUP' )
      Code := Code + ' ON SCROLLDOWN ' + __mvGet ( DesignForm + 'ONSCROLLDOWN' )
      Code := Code + ' ON SCROLLLEFT ' + __mvGet ( DesignForm + 'ONSCROLLLEFT' )
      Code := Code + ' ON SCROLLRIGHT ' + __mvGet ( DesignForm + 'ONSCROLLRIGHT' )
      Code := Code + ' ON HSCROLLBOX ' + __mvGet ( DesignForm + 'ONHSCROLLBOX' )
      Code := Code + ' ON VSCROLLBOX ' + __mvGet ( DesignForm + 'ONVSCROLLBOX' )

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'HelpButton' ) ) ) == '.T.'
         Code := Code + ' HELPBUTTON '
      ENDIF

   ELSEIF WindowType == 'SPLITCHILD'

      Code := Code + 'DEFINE WINDOW TEMPLATE ' ;
         + ' WIDTH ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Width' ) ) ) ;
         + ' HEIGHT ' ;
         +AllTrim( Str( GetProperty ( DesignForm, 'Height' ) ) ) ;
         + ' VIRTUAL WIDTH ' ;
         +AllTrim( __mvGet ( DesignForm + 'VirtualWidth' ) ) ;
         + ' VIRTUAL HEIGHT ' ;
         +AllTrim( __mvGet ( DesignForm + 'VirtualHeight' ) ) ;
         + ' TITLE ' ;
         +Chr( 34 ) + GetProperty ( DesignForm, 'Title' ) + Chr( 34 ) ;
         + ' SPLITCHILD'

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'TitleBar' ) ) ) == '.F.'
         Code := Code + ' NOCAPTION'
      ENDIF

      IF Empty ( __mvGet ( DesignForm + 'Cursor' ) )
         Code := Code + ' CURSOR NIL'
      ELSE
         Code := Code + ' CURSOR ' + Chr( 34 ) + __mvGet ( DesignForm + 'Cursor' ) + Chr( 34 )
      ENDIF

      IF Empty ( __mvGet ( DesignForm + 'GripperText' ) )
         Code := Code + ' GRIPPERTEXT NIL'
      ELSE
         Code := Code + ' GRIPPERTEXT ' + Chr( 34 ) + __mvGet ( DesignForm + 'GripperText' ) + Chr( 34 )
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'Break' ) ) ) == '.T.'
         Code := Code + ' BREAK'
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( DesignForm + 'Focused' ) ) ) == '.T.'
         Code := Code + ' FOCUSED'
      ENDIF

      Code := Code + ' ON GOTFOCUS ' + __mvGet ( DesignForm + 'OnGotFocus' )
      Code := Code + ' ON LOSTFOCUS ' + __mvGet ( DesignForm + 'OnLostFocus' )
      Code := Code + ' ON SCROLLUP ' + __mvGet ( DesignForm + 'ONSCROLLUP' )
      Code := Code + ' ON SCROLLDOWN ' + __mvGet ( DesignForm + 'ONSCROLLDOWN' )
      Code := Code + ' ON SCROLLLEFT ' + __mvGet ( DesignForm + 'ONSCROLLLEFT' )
      Code := Code + ' ON SCROLLRIGHT ' + __mvGet ( DesignForm + 'ONSCROLLRIGHT' )
      Code := Code + ' ON HSCROLLBOX ' + __mvGet ( DesignForm + 'ONHSCROLLBOX' )
      Code := Code + ' ON VSCROLLBOX ' + __mvGet ( DesignForm + 'ONVSCROLLBOX' )

   ENDIF

   Code := Code + Chr( 13 ) + Chr ( 10 )

   IF .NOT. Empty( _hmgide_CurrentMainMenu )
      Code := Code + Chr( 13 ) + Chr ( 10 )
      Code := Code + _hmgide_CurrentMainMenu
   ENDIF

   IF .NOT. Empty( _hmgide_CurrentToolBar )
      Code := Code + Chr( 13 ) + Chr ( 10 )
      Code := Code + _hmgide_CurrentToolBar
   ENDIF

   IF .NOT. Empty( _hmgide_CurrentContextMenu )
      Code := Code + Chr( 13 ) + Chr ( 10 )
      Code := Code + _hmgide_CurrentContextMenu
   ENDIF

   IF .NOT. Empty( _hmgide_CurrentStatusBar )
      Code := Code + Chr( 13 ) + Chr ( 10 )
      Code := Code + _hmgide_CurrentStatusBar
   ENDIF

   IF .NOT. Empty( _hmgide_CurrentNotifyMenu )
      Code := Code + Chr( 13 ) + Chr ( 10 )
      Code := Code + _hmgide_CurrentNotifyMenu
   ENDIF

   FOR b := 1 TO HMG_LEN ( _hmgide_aDropDownMenus )

      IF .NOT. Empty ( _hmgide_aDropDownMenus[ b ] )
         Code := Code + Chr( 13 ) + Chr ( 10 )
         Code := Code + _hmgide_aDropDownMenus[ b ]
      ENDIF

   NEXT b

   IF .NOT. Empty( _hmgide_CurrentSplitBox )
      Code := Code + Chr( 13 ) + Chr ( 10 )
      Code := Code + _hmgide_CurrentSplitBox
   ENDIF

   FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )

      IF _HMG_aControlParenthandles[ i ] == DesignFormhandle

         IF ! Empty ( _HMG_aControlNames[ i ] ) .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'INTERNAL_TIMER_1' .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'TEXT_DUMMY' .AND. _HMG_aControlDeleted[ i ] == .F.

            IF _HMG_aControlContainerRow[ i ] == -1 .AND. _HMG_aControlContainerCol[ i ] == -1

               IF _HMG_aControlType[ i ] == 'TAB'

                  Code := Code + CRLF + '    DEFINE TAB ' ;
                     +AllTrim ( _HMG_aControlNames[ i ] ) ;
                     + ' AT ' ;
                     +AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) ;
                     + ' , ' ;
                     +AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) ;
                     + ' WIDTH ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) ;
                     + ' HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) ;
                     + ' VALUE ' + __mvGet( _HMG_aControlNames[ i ] + 'Value' ) ;
                     + ' FONT ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) ;
                     + ' SIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontBold' ) ) ) == '.T.', ' BOLD', '' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontItalic' ) ) ) == '.T.', ' ITALIC', '' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontUnderLine' ) ) ) == '.T.', ' UNDERLINE', '' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontStrikeOut' ) ) ) == '.T.', ' STRIKEOUT', '' ) ;
                     + ' TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'Buttons' ) ) ) == '.T.', ' BUTTONS', '' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'Flat' ) ) ) == '.T.', ' FLAT', '' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'HotTrack' ) ) ) == '.T.', ' HOTTRACK', '' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'Vertical' ) ) ) == '.T.', ' VERTICAL', '' ) ;
                     + ' ON CHANGE ' + __mvGet( _HMG_aControlNames[ i ] + 'OnChange' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'TabStop' ) ) ) == '.F.', ' NOTABSTOP', '' ) ;
                     +IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'Multiline' ) ) ) == '.T.', ' MULTILINE', '' ) ;
                     +CRLF

                  PageMap := _HMG_aControlPageMap[ i ]

                  FOR x := 1 TO HMG_LEN ( PageMap )

                     Code := Code + CRLF
                     Code := Code + '        PAGE ' + Chr( 34 ) + _HMG_aControlCaption[ i ][ x ] + Chr( 34 )

                     aTemp := StringToArray ( __mvGet( _HMG_aControlNames[ i ] + 'PageImages' ) )

                     ImageFlag := .F.

                     FOR a := 1 TO HMG_LEN ( aTemp )
                        If ! Empty( aTemp[ a ] )
                           ImageFlag := .T.
                           EXIT
                        ENDIF
                     NEXT a

                     IF ImageFlag == .T.

                        Code := Code + ' IMAGE ' + Chr( 34 ) + aTemp[ x ] + Chr( 34 ) + CRLF

                     ELSE

                        Code := Code + CRLF

                     ENDIF

                     FOR j := 1 TO HMG_LEN ( PageMap[ x ] )

                        IF ValType ( PageMap[ x ][ j ] ) == 'N'
                           idx := AScan ( _HMG_aControlHandles, PageMap[ x ][ j ] )
                           Code := Code + GenCode ( idx, .T. )

                        ELSEIF ValType ( PageMap[ x ][ j ] ) == 'A'

                           FOR k := 1 TO HMG_LEN ( _HMG_aControlHandles )

                              IF ValType ( _HMG_aControlHandles[ k ] ) == 'A'

                                 IF _HMG_aControlHandles[ k ][ 1 ] == PageMap[ x ][ j ][ 1 ]

                                    Code := Code + GenCode ( k, .T. )
                                    EXIT

                                 ENDIF

                              ENDIF

                           NEXT k

                        ENDIF

                     NEXT j

                     Code := Code + CRLF
                     Code := Code + '        END PAGE ' + CRLF

                  NEXT x

                  Code := Code + CRLF
                  Code := Code + '    END TAB ' + CRLF

               ELSE

                  Code := Code + GenCode ( i, .F. )

               ENDIF

            ENDIF

         ENDIF

      ENDIF

   NEXT i

   Code += '' + CRLF
   Code += 'END WINDOW' + CRLF
   Code += '' + CRLF

   IF ValType ( lView ) == 'L' .AND. lView == .T.

      RetVal := Code

   ELSE

      IF HMG_UPPER ( hb_URight ( AllTrim( OpenFormName ), 4 ) ) != '.FMG'
         OpenFormName := AllTrim( OpenFormName ) + '.fmg'
      ENDIF

      SaveString ( OpenFormName, Code )
      DesignFormModified := .F.

   ENDIF

RETURN RetVal

*------------------------------------------------------------------------------*
FUNCTION GenCode ( i, e )
*------------------------------------------------------------------------------*
   LOCAL ControlType
   LOCAL Code := ''
   LOCAL filler
   LOCAL z
   LOCAL aProperties
   LOCAL aEvents
   LOCAL x

   IF i == 0
      RETURN ''
   ENDIF

   IF e == .T.
      filler := '        '
   ELSE
      filler := ''
   ENDIF

   // Control Data value:
   //
   // 1: CHECKBUTTON
   // 2: PROGRESSBAR
   // 3: PLAYER
   // 4: IPADDRESS
   // 5: TIMER
   // 6: HYPERLINK
   // 7: ACTIVEX
   // 8: CHILD WINDOW
   // >10: USER

   IF _HMG_aControlType[ i ] == 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 0
      ControlType := 'BUTTON'

   ELSEIF _HMG_aControlType[ i ] == 'CHECKBOX' .AND. _HMG_aControlMiscData1[ i ] == 0
      ControlType := 'CHECKBOX'

   ELSEIF _HMG_aControlType[ i ] == 'LIST'
      ControlType := 'LISTBOX'

   ELSEIF _HMG_aControlType[ i ] == 'COMBO'
      ControlType := 'COMBOBOX'

   ELSEIF _HMG_aControlType[ i ] == 'CHECKBOX' .AND. _HMG_aControlMiscData1[ i ] == 1
      ControlType := 'CHECKBUTTON'

   ELSEIF _HMG_aControlType[ i ] == 'GRID'
      ControlType := 'GRID'

   ELSEIF _HMG_aControlType[ i ] == 'SLIDER'
      ControlType := 'SLIDER'

   ELSEIF _HMG_aControlType[ i ] == 'SPINNER'
      ControlType := 'SPINNER'

   ELSEIF _HMG_aControlType[ i ] == 'IMAGE'
      ControlType := 'IMAGE'

   ELSEIF _HMG_aControlType[ i ] == 'TREE'
      ControlType := 'TREE'

   ELSEIF _HMG_aControlType[ i ] == 'DATEPICK'
      ControlType := 'DATEPICKER'

   ELSEIF _HMG_aControlType[ i ] == 'TEXT'
      ControlType := 'TEXTBOX'

   ELSEIF _HMG_aControlType[ i ] == 'EDIT'
      ControlType := 'EDITBOX'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 0
      ControlType := 'LABEL'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 7
      ControlType := 'ACTIVEX'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 8
      ControlType := 'WINDOW'

   ELSEIF _HMG_aControlType[ i ] == 'BROWSE'
      ControlType := 'BROWSE'

   ELSEIF _HMG_aControlType[ i ] == 'RADIOGROUP'
      ControlType := 'RADIOGROUP'

   ELSEIF _HMG_aControlType[ i ] == 'FRAME'
      ControlType := 'FRAME'

   ELSEIF _HMG_aControlType[ i ] == 'ANIMATEBOX'
      ControlType := 'ANIMATEBOX'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 6
      ControlType := 'HYPERLINK'

   ELSEIF _HMG_aControlType[ i ] == 'MONTHCAL'
      ControlType := 'MONTHCALENDAR'

   ELSEIF _HMG_aControlType[ i ] == 'RICHEDIT'
      ControlType := 'RICHEDITBOX'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 2
      ControlType := 'PROGRESSBAR'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 3
      ControlType := 'PLAYER'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 4
      ControlType := 'IPADDRESS'

   ELSEIF _HMG_aControlType[ i ] == 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 5
      ControlType := 'TIMER'

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] > 10
      ControlType := 'USER'

   ELSE
      ControlType := _HMG_aControlType[ i ]

   ENDIF

   Code := Code + '' + CRLF

   // .....................................................................
   IF ControlType = 'USER'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + AllTrim ( HMG_UPPER ( aComponentNames[ _HMG_aControlMiscData1[ i ][ 1 ] - 10 ] ) ) + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF

      z := _HMG_aControlMiscData1[ i ][ 1 ] - 10

      aProperties := aComponentProperties[ z ]
      aEvents := aComponentEvents[ z ]

      FOR x := 1 TO HMG_LEN ( aProperties )

         IF .NOT. ( HMG_UPPER ( AllTrim ( aProperties[ x ] ) ) == 'ROW' ;
               .OR. ;
               HMG_UPPER ( AllTrim ( aProperties[ x ] ) ) == 'COL' ;
               .OR. ;
               HMG_UPPER ( AllTrim ( aProperties[ x ] ) ) == 'WIDTH' ;
               .OR. ;
               HMG_UPPER ( AllTrim ( aProperties[ x ] ) ) == 'HEIGHT' ;
               .OR. ;
               HMG_UPPER ( AllTrim ( aProperties[ x ] ) ) == 'NAME' )

            Code := Code + filler + '        ' + HMG_UPPER ( AllTrim ( aProperties[ x ] ) ) + ' ' + __mvGet ( _HMG_aControlNames[ i ] + HMG_UPPER ( AllTrim ( aProperties[ x ] ) ) ) + CRLF

         ENDIF

      NEXT x

      FOR x := 1 TO HMG_LEN ( aEvents )

         Code := Code + filler + '        ' + HMG_UPPER ( AllTrim ( aEvents[ x ] ) ) + ' ' + __mvGet ( _HMG_aControlNames[ i ] + HMG_UPPER ( AllTrim ( aEvents[ x ] ) ) ) + CRLF

      NEXT x


   // .....................................................................
   ELSEIF ControlType = 'TREE'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + ' AT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + ' , ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + ' WIDTH ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + ' HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + ' VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + ' FONT ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + ' SIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontBold' ) ) ) == '.T.', ' BOLD', '' ) + IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontItalic' ) ) ) == '.T.', ' ITALIC', '' ) + IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontUnderLine' ) ) ) == '.T.', ' UNDERLINE', '' ) + IF ( AllTrim( HMG_UPPER( __mvGet(_HMG_aControlNames[ i ] + 'FontStrikeOut' ) ) ) == '.T.', ' STRIKEOUT', '' ) + ' TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + ' ON GOTFOCUS ' + __mvGet( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + ' ON CHANGE ' + __mvGet( _HMG_aControlNames[ i ] + 'OnChange' ) + ' ON LOSTFOCUS ' + __mvGet( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + ' ON DBLCLICK ' + __mvGet( _HMG_aControlNames[ i ] + 'OnDblClick' ) + ' NODEIMAGES ' + __mvGet( _HMG_aControlNames[ i ] + 'NodeImages' ) + ' ITEMIMAGES ' + __mvGet( _HMG_aControlNames[ i ] + 'ItemImages' ) + if ( AllTrim( HMG_UPPER( __mvGet( _HMG_aControlNames[ i ] + 'RootButton' ) ) ) == '.T.', '', ' NOROOTBUTTON' ) + if ( AllTrim( HMG_UPPER( __mvGet( _HMG_aControlNames[ i ] + 'ItemIds' ) ) ) == '.T.', ' ITEMIDS', '' ) + ' HELPID ' + __mvGet( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'TIMER'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + ' INTERVAL ' + __mvGet ( _HMG_aControlNames[ i ] + 'Interval' ) + ' ACTION ' + __mvGet ( _HMG_aControlNames[ i ] + 'Action' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'BUTTON'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        ACTION ' + __mvGet ( _HMG_aControlNames[ i ] + 'Action' ) + CRLF
      IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Caption' ) )
         Code := Code + filler + '        CAPTION Nil' + CRLF
      ELSE
         Code := Code + filler + '        CAPTION ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Caption' ) + Chr( 34 ) + CRLF
      ENDIF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        FLAT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Flat' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        TRANSPARENT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Transparent' ) + CRLF
      Code := Code + filler + '        MULTILINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'MultiLine' ) + CRLF

      IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Picture' ) )
         Code := Code + filler + '        PICTURE Nil' + CRLF
      ELSE
         Code := Code + filler + '        PICTURE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Picture' ) + Chr( 34 ) + CRLF
      ENDIF

      Code := Code + filler + '        PICTALIGNMENT ' + __mvGet ( _HMG_aControlNames[ i ] + 'PictAlignment' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'CHECKBOX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        CAPTION ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Caption' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) ) ) != 'NIL'
            Code := Code + filler + '        FIELD ' + __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) + CRLF
         ENDIF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        TRANSPARENT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Transparent' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'LISTBOX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        ITEMS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Items' ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      Code := Code + filler + '        ONDBLCLICK ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnDblClick' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        SORT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Sort' ) + CRLF
      Code := Code + filler + '        MULTISELECT ' + __mvGet ( _HMG_aControlNames[ i ] + 'MultiSelect' ) + CRLF

      Code := Code + filler + '        DRAGITEMS ' + __mvGet ( _HMG_aControlNames[ i ] + 'DragItems' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'COMBOBOX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        ITEMS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Items' ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        SORT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Sort' ) + CRLF
      Code := Code + filler + '        ONENTER ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnEnter' ) + CRLF
      Code := Code + filler + '        ONDISPLAYCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnDisplayChange' ) + CRLF
      Code := Code + filler + '        DISPLAYEDIT ' + __mvGet ( _HMG_aControlNames[ i ] + 'DisplayEdit' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'ValueSource' ) )
         Code := Code + filler + '        VALUESOURCE ' + __mvGet ( _HMG_aControlNames[ i ] + 'ValueSource' ) + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'ItemSource' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'ItemSource' ) ) ) != 'NIL'
            Code := Code + filler + '        ITEMSOURCE ' + __mvGet ( _HMG_aControlNames[ i ] + 'ItemSource' ) + CRLF
         ENDIF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Image' ) )
         Code := Code + filler + '        IMAGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Image' ) + CRLF
      ELSE
         Code := Code + filler + '        IMAGE NIL' + CRLF
      ENDIF

      Code := Code + filler + '        DROPPEDWIDTH ' + __mvGet ( _HMG_aControlNames[ i ] + 'DroppedWidth' ) + CRLF

      Code := Code + filler + '        ONDROPDOWN ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnDropDown' ) + CRLF
      Code := Code + filler + '        ONCLOSEUP ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnCloseUp' ) + CRLF


   // .....................................................................
   ELSEIF ControlType = 'CHECKBUTTON'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        CAPTION ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Caption' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF

      IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Picture' ) )
         Code := Code + filler + '        PICTURE Nil' + CRLF
      ELSE
         Code := Code + filler + '        PICTURE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Picture' ) + Chr( 34 ) + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'GRID'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        ITEMS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Items' ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        WIDTHS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Widths' ) + CRLF
      Code := Code + filler + '        HEADERS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Headers' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        ONDBLCLICK ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnDblClick' ) + CRLF
      Code := Code + filler + '        ONHEADCLICK ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnHeadClick' ) + CRLF
      Code := Code + filler + '        ONQUERYDATA ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnQueryData' ) + CRLF
      Code := Code + filler + '        MULTISELECT ' + __mvGet ( _HMG_aControlNames[ i ] + 'MultiSelect' ) + CRLF
      Code := Code + filler + '        ALLOWEDIT ' + __mvGet ( _HMG_aControlNames[ i ] + 'AllowEdit' ) + CRLF
      Code := Code + filler + '        VIRTUAL ' + __mvGet ( _HMG_aControlNames[ i ] + 'Virtual' ) + CRLF

      Code := Code + filler + '        DYNAMICBACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'DynamicBackColor' ) + CRLF
      Code := Code + filler + '        DYNAMICFORECOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'DynamicForeColor' ) + CRLF
      Code := Code + filler + '        COLUMNWHEN ' + __mvGet ( _HMG_aControlNames[ i ] + 'ColumnWhen' ) + CRLF
      Code := Code + filler + '        COLUMNVALID ' + __mvGet ( _HMG_aControlNames[ i ] + 'ColumnValid' ) + CRLF
      Code := Code + filler + '        COLUMNCONTROLS ' + __mvGet ( _HMG_aControlNames[ i ] + 'ColumnControls' ) + CRLF
      Code := Code + filler + '        SHOWHEADERS ' + __mvGet ( _HMG_aControlNames[ i ] + 'ShowHeaders' ) + CRLF

      Code := Code + filler + '        CELLNAVIGATION ' + __mvGet ( _HMG_aControlNames[ i ] + 'CellNavigation' ) + CRLF

      IF AllTrim ( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'Lines' ) ) ) == '.T.'
         Code := Code + filler + '        NOLINES .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOLINES .T.' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) )
         Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      ELSE
         Code := Code + filler + '        HELPID NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Image' ) )
         Code := Code + filler + '        IMAGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Image' ) + CRLF
      ELSE
         Code := Code + filler + '        IMAGE NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Justify' ) )
         Code := Code + filler + '        JUSTIFY ' + __mvGet ( _HMG_aControlNames[ i ] + 'Justify' ) + CRLF
      ELSE
         Code := Code + filler + '        JUSTIFY NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'ItemCount' ) )
         Code := Code + filler + '        ITEMCOUNT ' + __mvGet ( _HMG_aControlNames[ i ] + 'ItemCount' ) + CRLF
      ELSE
         Code := Code + filler + '        ITEMCOUNT NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      Code := Code + filler + '        HEADERIMAGES ' + __mvGet ( _HMG_aControlNames[ i ] + 'HeaderImages' ) + CRLF

      Code := Code + filler + '        ROWSOURCE ' + __mvGet ( _HMG_aControlNames[ i ] + 'RowSource' ) + CRLF
      Code := Code + filler + '        COLUMNFIELDS ' + __mvGet ( _HMG_aControlNames[ i ] + 'ColumnFields' ) + CRLF
      Code := Code + filler + '        ALLOWAPPEND ' + __mvGet ( _HMG_aControlNames[ i ] + 'AllowAppend' ) + CRLF
      Code := Code + filler + '        ALLOWDELETE ' + __mvGet ( _HMG_aControlNames[ i ] + 'AllowDelete' ) + CRLF
      Code := Code + filler + '        BUFFERED ' + __mvGet ( _HMG_aControlNames[ i ] + 'Buffered' ) + CRLF
      Code := Code + filler + '        DYNAMICDISPLAY ' + __mvGet ( _HMG_aControlNames[ i ] + 'DynamicDisplay' ) + CRLF
      Code := Code + filler + '        ONSAVE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnSave' ) + CRLF
      Code := Code + filler + '        LOCKCOLUMNS ' + __mvGet ( _HMG_aControlNames[ i ] + 'LockColumns' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'SLIDER'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        RANGEMIN ' + __mvGet ( _HMG_aControlNames[ i ] + 'RangeMin' ) + CRLF
      Code := Code + filler + '        RANGEMAX ' + __mvGet ( _HMG_aControlNames[ i ] + 'RangeMax' ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'TickMarks' ) ) ) == 'NONE'
         Code := Code + filler + '        NOTICKS .T. ' + CRLF
      ELSEIF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'TickMarks' ) ) ) == 'BOTH'
         Code := Code + filler + '        BOTH .T. ' + CRLF
      ELSEIF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'TickMarks' ) ) ) == 'LEFT'
         Code := Code + filler + '        LEFT .T. ' + CRLF
      ELSEIF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'TickMarks' ) ) ) == 'TOP'
         Code := Code + filler + '        TOP .T. ' + CRLF
      ENDIF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'Orientation' ) ) ) == 'VERTICAL'
         Code := Code + filler + '        VERTICAL .T. ' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'SPINNER'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        RANGEMIN ' + __mvGet ( _HMG_aControlNames[ i ] + 'RangeMin' ) + CRLF
      Code := Code + filler + '        RANGEMAX ' + __mvGet ( _HMG_aControlNames[ i ] + 'RangeMax' ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        WRAP ' + __mvGet ( _HMG_aControlNames[ i ] + 'Wrap' ) + CRLF
      Code := Code + filler + '        READONLY ' + __mvGet ( _HMG_aControlNames[ i ] + 'ReadOnly' ) + CRLF
      Code := Code + filler + '        INCREMENT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Increment' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'IMAGE'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        PICTURE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Picture' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        STRETCH ' + __mvGet ( _HMG_aControlNames[ i ] + 'Stretch' ) + CRLF
      Code := Code + filler + '        ACTION ' + __mvGet ( _HMG_aControlNames[ i ] + 'Action' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'ACTIVEX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        PROGID ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ProgId' ) + Chr( 34 ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'WINDOW'
   // .....................................................................

      Code := Code + filler + '    LOAD WINDOW ' + AllTrim ( _HMG_aControlNames[ i ] ) + ' AT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + ' , ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + ' WIDTH ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + ' HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'DATEPICKER'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        ONENTER ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnEnter' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        SHOWNONE ' + __mvGet ( _HMG_aControlNames[ i ] + 'ShowNone' ) + CRLF
      Code := Code + filler + '        UPDOWN ' + __mvGet ( _HMG_aControlNames[ i ] + 'UpDown' ) + CRLF
      Code := Code + filler + '        RIGHTALIGN ' + __mvGet ( _HMG_aControlNames[ i ] + 'RightAlign' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) ) ) != 'NIL'
            Code := Code + filler + '        FIELD ' + __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) + CRLF
         ENDIF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'TEXTBOX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        ONENTER ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnEnter' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        READONLY ' + __mvGet ( _HMG_aControlNames[ i ] + 'ReadOnly' ) + CRLF
      Code := Code + filler + '        RIGHTALIGN ' + __mvGet ( _HMG_aControlNames[ i ] + 'RightAlign' ) + CRLF
/*
  Code := Code + filler + '        DISABLEDBACKCOLOR ' + __MVGET ( _HMG_aControlNames [ i ] + 'DisabledBackColor' ) + CRLF
  Code := Code + filler + '        DISABLEDFONTCOLOR ' + __MVGET ( _HMG_aControlNames [ i ] + 'DisabledFontColor' ) + CRLF
*/
      Code := Code + filler + '        CASECONVERT ' + __mvGet ( _HMG_aControlNames[ i ] + 'CaseConvert' ) + CRLF

      IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'Password' ) ) ) == '.T.'
         Code := Code + filler + '        PASSWORD ' + __mvGet ( _HMG_aControlNames[ i ] + 'Password' ) + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) ) ) != 'NIL'
            Code := Code + filler + '        MAXLENGTH ' + __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) + CRLF
         ENDIF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) ) ) != 'NIL'
            Code := Code + filler + '        FIELD ' + __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) + CRLF
         ENDIF
      ENDIF

      IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'InputMask' ) )
         Code := Code + filler + '        INPUTMASK Nil' + CRLF
      ELSE
         Code := Code + filler + '        INPUTMASK ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'InputMask' ) + Chr( 34 ) + CRLF
      ENDIF

      IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Format' ) )
         Code := Code + filler + '        FORMAT Nil' + CRLF
      ELSE
         Code := Code + filler + '        FORMAT ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Format' ) + Chr( 34 ) + CRLF
      ENDIF

      IF HMG_UPPER ( AllTrim( __mvGet ( _HMG_aControlNames[ i ] + 'DataType' ) ) ) == 'NUMERIC'
         Code := Code + filler + '        NUMERIC .T. ' + CRLF
         IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) )
            Code := Code + filler + '        VALUE Nil' + CRLF
         ELSE
            Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
         ENDIF
      ELSEIF HMG_UPPER ( AllTrim( __mvGet ( _HMG_aControlNames[ i ] + 'DataType' ) ) ) == 'DATE'
         Code := Code + filler + '        DATE .T. ' + CRLF
         IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) )
            Code := Code + filler + '        VALUE Nil' + CRLF
         ELSE
            Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
         ENDIF
      ELSEIF HMG_UPPER ( AllTrim( __mvGet ( _HMG_aControlNames[ i ] + 'DataType' ) ) ) == 'CHARACTER'
         Code := Code + filler + '        VALUE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + Chr( 34 ) + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'EDITBOX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        READONLY ' + __mvGet ( _HMG_aControlNames[ i ] + 'ReadOnly' ) + CRLF

      Code := Code + filler + '        HSCROLLBAR ' + __mvGet ( _HMG_aControlNames[ i ] + 'HScrollBar' ) + CRLF
      Code := Code + filler + '        VSCROLLBAR ' + __mvGet ( _HMG_aControlNames[ i ] + 'VScrollBar' ) + CRLF
/*
  Code := Code + filler + '        DISABLEDBACKCOLOR ' + __MVGET ( _HMG_aControlNames [ i ] + 'DisabledBackColor' ) + CRLF
  Code := Code + filler + '        DISABLEDFONTCOLOR ' + __MVGET ( _HMG_aControlNames [ i ] + 'DisabledFontColor' ) + CRLF
*/
      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) ) ) != 'NIL'
            Code := Code + filler + '        MAXLENGTH ' + __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) + CRLF
         ENDIF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) ) ) != 'NIL'
            Code := Code + filler + '        FIELD ' + __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) + CRLF
         ENDIF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'LABEL'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        TRANSPARENT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Transparent' ) + CRLF
      Code := Code + filler + '        ACTION ' + __mvGet ( _HMG_aControlNames[ i ] + 'Action' ) + CRLF
      Code := Code + filler + '        AUTOSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'AutoSize' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'Alignment' ) ) ) == 'RIGHT'
         Code := Code + filler + '        RIGHTALIGN .T. ' + CRLF
      ELSEIF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'Alignment' ) ) ) == 'CENTER'
         Code := Code + filler + '        CENTERALIGN .T. ' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'BROWSE'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        WIDTHS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Widths' ) + CRLF
      Code := Code + filler + '        HEADERS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Headers' ) + CRLF
      Code := Code + filler + '        WORKAREA ' + __mvGet ( _HMG_aControlNames[ i ] + 'WorkArea' ) + CRLF
      Code := Code + filler + '        FIELDS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Fields' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        ONDBLCLICK ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnDblClick' ) + CRLF
      Code := Code + filler + '        ALLOWEDIT ' + __mvGet ( _HMG_aControlNames[ i ] + 'AllowEdit' ) + CRLF
      Code := Code + filler + '        ALLOWAPPEND ' + __mvGet ( _HMG_aControlNames[ i ] + 'AllowAppend' ) + CRLF
      Code := Code + filler + '        ONHEADCLICK ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnHeadClick' ) + CRLF
      Code := Code + filler + '        ALLOWDELETE ' + __mvGet ( _HMG_aControlNames[ i ] + 'AllowDelete' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        VALID ' + __mvGet ( _HMG_aControlNames[ i ] + 'Valid' ) + CRLF
      Code := Code + filler + '        VALIDMESSAGES ' + __mvGet ( _HMG_aControlNames[ i ] + 'ValidMessages' ) + CRLF
      Code := Code + filler + '        LOCK ' + __mvGet ( _HMG_aControlNames[ i ] + 'Lock' ) + CRLF
      Code := Code + filler + '        VSCROLLBAR ' + __mvGet ( _HMG_aControlNames[ i ] + 'vScrollBar' ) + CRLF

      Code := Code + filler + '        DYNAMICBACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'DynamicBackColor' ) + CRLF
      Code := Code + filler + '        DYNAMICFORECOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'DynamicForeColor' ) + CRLF

      Code := Code + filler + '        INPUTMASK ' + __mvGet ( _HMG_aControlNames[ i ] + 'InputMask' ) + CRLF

      Code := Code + filler + '        FORMAT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Format' ) + CRLF

      Code := Code + filler + '        WHEN ' + __mvGet ( _HMG_aControlNames[ i ] + 'When' ) + CRLF

      Code := Code + filler + '        INPUTITEMS ' + __mvGet ( _HMG_aControlNames[ i ] + 'InputItems' ) + CRLF
      Code := Code + filler + '        DISPLAYITEMS ' + __mvGet ( _HMG_aControlNames[ i ] + 'DisplayItems' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Image' ) )
         Code := Code + filler + '        IMAGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Image' ) + CRLF
      ELSE
         Code := Code + filler + '        IMAGE NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Justify' ) )
         Code := Code + filler + '        JUSTIFY ' + __mvGet ( _HMG_aControlNames[ i ] + 'Justify' ) + CRLF
      ELSE
         Code := Code + filler + '        JUSTIFY NIL' + CRLF
      ENDIF

      IF AllTrim ( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'Lines' ) ) ) == '.T.'
         Code := Code + filler + '        NOLINES .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOLINES .T.' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'ReadOnlyFields' ) )
         Code := Code + filler + '        READONLYFIELDS ' + __mvGet ( _HMG_aControlNames[ i ] + 'ReadOnlyFields' ) + CRLF
      ELSE
         Code := Code + filler + '        READONLYFIELDS NIL' + CRLF
      ENDIF

      Code := Code + filler + '        HEADERIMAGES ' + __mvGet ( _HMG_aControlNames[ i ] + 'HeaderImages' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'RADIOGROUP'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        OPTIONS ' + __mvGet ( _HMG_aControlNames[ i ] + 'Options' ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        TRANSPARENT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Transparent' ) + CRLF
      Code := Code + filler + '        SPACING ' + __mvGet ( _HMG_aControlNames[ i ] + 'Spacing' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      Code := Code + filler + '        READONLY ' + __mvGet ( _HMG_aControlNames[ i ] + 'ReadOnly' ) + CRLF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'Orientation' ) ) ) == 'HORIZONTAL'
         Code := Code + filler + '        HORIZONTAL .T. ' + CRLF
      ELSE
         Code := Code + filler + '        HORIZONTAL .F. ' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'FRAME'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF

      IF Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Caption' ) )
         Code := Code + filler + '        CAPTION NIL' + CRLF
      ELSE
         Code := Code + filler + '        CAPTION ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Caption' ) + Chr( 34 ) + CRLF
      ENDIF



      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'Transparent' ) ) ) = '.F.'
         Code := Code + filler + '        OPAQUE .T.' + CRLF
      ELSE
         Code := Code + filler + '        OPAQUE .F.' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'ANIMATEBOX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        FILE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'File' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TRANSPARENT ' + __mvGet ( _HMG_aControlNames[ i ] + 'Transparent' ) + CRLF
      Code := Code + filler + '        AUTOPLAY ' + __mvGet ( _HMG_aControlNames[ i ] + 'AutoPlay' ) + CRLF
      Code := Code + filler + '        CENTER ' + __mvGet ( _HMG_aControlNames[ i ] + 'Center' ) + CRLF

   // .....................................................................
   ELSEIF ControlType = 'HYPERLINK'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ADDRESS ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Address' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        AUTOSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'AutoSize' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        HANDCURSOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'HandCursor' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) )
         Code := Code + filler + '        FONTCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FONTCOLOR NIL' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'MONTHCALENDAR'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'Today' ) ) ) = '.T.'
         Code := Code + filler + '        NOTODAY .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOTODAY .T.' + CRLF
      ENDIF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'TodayCircle' ) ) ) = '.T.'
         Code := Code + filler + '        NOTODAYCIRCLE .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOTODAYCIRCLE .T.' + CRLF
      ENDIF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'WeekNumbers' ) ) ) = '.T.'
         Code := Code + filler + '        WEEKNUMBERS .T.' + CRLF
      ELSE
         Code := Code + filler + '        WEEKNUMBERS .F.' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'RICHEDITBOX'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        READONLY ' + __mvGet ( _HMG_aControlNames[ i ] + 'ReadOnly' ) + CRLF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) ) ) != 'NIL'
            Code := Code + filler + '        MAXLENGTH ' + __mvGet ( _HMG_aControlNames[ i ] + 'MaxLength' ) + CRLF
         ENDIF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) )
         IF AllTrim( HMG_UPPER( __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) ) ) != 'NIL'
            Code := Code + filler + '        FIELD ' + __mvGet ( _HMG_aControlNames[ i ] + 'Field' ) + CRLF
         ENDIF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'PROGRESSBAR'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        RANGEMIN ' + __mvGet ( _HMG_aControlNames[ i ] + 'RangeMin' ) + CRLF
      Code := Code + filler + '        RANGEMAX ' + __mvGet ( _HMG_aControlNames[ i ] + 'RangeMax' ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF
      Code := Code + filler + '        SMOOTH ' + __mvGet ( _HMG_aControlNames[ i ] + 'Smooth' ) + CRLF

      IF HMG_UPPER ( AllTrim ( __mvGet ( _HMG_aControlNames[ i ] + 'Orientation' ) ) ) == 'VERTICAL'
         Code := Code + filler + '        VERTICAL .T. ' + CRLF
      ELSE
         Code := Code + filler + '        VERTICAL .F. ' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) )
         Code := Code + filler + '        BACKCOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'BackColor' ) + CRLF
      ELSE
         Code := Code + filler + '        BACKCOLOR NIL' + CRLF
      ENDIF

      if ! Empty ( __mvGet ( _HMG_aControlNames[ i ] + 'ForeColor' ) )
         Code := Code + filler + '        FORECOLOR ' + __mvGet ( _HMG_aControlNames[ i ] + 'ForeColor' ) + CRLF
      ELSE
         Code := Code + filler + '        FORECOLOR NIL' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'PLAYER'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        FILE ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'File' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF

      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'AutoSizeWindow' ) ) ) == '.T.'
         Code := Code + filler + '        NOAUTOSIZEWINDOW .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOAUTOSIZEWINDOW .T.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'AutoSizeMovie' ) ) ) == '.T.'
         Code := Code + filler + '        NOAUTOSIZEMOVIE .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOAUTOSIZEMOVIE .T.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'ErrorDlg' ) ) ) == '.T.'
         Code := Code + filler + '        NOERRORDLG .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOERRORDLG .T.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'Menu' ) ) ) == '.T.'
         Code := Code + filler + '        NOMENU .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOMENU .T.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'Open' ) ) ) == '.T.'
         Code := Code + filler + '        NOOPEN .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOOPEN .T.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'Playbar' ) ) ) == '.T.'
         Code := Code + filler + '        NOPLAYBAR .F.' + CRLF
      ELSE
         Code := Code + filler + '        NOPLAYBAR .T.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'ShowAll' ) ) ) == '.T.'
         Code := Code + filler + '        SHOWALL .T.' + CRLF
      ELSE
         Code := Code + filler + '        SHOWALL .F.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'ShowMode' ) ) ) == '.T.'
         Code := Code + filler + '        SHOWMODE .T.' + CRLF
      ELSE
         Code := Code + filler + '        SHOWMODE .F.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'ShowName' ) ) ) == '.T.'
         Code := Code + filler + '        SHOWNAME .T.' + CRLF
      ELSE
         Code := Code + filler + '        SHOWNAME .F.' + CRLF
      ENDIF
      IF AllTrim( HMG_UPPER ( __mvGet ( _HMG_aControlNames[ i ] + 'Showposition' ) ) ) == '.T.'
         Code := Code + filler + '        SHOWPOSITION .T.' + CRLF
      ELSE
         Code := Code + filler + '        SHOWPOSITION .F.' + CRLF
      ENDIF

   // .....................................................................
   ELSEIF ControlType = 'IPADDRESS'
   // .....................................................................

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF
      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF
      Code := Code + filler + '        VALUE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Value' ) + CRLF
      Code := Code + filler + '        FONTNAME ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'FontName' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        FONTSIZE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontSize' ) + CRLF
      Code := Code + filler + '        TOOLTIP ' + Chr( 34 ) + __mvGet ( _HMG_aControlNames[ i ] + 'ToolTip' ) + Chr( 34 ) + CRLF
      Code := Code + filler + '        ONCHANGE ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnChange' ) + CRLF
      Code := Code + filler + '        ONGOTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnGotFocus' ) + CRLF
      Code := Code + filler + '        ONLOSTFOCUS ' + __mvGet ( _HMG_aControlNames[ i ] + 'OnLostFocus' ) + CRLF
      Code := Code + filler + '        FONTBOLD ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontBold' ) + CRLF
      Code := Code + filler + '        FONTITALIC ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontItalic' ) + CRLF
      Code := Code + filler + '        FONTUNDERLINE ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontUnderLine' ) + CRLF
      Code := Code + filler + '        FONTSTRIKEOUT ' + __mvGet ( _HMG_aControlNames[ i ] + 'FontStrikeout' ) + CRLF
      Code := Code + filler + '        HELPID ' + __mvGet ( _HMG_aControlNames[ i ] + 'HelpId' ) + CRLF
      Code := Code + filler + '        TABSTOP ' + __mvGet ( _HMG_aControlNames[ i ] + 'TabStop' ) + CRLF
      Code := Code + filler + '        VISIBLE ' + __mvGet ( _HMG_aControlNames[ i ] + 'Visible' ) + CRLF

   ELSE

      Code := Code + filler + '    DEFINE ' + ControlType + ' ' + AllTrim ( _HMG_aControlNames[ i ] ) + CRLF

      Code := Code + filler + '        ROW    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Row' ) ) ) + CRLF
      Code := Code + filler + '        COL    ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Col' ) ) ) + CRLF
      Code := Code + filler + '        WIDTH  ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Width' ) ) ) + CRLF
      Code := Code + filler + '        HEIGHT ' + AllTrim( Str( GetProperty ( DesignForm, AllTrim ( _HMG_aControlNames[ i ] ), 'Height' ) ) ) + CRLF

   ENDIF


   IF ControlType == 'USER'

      Code := Code + filler + '    END ' + AllTrim ( HMG_UPPER ( aComponentNames[ _HMG_aControlMiscData1[ i ][ 1 ] - 10 ] ) ) + CRLF

   ELSE

      IF ControlType != 'TIMER' .AND. ControlType != 'WINDOW'

         Code := Code + filler + '    END ' + ControlType + CRLF

      ENDIF

   ENDIF

RETURN Code

*------------------------------------------------------------------------------*
PROCEDURE EditTabOrder()
*------------------------------------------------------------------------------*
   PRIVATE aTree := {}
   PRIVATE aTreeTabIndex := {}
   PRIVATE aTreeTabPage := {}
   PRIVATE aTreeTabPos := {}
   PRIVATE aTreeTabPageLength := {}

   IF ! _IsWIndowDefined ( DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   DEFINE WINDOW EditTabOrder ;
         AT 0, 0 ;
         WIDTH 418 ;
         HEIGHT 390 + GetTitleHeight() + 2 ;
         TITLE aMsgs[ 170 ] ;
         MODAL ;
         NOSIZE

      DEFINE FRAME filler1
         ROW 4
         COL 5
         WIDTH 332
         HEIGHT 30
      END FRAME

      DEFINE FRAME filler2
         ROW 4
         COL 339
         WIDTH 66
         HEIGHT 30
      END FRAME

      DEFINE FRAME filler3
         ROW 37
         COL 5
         WIDTH 400
         HEIGHT 344
      END FRAME

      DEFINE LABEL label1
         ROW 14
         COL 14
         WIDTH 300
         HEIGHT 25
         VALUE aMsgs[ 169 ]
         FONTNAME 'ARIAL'
         FONTSIZE 8
      END LABEL

      DEFINE BUTTON up
         ROW 8
         COL 343
         WIDTH 29
         HEIGHT 23
         PICTURE 'CONTROLUP'
         TOOLTIP 'Control Up'
         ACTION Up()
      END BUTTON

      DEFINE BUTTON down
         ROW 8
         COL 373
         WIDTH 29
         HEIGHT 23
         PICTURE 'CONTROLDOWN'
         TOOLTIP 'Control Down'
         ACTION down()
      END BUTTON

      DEFINE TREE Tree_1 AT 44, 12 WIDTH 386 HEIGHT 330 ITEMIDS
      END TREE

   END WINDOW

   CreateOrderTree()

   CENTER WINDOW EditTabOrder

   EditTabOrder.Tree_1.SetFocus

   ACTIVATE WINDOW EditTabOrder

   SelectControl ( SelectedControlName )
   DrawGrid()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE CreateOrderTree
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL x
   LOCAL PageMap
   LOCAL j
   LOCAL k
   LOCAL idx

   aTree := {}
   aTreeTabIndex := {}
   aTreeTabPage := {}
   aTreeTabPos := {}
   aTreeTabPageLength := {}

   EditTabOrder.Tree_1.DeleteAllItems

   EditTabOrder.Tree_1.AddItem( 'Form', 0, 1 )

   FOR i := 1 TO HMG_LEN ( _HMG_aControlHandles )

      IF _HMG_aControlParenthandles[ i ] == DesignFormhandle

         If ! Empty ( _HMG_aControlNames[ i ] ) .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'INTERNAL_TIMER_1' .AND. HMG_UPPER( _HMG_aControlNames[ i ] ) != 'TEXT_DUMMY' .AND. _HMG_aControlDeleted[ i ] == .F.

            IF _HMG_aControlContainerRow[ i ] == -1 .AND. _HMG_aControlContainerCol[ i ] == -1

               EditTabOrder.Tree_1.AddItem( _HMG_aControlNames[ i ], 1, i )

               AAdd ( aTree, i )
               AAdd ( aTreeTabIndex, 0 )
               AAdd ( aTreeTabPage, 0 )
               AAdd ( aTreeTabPos, 0 )
               AAdd ( aTreeTabPageLength, 0 )

               IF _HMG_aControlType[ i ] == 'TAB'

                  PageMap := _HMG_aControlPageMap[ i ]

                  FOR x := 1 TO HMG_LEN ( PageMap )

                     EditTabOrder.Tree_1.AddItem( 'Page ' + AllTrim( Str( x ) ), i, ( i * 1000 ) + x )

                     AAdd ( aTree, ( i * 1000 ) + x )
                     AAdd ( aTreeTabIndex, 0 )
                     AAdd ( aTreeTabPage, 0 )
                     AAdd ( aTreeTabPos, 0 )
                     AAdd ( aTreeTabPageLength, 0 )

                     FOR j := 1 TO HMG_LEN ( PageMap[ x ] )

                        IF ValType ( PageMap[ x ][ j ] ) == 'N'
                           idx := AScan ( _HMG_aControlHandles, PageMap[ x ][ j ] )
                           IF idx > 0
                              EditTabOrder.Tree_1.AddItem( _HMG_aControlNames[ idx ], ( i * 1000 ) + x, idx )
                              AAdd ( aTree, idx )
                              AAdd ( aTreeTabIndex, i )
                              AAdd ( aTreeTabPage, x )
                              AAdd ( aTreeTabPos, j )
                              AAdd ( aTreeTabPageLength, HMG_LEN ( PageMap[ x ] ) )
                           ENDIF

                        ELSEIF ValType ( PageMap[ x ][ j ] ) == 'A'

                           FOR k := 1 TO HMG_LEN ( _HMG_aControlHandles )

                              IF ValType ( _HMG_aControlHandles[ k ] ) == 'A'

                                 IF _HMG_aControlHandles[ k ][ 1 ] == PageMap[ x ][ j ][ 1 ]

                                    EditTabOrder.Tree_1.AddItem( _HMG_aControlNames[ k ], ( i * 1000 ) + x, k )
                                    AAdd ( aTree, k )
                                    AAdd ( aTreeTabIndex, i )
                                    AAdd ( aTreeTabPage, x )
                                    AAdd ( aTreeTabPos, j )
                                    AAdd ( aTreeTabPageLength, HMG_LEN ( PageMap[ x ] ) )
                                    EXIT

                                 ENDIF

                              ENDIF

                           NEXT k

                        ENDIF

                     NEXT j

                  NEXT x

               ENDIF

            ENDIF

         ENDIF

      ENDIF

   NEXT i

   EditTabOrder.Tree_1.Expand ( 1 )

RETURN


*------------------------------------------------------------------------------*
PROCEDURE SwitchControls ( j, k )
*------------------------------------------------------------------------------*
   LOCAL T01
   LOCAL T02
   LOCAL T03
   LOCAL T04
   LOCAL T05
   LOCAL T06
   LOCAL T07
   LOCAL T08
   LOCAL T09
   LOCAL T10
   LOCAL T11
   LOCAL T12
   LOCAL T13
   LOCAL T14
   LOCAL T15
   LOCAL T16
   LOCAL T17
   LOCAL T18
   LOCAL T19
   LOCAL T20
   LOCAL T21
   LOCAL T22
   LOCAL T23
   LOCAL T24
   LOCAL T25
   LOCAL T26
   LOCAL T27
   LOCAL T28
   LOCAL T29
   LOCAL T30
   LOCAL T31
   LOCAL T32
   LOCAL T33
   LOCAL T34
   LOCAL T35
   LOCAL T36
   LOCAL T37
   LOCAL T38
   LOCAL T39
   LOCAL T40

   __mvPut ( '_' + DesignForm + '_' + _HMG_aControlNames[ j ], k )
   __mvPut ( '_' + DesignForm + '_' + _HMG_aControlNames[ k ], j )

   T01 := _HMG_aControlType[ j ]
   T02 := _HMG_aControlNames[ j ]
   T03 := _HMG_aControlHandles[ j ]
   T04 := _HMG_aControlParenthandles[ j ]
   T05 := _HMG_aControlIds[ j ]
   T06 := _HMG_aControlProcedures[ j ]
   T07 := _HMG_aControlPageMap[ j ]
   T08 := _HMG_aControlValue[ j ]
   T09 := _HMG_aControlInputMask[ j ]
   T10 := _HMG_aControllostFocusProcedure[ j ]
   T11 := _HMG_aControlGotFocusProcedure[ j ]
   T12 := _HMG_aControlChangeProcedure[ j ]
   T13 := _HMG_aControlDeleted[ j ]
   T14 := _HMG_aControlBkColor[ j ]
   T15 := _HMG_aControlFontColor[ j ]
   T16 := _HMG_aControlDblClick[ j ]
   T17 := _HMG_aControlHeadClick[ j ]
   T18 := _HMG_aControlRow[ j ]
   T19 := _HMG_aControlCol[ j ]
   T20 := _HMG_aControlWidth[ j ]
   T21 := _HMG_aControlHeight[ j ]
   T22 := _HMG_aControlSpacing[ j ]
   T23 := _HMG_aControlContainerRow[ j ]
   T24 := _HMG_aControlContainerCol[ j ]
   T25 := _HMG_aControlPicture[ j ]
   T26 := _HMG_aControlContainerHandle[ j ]
   T27 := _HMG_aControlFontName[ j ]
   T28 := _HMG_aControlFontSize[ j ]
   T29 := _HMG_aControlFontAttributes[ j ]
   T30 := _HMG_aControlToolTip[ j ]
   T31 := _HMG_aControlRangeMin[ j ]
   T32 := _HMG_aControlRangeMax[ j ]
   T33 := _HMG_aControlCaption[ j ]
   T34 := _HMG_aControlVisible[ j ]
   T35 := _HMG_aControlHelpId[ j ]
   T36 := _HMG_aControlFontHandle[ j ]
   T37 := _HMG_aControlBrushHandle[ j ]
   T38 := _HMG_aControlEnabled[ j ]
   T39 := _HMG_aControlMiscData1[ j ]
   T40 := _HMG_aControlMiscData2[ j ]


   _HMG_aControlType[ j ] := _HMG_aControlType[ k ]
   _HMG_aControlNames[ j ] := _HMG_aControlNames[ k ]
   _HMG_aControlHandles[ j ] := _HMG_aControlHandles[ k ]
   _HMG_aControlParenthandles[ j ] := _HMG_aControlParenthandles[ k ]
   _HMG_aControlIds[ j ] := _HMG_aControlIds[ k ]
   _HMG_aControlProcedures[ j ] := _HMG_aControlProcedures[ k ]
   _HMG_aControlPageMap[ j ] := _HMG_aControlPageMap[ k ]
   _HMG_aControlValue[ j ] := _HMG_aControlValue[ k ]
   _HMG_aControlInputMask[ j ] := _HMG_aControlInputMask[ k ]
   _HMG_aControllostFocusProcedure[ j ] := _HMG_aControllostFocusProcedure[ k ]
   _HMG_aControlGotFocusProcedure[ j ] := _HMG_aControlGotFocusProcedure[ k ]
   _HMG_aControlChangeProcedure[ j ] := _HMG_aControlChangeProcedure[ k ]
   _HMG_aControlDeleted[ j ] := _HMG_aControlDeleted[ k ]
   _HMG_aControlBkColor[ j ] := _HMG_aControlBkColor[ k ]
   _HMG_aControlFontColor[ j ] := _HMG_aControlFontColor[ k ]
   _HMG_aControlDblClick[ j ] := _HMG_aControlDblClick[ k ]
   _HMG_aControlHeadClick[ j ] := _HMG_aControlHeadClick[ k ]
   _HMG_aControlRow[ j ] := _HMG_aControlRow[ k ]
   _HMG_aControlCol[ j ] := _HMG_aControlCol[ k ]
   _HMG_aControlWidth[ j ] := _HMG_aControlWidth[ k ]
   _HMG_aControlHeight[ j ] := _HMG_aControlHeight[ k ]
   _HMG_aControlSpacing[ j ] := _HMG_aControlSpacing[ k ]
   _HMG_aControlContainerRow[ j ] := _HMG_aControlContainerRow[ k ]
   _HMG_aControlContainerCol[ j ] := _HMG_aControlContainerCol[ k ]
   _HMG_aControlPicture[ j ] := _HMG_aControlPicture[ k ]
   _HMG_aControlContainerHandle[ j ] := _HMG_aControlContainerHandle[ k ]
   _HMG_aControlFontName[ j ] := _HMG_aControlFontName[ k ]
   _HMG_aControlFontSize[ j ] := _HMG_aControlFontSize[ k ]
   _HMG_aControlFontAttributes[ j ] := _HMG_aControlFontAttributes[ k ]
   _HMG_aControlToolTip[ j ] := _HMG_aControlToolTip[ k ]
   _HMG_aControlRangeMin[ j ] := _HMG_aControlRangeMin[ k ]
   _HMG_aControlRangeMax[ j ] := _HMG_aControlRangeMax[ k ]
   _HMG_aControlCaption[ j ] := _HMG_aControlCaption[ k ]
   _HMG_aControlVisible[ j ] := _HMG_aControlVisible[ k ]
   _HMG_aControlHelpId[ j ] := _HMG_aControlHelpId[ k ]
   _HMG_aControlFontHandle[ j ] := _HMG_aControlFontHandle[ k ]
   _HMG_aControlBrushHandle[ j ] := _HMG_aControlBrushHandle[ k ]
   _HMG_aControlEnabled[ j ] := _HMG_aControlEnabled[ k ]
   _HMG_aControlMiscData1[ j ] := _HMG_aControlMiscData1[ k ]
   _HMG_aControlMiscData2[ j ] := _HMG_aControlMiscData2[ k ]


   _HMG_aControlType[ k ] := T01
   _HMG_aControlNames[ k ] := T02
   _HMG_aControlHandles[ k ] := T03
   _HMG_aControlParenthandles[ k ] := T04
   _HMG_aControlIds[ k ] := T05
   _HMG_aControlProcedures[ k ] := T06
   _HMG_aControlPageMap[ k ] := T07
   _HMG_aControlValue[ k ] := T08
   _HMG_aControlInputMask[ k ] := T09
   _HMG_aControllostFocusProcedure[ k ] := T10
   _HMG_aControlGotFocusProcedure[ k ] := T11
   _HMG_aControlChangeProcedure[ k ] := T12
   _HMG_aControlDeleted[ k ] := T13
   _HMG_aControlBkColor[ k ] := T14
   _HMG_aControlFontColor[ k ] := T15
   _HMG_aControlDblClick[ k ] := T16
   _HMG_aControlHeadClick[ k ] := T17
   _HMG_aControlRow[ k ] := T18
   _HMG_aControlCol[ k ] := T19
   _HMG_aControlWidth[ k ] := T20
   _HMG_aControlHeight[ k ] := T21
   _HMG_aControlSpacing[ k ] := T22
   _HMG_aControlContainerRow[ k ] := T23
   _HMG_aControlContainerCol[ k ] := T24
   _HMG_aControlPicture[ k ] := T25
   _HMG_aControlContainerHandle[ k ] := T26
   _HMG_aControlFontName[ k ] := T27
   _HMG_aControlFontSize[ k ] := T28
   _HMG_aControlFontAttributes[ k ] := T29
   _HMG_aControlToolTip[ k ] := T30
   _HMG_aControlRangeMin[ k ] := T31
   _HMG_aControlRangeMax[ k ] := T32
   _HMG_aControlCaption[ k ] := T33
   _HMG_aControlVisible[ k ] := T34
   _HMG_aControlHelpId[ k ] := T35
   _HMG_aControlFontHandle[ k ] := T36
   _HMG_aControlBrushHandle[ k ] := T37
   _HMG_aControlEnabled[ k ] := T38
   _HMG_aControlMiscData1[ k ] := T39
   _HMG_aControlMiscData2[ k ] := T40

RETURN

PROCEDURE up ()

   LOCAL TabIndex, TabPage, ControlPos, /*ControlCount,*/ h1, h2, t

   LOCAL Index1
   LOCAL Index2 := 0
   LOCAL pos
   LOCAL x
   LOCAL j

   DesignFormModified := .T.

   Index1 := EditTabOrder.Tree_1.VALUE

   IF index1 > 1000
      EditTabOrder.Tree_1.SetFocus
      RETURN
   ENDIF

   pos := AScan ( aTree, Index1 )

   IF pos == 0
      EditTabOrder.Tree_1.SetFocus
      RETURN
   ENDIF

   IF pos == 1
      EditTabOrder.Tree_1.SetFocus
      RETURN
   ENDIF

   IF _HMG_aControlContainerRow[ index1 ] == -1

      // Calculate Index2

      FOR x := pos - 1 TO 1 STEP -1

         j := aTree[ x ]

         IF j <= HMG_LEN( _HMG_aControlHandles )

            IF _HMG_aControlContainerRow[ j ] == -1
               Index2 := j
               EXIT
            ENDIF

         ENDIF

      NEXT x

      IF Index2 == 0
         EditTabOrder.Tree_1.SetFocus
         RETURN
      ENDIF

      SwitchControls ( Index1, Index2 )
      CreateOrderTree()
      EditTabOrder.Tree_1.VALUE := Index2
      EditTabOrder.Tree_1.SetFocus

   ELSE

      TabIndex := aTreeTabIndex[ pos ]
      TabPage := aTreeTabPage[ pos ]
      ControlPos := aTreeTabPos[ pos ]
      // ControlCount := aTreeTabPageLength [pos]

      IF ControlPos == 1
         EditTabOrder.Tree_1.SetFocus
         RETURN
      ENDIF

      h1 := _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos ]
      h2 := _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos - 1 ]

      t := h1

      _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos ] := h2
      _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos - 1 ] := t

      CreateOrderTree()
      EditTabOrder.Tree_1.VALUE := aTree[ pos - 1 ]
      EditTabOrder.Tree_1.SetFocus

   ENDIF

RETURN

PROCEDURE down

   LOCAL Index1
   LOCAL Index2 := 0
   LOCAL pos
   LOCAL x
   LOCAL j
   LOCAL TabIndex
   LOCAL TabPage
   LOCAL ControlPos
   LOCAL ControlCount
   LOCAL h1
   LOCAL h2
   LOCAL t

   DesignFormModified := .T.

   Index1 := EditTabOrder.Tree_1.VALUE

   IF index1 > 1000
      EditTabOrder.Tree_1.SetFocus
      RETURN
   ENDIF

   IF index1 == 1
      EditTabOrder.Tree_1.SetFocus
      RETURN
   ENDIF

   pos := AScan ( aTree, Index1 )

   IF pos == HMG_LEN ( aTree )
      EditTabOrder.Tree_1.SetFocus
      RETURN
   ENDIF

   IF _HMG_aControlContainerRow[ index1 ] == -1

      // Calculate Index2

      FOR x := pos + 1 TO HMG_LEN ( aTree )

         j := aTree[ x ]

         IF j <= HMG_LEN( _HMG_aControlHandles )

            IF _HMG_aControlContainerRow[ j ] == -1
               Index2 := j
               EXIT
            ENDIF

         ENDIF

      NEXT x

      IF Index2 == 0
         RETURN
      ENDIF

      SwitchControls ( Index1, Index2 )
      CreateOrderTree()
      EditTabOrder.Tree_1.VALUE := Index2
      EditTabOrder.Tree_1.SetFocus

   ELSE

      TabIndex := aTreeTabIndex[ pos ]
      TabPage := aTreeTabPage[ pos ]
      ControlPos := aTreeTabPos[ pos ]
      ControlCount := aTreeTabPageLength[ pos ]

      IF ControlPos == ControlCount
         EditTabOrder.Tree_1.SetFocus
         RETURN
      ENDIF

      h1 := _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos ]
      h2 := _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos + 1 ]

      t := h1

      _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos ] := h2
      _HMG_aControlPageMap[ TabIndex ][ TabPage ][ ControlPos + 1 ] := t

      CreateOrderTree()
      EditTabOrder.Tree_1.VALUE := aTree[ pos + 1 ]
      EditTabOrder.Tree_1.SetFocus

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE UpdateControlProperties ( i )
*------------------------------------------------------------------------------*
   LOCAL ROW
   LOCAL COL
   LOCAL WIDTH
   LOCAL HEIGHT
   LOCAL NAME
   // Local Type
   LOCAL z
   LOCAL aProperties
   LOCAL aEvents
   LOCAL x

   ROW := _HMG_aControlRow[ i ]
   COL := _HMG_aControlCol[ i ]
   WIDTH := _HMG_aControlWidth[ i ]
   HEIGHT := _HMG_aControlHeight[ i ]
   NAME := _HMG_aControlNames[ i ]

   IF _HMG_aControlContainerRow[ i ] != -1 .AND. _HMG_aControlContainerCol[ i ] != -1
      ROW := ROW - _HMG_aControlContainerRow[ i ]
      COL := COL - _HMG_aControlContainerCol[ i ]
   ENDIF

   IF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] > 10
      // **************************************************************
      // Type := 'USER'
      // **************************************************************

      z := _HMG_aControlMiscData1[ i ][ 1 ] - 10

      aProperties := AClone ( aComponentProperties[ z ] )
      aEvents := AClone ( aComponentEvents[ z ] )

      ASort ( aProperties )
      ASort ( aEvents )

      Properties.Grid_1.DeleteAllItems

      FOR x := 1 TO HMG_LEN ( aProperties )

         IF HMG_UPPER( AllTrim( aProperties[ x ] ) ) == 'NAME'

            Properties.Grid_1.AddItem ( { 'Name', Name } )

         ELSEIF HMG_UPPER( AllTrim( aProperties[ x ] ) ) == 'COL'

            Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )

         ELSEIF HMG_UPPER( AllTrim( aProperties[ x ] ) ) == 'ROW'

            Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )

         ELSEIF HMG_UPPER( AllTrim( aProperties[ x ] ) ) == 'WIDTH'

            Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

         ELSEIF HMG_UPPER( AllTrim( aProperties[ x ] ) ) == 'HEIGHT'

            Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )

         ELSE

            Properties.Grid_1.AddItem ( { aProperties[ x ], __mvGet ( NAME + aProperties[ x ] ) } )

         ENDIF

      NEXT x

      Properties.Grid_2.DeleteAllItems

      FOR x := 1 TO HMG_LEN ( aEvents )

         Properties.Grid_2.AddItem ( { aEvents[ x ], __mvGet ( NAME + aEvents[ x ] ), '+', '-', '...' } )

      NEXT x

   ELSEIF _HMG_aControlType[ i ] == 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 0
      // **************************************************************
      // Type := 'BUTTON'
      // **************************************************************

      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'Caption', __mvGet ( NAME + 'Caption' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Flat', __mvGet ( NAME + 'Flat' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'MultiLine', __mvGet ( NAME + 'MultiLine' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'PictAlignment', __mvGet ( NAME + 'PictAlignment' ) } )
      Properties.Grid_1.AddItem ( { 'Picture', __mvGet ( NAME + 'Picture' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Transparent', __mvGet ( NAME + 'Transparent' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'Action', __mvGet ( NAME + 'Action' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'CHECKBOX' .AND. _HMG_aControlMiscData1[ i ] == 0
      // **************************************************************
      // Type := 'CHECKBOX'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Caption', __mvGet ( NAME + 'Caption' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Field', __mvGet ( NAME + 'Field' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Transparent', __mvGet ( NAME + 'Transparent' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'LIST'
      // **************************************************************
      // Type := 'LISTBOX'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'DragItems', __mvGet ( NAME + 'DragItems' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Items', __mvGet ( NAME + 'Items' ) } )
      Properties.Grid_1.AddItem ( { 'MultiSelect', __mvGet ( NAME + 'MultiSelect' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Sort', __mvGet ( NAME + 'Sort' ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnDblClick', __mvGet ( NAME + 'OnDblClick' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'COMBO'
      // **************************************************************
      // Type := 'COMBOBOX'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'DisplayEdit', __mvGet ( NAME + 'DisplayEdit' ) } )
      Properties.Grid_1.AddItem ( { 'DroppedWidth', __mvGet ( NAME + 'DroppedWidth' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Image', __mvGet ( NAME + 'Image' ) } )
      Properties.Grid_1.AddItem ( { 'Items', __mvGet ( NAME + 'Items' ) } )
      Properties.Grid_1.AddItem ( { 'ItemSource', __mvGet ( NAME + 'ItemSource' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Sort', __mvGet ( NAME + 'Sort' ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'ValueSource', __mvGet ( NAME + 'ValueSource' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnCloseUp', __mvGet ( NAME + 'OnCloseUp' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnDisplayChange', __mvGet ( NAME + 'OnDisplayChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnDropDown', __mvGet ( NAME + 'OnDropDown' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnEnter', __mvGet ( NAME + 'OnEnter' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'CHECKBOX' .AND. _HMG_aControlMiscData1[ i ] == 1
      // **************************************************************
      // Type := 'CHECKBUTTON'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Caption', __mvGet ( NAME + 'Caption' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Picture', __mvGet ( NAME + 'Picture' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'GRID'
      // **************************************************************
      // Type := 'GRID'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'AllowAppend', __mvGet ( NAME + 'AllowAppend' ) } )
      Properties.Grid_1.AddItem ( { 'AllowDelete', __mvGet ( NAME + 'AllowDelete' ) } )
      Properties.Grid_1.AddItem ( { 'AllowEdit', __mvGet ( NAME + 'AllowEdit' ) } )
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Buffered', __mvGet ( NAME + 'Buffered' ) } )
      Properties.Grid_1.AddItem ( { 'CellNavigation', __mvGet ( NAME + 'CellNavigation' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'ColumnControls', __mvGet ( NAME + 'ColumnControls' ) } )
      Properties.Grid_1.AddItem ( { 'ColumnFields', __mvGet ( NAME + 'ColumnFields' ) } )
      Properties.Grid_1.AddItem ( { 'ColumnValid', __mvGet ( NAME + 'ColumnValid' ) } )
      Properties.Grid_1.AddItem ( { 'ColumnWhen', __mvGet ( NAME + 'ColumnWhen' ) } )
      Properties.Grid_1.AddItem ( { 'DynamicBackColor', __mvGet ( NAME + 'DynamicBackColor' ) } )
      Properties.Grid_1.AddItem ( { 'DynamicForeColor', __mvGet ( NAME + 'DynamicForeColor' ) } )
      Properties.Grid_1.AddItem ( { 'DynamicDisplay', __mvGet ( NAME + 'DynamicDisplay' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Headers', __mvGet ( NAME + 'Headers' ) } )
      Properties.Grid_1.AddItem ( { 'HeaderImages', __mvGet ( NAME + 'HeaderImages' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Image', __mvGet ( NAME + 'Image' ) } )
      Properties.Grid_1.AddItem ( { 'ItemCount', __mvGet ( NAME + 'ItemCount' ) } )
      Properties.Grid_1.AddItem ( { 'Items', __mvGet ( NAME + 'Items' ) } )
      Properties.Grid_1.AddItem ( { 'Justify', __mvGet ( NAME + 'Justify' ) } )
      Properties.Grid_1.AddItem ( { 'Lines', __mvGet ( NAME + 'Lines' ) } )
      Properties.Grid_1.AddItem ( { 'LockColumns', __mvGet ( NAME + 'LockColumns' ) } )
      Properties.Grid_1.AddItem ( { 'MultiSelect', __mvGet ( NAME + 'MultiSelect' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'RowSource', __mvGet ( NAME + 'RowSource' ) } )
      Properties.Grid_1.AddItem ( { 'ShowHeaders', __mvGet ( NAME + 'ShowHeaders' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Virtual', __mvGet ( NAME + 'Virtual' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )
      Properties.Grid_1.AddItem ( { 'Widths', __mvGet ( NAME + 'Widths' ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnDblClick', __mvGet ( NAME + 'OnDblClick' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnHeadClick', __mvGet ( NAME + 'OnHeadClick' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnQueryData', __mvGet ( NAME + 'OnQueryData' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnSave', __mvGet ( NAME + 'OnSave' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'SLIDER'
      // **************************************************************
      // Type := 'SLIDER'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Orientation', __mvGet ( NAME + 'Orientation' ) } )
      Properties.Grid_1.AddItem ( { 'RangeMax', __mvGet ( NAME + 'RangeMax' ) } )
      Properties.Grid_1.AddItem ( { 'RangeMin', __mvGet ( NAME + 'RangeMin' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'TickMarks', __mvGet ( NAME + 'TickMarks' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'SPINNER'
      // **************************************************************
      // Type := 'SPINNER'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Increment', __mvGet ( NAME + 'Increment' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'RangeMax', __mvGet ( NAME + 'RangeMax' ) } )
      Properties.Grid_1.AddItem ( { 'RangeMin', __mvGet ( NAME + 'RangeMin' ) } )
      Properties.Grid_1.AddItem ( { 'ReadOnly', __mvGet ( NAME + 'ReadOnly' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )
      Properties.Grid_1.AddItem ( { 'Wrap', __mvGet ( NAME + 'Wrap' ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'IMAGE'
      // **************************************************************
      // Type := 'IMAGE'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Picture', __mvGet ( NAME + 'Picture' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Stretch', __mvGet ( NAME + 'Stretch' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'Action', __mvGet ( NAME + 'Action' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'TREE'
      // **************************************************************
      // Type := 'TREE'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'ItemIds', __mvGet ( NAME + 'ItemIds' ) } )
      Properties.Grid_1.AddItem ( { 'ItemImages', __mvGet ( NAME + 'ItemImages' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'NodeImages', __mvGet ( NAME + 'NodeImages' ) } )
      Properties.Grid_1.AddItem ( { 'RootButton', __mvGet ( NAME + 'RootButton' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnDblClick', __mvGet ( NAME + 'OnDblClick' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'DATEPICK'
      // **************************************************************
      // Type := 'DATEPICKER'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Field', __mvGet ( NAME + 'Field' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'RightAlign', __mvGet ( NAME + 'RightAlign' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'ShowNone', __mvGet ( NAME + 'ShowNone' ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'UpDown', __mvGet ( NAME + 'UpDown' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnEnter', __mvGet ( NAME + 'OnEnter' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'TEXT'
      // **************************************************************
      // Type := 'TEXTBOX'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'CaseConvert', __mvGet ( NAME + 'CaseConvert' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'DataType', __mvGet ( NAME + 'DataType' ) } )
      // Properties.Grid_1.AddItem ( {'DisabledBackColor', __MVGET ( Name + 'DisabledBackColor' ) } )
      // Properties.Grid_1.AddItem ( {'DisabledFontColor', __MVGET ( Name + 'DisabledFontColor' ) } )
      Properties.Grid_1.AddItem ( { 'Field', __mvGet ( NAME + 'Field' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Format', __mvGet ( NAME + 'Format' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'InputMask', __mvGet ( NAME + 'InputMask' ) } )
      Properties.Grid_1.AddItem ( { 'MaxLength', __mvGet ( NAME + 'MaxLength' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Password', __mvGet ( NAME + 'Password' ) } )
      Properties.Grid_1.AddItem ( { 'ReadOnly', __mvGet ( NAME + 'ReadOnly' ) } )
      Properties.Grid_1.AddItem ( { 'RightAlign', __mvGet ( NAME + 'RightAlign' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnEnter', __mvGet ( NAME + 'OnEnter' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'EDIT'
      // **************************************************************
      // Type := 'EDITBOX'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      // Properties.Grid_1.AddItem ( {'DisabledBackColor', __MVGET ( Name + 'DisabledBackColor' ) } )
      // Properties.Grid_1.AddItem ( {'DisabledFontColor', __MVGET ( Name + 'DisabledFontColor' ) } )
      Properties.Grid_1.AddItem ( { 'Field', __mvGet ( NAME + 'Field' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'HScrollBar', __mvGet ( NAME + 'hScrollBar' ) } )
      Properties.Grid_1.AddItem ( { 'MaxLength', __mvGet ( NAME + 'MaxLength' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'ReadOnly', __mvGet ( NAME + 'ReadOnly' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'VScrollBar', __mvGet ( NAME + 'VScrollBar' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 0
      // **************************************************************
      // Type := 'LABEL'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Alignment', __mvGet ( NAME + 'Alignment' ) } )
      Properties.Grid_1.AddItem ( { 'AutoSize', __mvGet ( NAME + 'AutoSize' ) } )
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Transparent', __mvGet ( NAME + 'Transparent' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'Action', __mvGet ( NAME + 'Action' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'BROWSE'
      // **************************************************************
      // Type := 'BROWSE'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'AllowAppend', __mvGet ( NAME + 'AllowAppend' ) } )
      Properties.Grid_1.AddItem ( { 'AllowDelete', __mvGet ( NAME + 'AllowDelete' ) } )
      Properties.Grid_1.AddItem ( { 'AllowEdit', __mvGet ( NAME + 'AllowEdit' ) } )
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'DisplayItems', __mvGet ( NAME + 'DisplayItems' ) } )
      Properties.Grid_1.AddItem ( { 'DynamicBackColor', __mvGet ( NAME + 'DynamicBackColor' ) } )
      Properties.Grid_1.AddItem ( { 'DynamicForeColor', __mvGet ( NAME + 'DynamicForeColor' ) } )
      Properties.Grid_1.AddItem ( { 'Fields', __mvGet ( NAME + 'Fields' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Format', __mvGet ( NAME + 'Format' ) } )
      Properties.Grid_1.AddItem ( { 'Headers', __mvGet ( NAME + 'Headers' ) } )
      Properties.Grid_1.AddItem ( { 'HeaderImages', __mvGet ( NAME + 'HeaderImages' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Image', __mvGet ( NAME + 'Image' ) } )
      Properties.Grid_1.AddItem ( { 'InputItems', __mvGet ( NAME + 'InputItems' ) } )
      Properties.Grid_1.AddItem ( { 'InputMask', __mvGet ( NAME + 'InputMask' ) } )
      Properties.Grid_1.AddItem ( { 'Justify', __mvGet ( NAME + 'Justify' ) } )
      Properties.Grid_1.AddItem ( { 'Lines', __mvGet ( NAME + 'Lines' ) } )
      Properties.Grid_1.AddItem ( { 'Lock', __mvGet ( NAME + 'Lock' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'ReadOnlyFields', __mvGet ( NAME + 'ReadOnlyFields' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Valid', __mvGet ( NAME + 'Valid' ) } )
      Properties.Grid_1.AddItem ( { 'ValidMessages', __mvGet ( NAME + 'ValidMessages' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'vScrollBar', __mvGet ( NAME + 'vScrollBar' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'When', __mvGet ( NAME + 'When' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )
      Properties.Grid_1.AddItem ( { 'Widths', __mvGet ( NAME + 'Widths' ) } )
      Properties.Grid_1.AddItem ( { 'WorkArea', __mvGet ( NAME + 'WorkArea' ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnDblClick', __mvGet ( NAME + 'OnDblClick' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnHeadClick', __mvGet ( NAME + 'OnHeadClick' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'RADIOGROUP'
      // **************************************************************
      // Type := 'RADIOGROUP'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Orientation', __mvGet ( NAME + 'Orientation' ) } )
      Properties.Grid_1.AddItem ( { 'Options', __mvGet ( NAME + 'Options' ) } )
      Properties.Grid_1.AddItem ( { 'ReadOnly', __mvGet ( NAME + 'ReadOnly' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Spacing', __mvGet ( NAME + 'Spacing' ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Transparent', __mvGet ( NAME + 'Transparent' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'FRAME'
      // **************************************************************
      // Type := 'FRAME'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Caption', __mvGet ( NAME + 'Caption' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Transparent', __mvGet ( NAME + 'Transparent' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems

   ELSEIF _HMG_aControlType[ i ] == 'TAB'
      // **************************************************************
      // Type := 'TAB'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Buttons', __mvGet ( NAME + 'Buttons' ) } )
      Properties.Grid_1.AddItem ( { 'Captions', __mvGet ( NAME + 'Captions' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Flat', __mvGet ( NAME + 'Flat' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HotTrack', __mvGet ( NAME + 'HotTrack' ) } )
      Properties.Grid_1.AddItem ( { 'Multiline', __mvGet ( NAME + 'Multiline' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'PageCount', __mvGet ( NAME + 'PageCount' ) } )
      Properties.Grid_1.AddItem ( { 'PageImages', __mvGet ( NAME + 'PageImages' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Vertical', __mvGet ( NAME + 'Vertical' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'ANIMATEBOX'
      // **************************************************************
      // Type := 'ANIMATEBOX'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'AutoPlay', __mvGet ( NAME + 'AutoPlay' ) } )
      Properties.Grid_1.AddItem ( { 'Center', __mvGet ( NAME + 'Center' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'File', __mvGet ( NAME + 'File' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Transparent', __mvGet ( NAME + 'Transparent' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems

   ELSEIF _HMG_aControlType[ i ] == 'HYPERLINK' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 6
      // **************************************************************
      // Type := 'HYPERLINK'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Address', __mvGet ( NAME + 'Address' ) } )
      Properties.Grid_1.AddItem ( { 'AutoSize', __mvGet ( NAME + 'AutoSize' ) } )
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontColor', __mvGet ( NAME + 'FontColor' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'HandCursor', __mvGet ( NAME + 'HandCursor' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )

      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems

   ELSEIF _HMG_aControlType[ i ] == 'MONTHCAL'
      // **************************************************************
      // Type := 'MONTHCALENDAR'
      // **************************************************************

      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'Today', __mvGet ( NAME + 'Today' ) } )
      Properties.Grid_1.AddItem ( { 'TodayCircle', __mvGet ( NAME + 'TodayCircle' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'WeekNumbers', __mvGet ( NAME + 'WeekNumbers' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'RICHEDIT'
      // **************************************************************
      // Type := 'RICHEDITBOX'
      // **************************************************************

      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Field', __mvGet ( NAME + 'Field' ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'MaxLength', __mvGet ( NAME + 'MaxLength' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'ReadOnly', __mvGet ( NAME + 'ReadOnly' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 2
      // **************************************************************
      // Type := 'PROGRESSBAR'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'BackColor', __mvGet ( NAME + 'BackColor' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'ForeColor', __mvGet ( NAME + 'ForeColor' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Orientation', __mvGet ( NAME + 'Orientation' ) } )
      Properties.Grid_1.AddItem ( { 'RangeMax', __mvGet ( NAME + 'RangeMax' ) } )
      Properties.Grid_1.AddItem ( { 'RangeMin', __mvGet ( NAME + 'RangeMin' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Smooth', __mvGet ( NAME + 'Smooth' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 3
      // **************************************************************
      // Type := 'PLAYER'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'AutoSizeMovie', __mvGet ( NAME + 'AutoSizeMovie' ) } )
      Properties.Grid_1.AddItem ( { 'AutoSizeWindow', __mvGet ( NAME + 'AutoSizeWindow' ) } )
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'ErrorDlg', __mvGet ( NAME + 'ErrorDlg' ) } )
      Properties.Grid_1.AddItem ( { 'File', __mvGet ( NAME + 'File' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Menu', __mvGet ( NAME + 'Menu' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Open', __mvGet ( NAME + 'Open' ) } )
      Properties.Grid_1.AddItem ( { 'PlayBar', __mvGet ( NAME + 'PlayBar' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'ShowAll', __mvGet ( NAME + 'ShowAll' ) } )
      Properties.Grid_1.AddItem ( { 'ShowMode', __mvGet ( NAME + 'ShowMode' ) } )
      Properties.Grid_1.AddItem ( { 'ShowName', __mvGet ( NAME + 'ShowName' ) } )
      Properties.Grid_1.AddItem ( { 'ShowPosition', __mvGet ( NAME + 'ShowPosition' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 4
      // **************************************************************
      // Type := 'IPADDRESS'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'FontBold', __mvGet ( NAME + 'FontBold' ) } )
      Properties.Grid_1.AddItem ( { 'FontItalic', __mvGet ( NAME + 'FontItalic' ) } )
      Properties.Grid_1.AddItem ( { 'FontName', __mvGet ( NAME + 'FontName' ) } )
      Properties.Grid_1.AddItem ( { 'FontUnderLine', __mvGet ( NAME + 'FontUnderLine' ) } )
      Properties.Grid_1.AddItem ( { 'FontSize', __mvGet ( NAME + 'FontSize' ) } )
      Properties.Grid_1.AddItem ( { 'FontStrikeOut', __mvGet ( NAME + 'FontStrikeOut' ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'HelpId', __mvGet ( NAME + 'HelpId' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'TabStop', __mvGet ( NAME + 'TabStop' ) } )
      Properties.Grid_1.AddItem ( { 'ToolTip', __mvGet ( NAME + 'ToolTip' ) } )
      Properties.Grid_1.AddItem ( { 'Value', __mvGet ( NAME + 'Value' ) } )
      Properties.Grid_1.AddItem ( { 'Visible', __mvGet ( NAME + 'Visible' ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'OnChange', __mvGet ( NAME + 'OnChange' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnGotFocus', __mvGet ( NAME + 'OnGotFocus' ), '+', '-', '...' } )
      Properties.Grid_2.AddItem ( { 'OnLostFocus', __mvGet ( NAME + 'OnLostFocus' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'BUTTON' .AND. _HMG_aControlMiscData1[ i ] == 5
      // **************************************************************
      // Type := 'TIMER'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_1.AddItem ( { 'Interval', __mvGet ( NAME + 'Interval' ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )

      Properties.Grid_2.DeleteAllItems
      Properties.Grid_2.AddItem ( { 'Action', __mvGet ( NAME + 'Action' ), '+', '-', '...' } )

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 7
      // **************************************************************
      // Type := 'ACTIVEX'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'ProgId', __mvGet ( NAME + 'ProgId' ) } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems

   ELSEIF _HMG_aControlType[ i ] == 'LABEL' .AND. _HMG_aControlMiscData1[ i ][ 1 ] == 8
      // **************************************************************
      // Type := 'CHILDWINDOW'
      // **************************************************************
      Properties.Grid_1.DeleteAllItems

      Properties.Grid_1.AddItem ( { 'Col', AllTrim( Str( Col ) ) } )
      Properties.Grid_1.AddItem ( { 'Height', AllTrim( Str( Height ) ) } )
      Properties.Grid_1.AddItem ( { 'Name', Name } )
      Properties.Grid_1.AddItem ( { 'Row', AllTrim( Str( Row ) ) } )
      Properties.Grid_1.AddItem ( { 'Width', AllTrim( Str( Width ) ) } )

      Properties.Grid_2.DeleteAllItems

   ENDIF

   Form_Main.StatusBar.Item ( 2 + STATUSITEM_OFFSET ) := 'r:' + AllTrim( Str( Row ) ) + ' c:' + AllTrim( Str( Col ) ) + ' w:' + AllTrim( Str( Width ) ) + ' h:' + AllTrim( Str( Height ) )

RETURN

*------------------------------------------------------------------------------*
STATIC FUNCTION StringToArray ( CurrentOptions )
*------------------------------------------------------------------------------*
   LOCAL aTemp := {}
   LOCAL sTemp := ''
   LOCAL cTemp
   LOCAL OptionsTemp := CurrentOptions
   LOCAL a

   OptionsTemp := AllTrim ( OptionsTemp )

   IF hb_ULeft ( OptionsTemp, 1 ) == '{'
      OptionsTemp := hb_URight ( OptionsTemp, HMG_LEN( OptionsTemp ) - 1 )
   ENDIF

   IF hb_URight ( OptionsTemp, 1 ) == '}'
      OptionsTemp := hb_ULeft ( OptionsTemp, HMG_LEN( OptionsTemp ) - 1 )
   ENDIF

   FOR a := 1 TO HMG_LEN ( OptionsTemp )

      cTemp := hb_USubStr ( OptionsTemp, a, 1 )

      IF cTemp == ','
         sTemp := AllTrim ( sTemp )
         AAdd ( aTemp, sTemp )
         sTemp := ''
      ELSE
         sTemp := sTemp + cTemp
      ENDIF

   NEXT a

   sTemp := AllTrim ( sTemp )
   AAdd ( aTemp, sTemp )

   FOR a := 1 TO HMG_LEN ( aTemp )

      IF hb_ULeft ( aTemp[ a ], 1 ) == '"' ;
            .OR. ;
            hb_ULeft ( aTemp[ a ], 1 ) == "'"

         aTemp[ a ] := hb_URight ( aTemp[ a ], HMG_LEN( aTemp[ a ] ) - 1 )

      ENDIF

      IF hb_URight ( aTemp[ a ], 1 ) == '"' ;
            .OR. ;
            hb_URight ( aTemp[ a ], 1 ) == "'"

         aTemp[ a ] := hb_ULeft ( aTemp[ a ], HMG_LEN( aTemp[ a ] ) - 1 )

      ENDIF

   NEXT a

RETURN ( aTemp )

*------------------------------------------------------------------------------*
PROCEDURE Preferences()
*------------------------------------------------------------------------------*
   LOCAL nlang
   LOCAL alang[ 1024 ]
   LOCAL i
   LOCAL cCurrLang := ""

   nlang := ADir( StartUpFolder + "lng\*.lng", alang )

   ASize ( alang, nlang )


   DEFINE WINDOW PrefM ;
         AT 0, 0 ;
         WIDTH 564 ;
         HEIGHT 227 ;
         TITLE aMsgs[ 094 ] ;
         MODAL

      DEFINE LABEL Label_1
         ROW 58
         COL 30
         WIDTH 105
         HEIGHT 20
         VALUE aMsgs[ 087 ]
         FONTNAME "Arial"
         FONTSIZE 9
      END LABEL

      DEFINE TEXTBOX Text_1
         ROW 55
         COL 140
         WIDTH 360
         HEIGHT 24
         FONTNAME "Arial"
         FONTSIZE 9
         VALUE ""
      END TEXTBOX

      DEFINE BUTTON b1
         ROW 52
         COL 505
         WIDTH 28
         HEIGHT 28
         CAPTION '...'
         ACTION seteditor()
      END BUTTON

      DEFINE COMBOBOX Combo_1
         ROW 155
         COL 180
         WIDTH 115
         HEIGHT 100
         ITEMS { '' }
         VALUE 0
         FONTNAME "Arial"
         FONTSIZE 9
      END COMBOBOX

      DEFINE BUTTON Button_1
         ROW 153
         COL 330
         WIDTH 100
         HEIGHT 28
         CAPTION aMsgs[ 116 ]
         ACTION PrefOk ( cCurrLang )
         FONTNAME "Arial"
         FONTSIZE 9
      END BUTTON

      DEFINE BUTTON Button_2
         ROW 153
         COL 440
         WIDTH 100
         HEIGHT 28
         CAPTION aMsgs[ 117 ]
         ACTION PrefCancel()
         FONTNAME "Arial"
         FONTSIZE 9
      END BUTTON

      DEFINE FRAME Frame_2
         ROW 10
         COL 10
         WIDTH 530
         HEIGHT 110
         FONTNAME "Arial"
         FONTSIZE 9
         CAPTION ''
      END FRAME

      DEFINE FRAME Frame_4
         ROW 140
         COL 10
         WIDTH 305
         HEIGHT 45
         FONTNAME "Arial"
         FONTSIZE 9
         CAPTION ''
      END FRAME

      DEFINE LABEL Label_4
         ROW 158
         COL 28
         WIDTH 140
         HEIGHT 30
         VALUE aMsgs[ 093 ]
         FONTNAME "Arial"
         FONTSIZE 9
      END LABEL

   END WINDOW

   prefm.Combo_1.deleteallitems

   FOR i := 1 TO nlang
      prefm.Combo_1.AddItem ( alang[ i ] )
   NEXT i

   cCurrLang := HMG_LOWER ( AllTrim ( hb_utf8StrTran ( hb_MemoRead (StartUpFolder + cFileLanguage ), Chr(26 ), ' ' ) ) )

   FOR i := 1 TO prefm.Combo_1.itemcount

      IF HMG_LOWER ( AllTrim ( prefm.Combo_1.item( i ) ) ) == cCurrLang

         prefm.Combo_1.VALUE := i

      ENDIF

   NEXT i

   IF IsAppThemed()
      PrefM.Height := ( PrefM.Height ) + 7
   ENDIF

   PrefM.Text_1.VALUE := ProgramEditor

   CENTER WINDOW PrefM
   ACTIVATE WINDOW PrefM

   IF _IsWindowDefined ( DesignForm )
      SelectControl ( SelectedControlName )
      DrawGrid()
   ENDIF

RETURN

STATIC PROCEDURE seteditor

   LOCAL cTemp

   cTemp := GetFile( , , , , .T. )

   IF .NOT. Empty ( cTemp )

      PrefM.text_1.VALUE := cTemp

   ENDIF

RETURN


//----------------------------------
STATIC PROCEDURE PrefOk ( cCurrLang )
//----------------------------------
   ProgramEditor := AllTrim ( PrefM.Text_1.Value )
   Language := AllTrim ( PrefM.Combo_1.DisplayValue )

   SaveString ( Startupfolder + 'editor.ini', ProgramEditor )
   SaveString ( Startupfolder + cFileLanguage, Language )
   DoMethod( 'PrefM', 'Release' )

   IF HMG_UPPER( AllTrim( Language ) ) <> HMG_UPPER( AllTrim( cCurrLang ) )
      // MsgInfo ( aMsgs [047] ,'HMG IDE' )
      WaitWindow ( "Please Wait...", .T. )
      LOAD_LANGUAGE_MESSAGE ()
      Proc_DEFINE_MAIN_MENU ()
      CHANGE_TITLES()
      WaitWindow ()
   ENDIF

RETURN

//----------------------------------
STATIC PROCEDURE PrefCancel
//----------------------------------
   DoMethod ( 'PrefM', 'Release' )

RETURN


*------------------------------------------------------------------------------*
FUNCTION OpenProject
*------------------------------------------------------------------------------*
   LOCAL FileName
   LOCAL Project
   LOCAL Line, LineCount
   LOCAL i
   LOCAL Done
   LOCA cBase

   IF nParameterCount == 0

      FileName := Getfile ( { { 'HMG Projects', '*.hbp' } }, 'Open Project', , .F., .F. )

   ELSE

      FileName := cParameters[ 1 ]

      IF AllTrim ( HMG_LOWER ( hb_URight ( FileName, 4 ) ) ) <> '.hbp'

         FileName := AllTrim ( FileName ) + '.hbp'

      ENDIF

      cBase := hb_ULeft ( FileName, hb_utf8RAt ( '\', FileName ) )

      SetCurrentFolder( cBase )

      nParameterCount := 0

   ENDIF

   IF Empty ( FileName )
      RETURN NIL
   ENDIF

   IF _IsWindowDefined ( DesignForm )
      DoMethod ( DesignForm, 'Release' )
      Properties.TITLE := aMsgs[ 074 ]
      Properties.Grid_1.DeleteAllItems
      Properties.Grid_2.DeleteAllItems
      Properties.Combo_1.DeleteAllItems
      SelectedControlName := ''
      OpenFormName := ''
   ENDIF

   ProjectName := FileName

   Project := hb_MemoRead ( FileName )

   LineCount := MLCount ( Project )

   Project.List_1.DeleteAllItems
   Project.List_2.DeleteAllItems
   Project.List_3.DeleteAllItems
   Project.List_4.DeleteAllItems

   Done := .F.

   FOR i := 1 TO LineCount

      Line := AllTrim ( MemoLine ( Project, 254, i, 4, .T. ) )

      IF .NOT. Empty ( Line )

         IF HMG_UPPER ( hb_URight ( Line, 4 ) ) == '.PRG'

            IF Done == .F.
               Line := Line + ' (Main)'
               Done := .T.
            ENDIF

            Project.List_1.AddItem ( Line )

         ENDIF

      ENDIF

   NEXT i

   refreshproject()

   IF Done == .F.

      MsgStop ( aMsgs[ 226 ], 'Error' )
      ProjectName := ''

   ELSE

      SortModuleList( 1 )

      Project.TITLE := aMsgs[ 200 ] + hb_URight ( ProjectName, HMG_LEN( Projectname ) - hb_utf8RAt ( '\', ProjectName ) ) + ']'

      Form_Main.TITLE := _EAT + IF ( Empty( ProjectName ), "", "[ " + ProjectName + " ]" )

      Form_Main.Button_BuildLog.ENABLED := .T.

      Project.Tab_1.VALUE := 1
      Properties.Tab_1.VALUE := 1

   ENDIF

RETURN Done

*------------------------------------------------------------------------------*
PROCEDURE SaveProject
*------------------------------------------------------------------------------*
   LOCAL Project
   LOCAL i
   LOCAL ITEM

   IF Empty( ProjectName )
      RETURN
   ENDIF

   Project := ''

   FOR i := 1 TO Project.List_1.ItemCount

      ITEM := Project.List_1.Item ( i )

      IF hb_URight ( ITEM, 7 ) == ' (Main)'
         ITEM := hb_ULeft ( ITEM, HMG_LEN ( Item ) - 7 )
         ITEM := AllTrim( Item )
      ENDIF

      Project := Project + ITEM + CRLF

   NEXT i


   SaveString ( ProjectName, Project )

   SaveResources()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE NewProject
*------------------------------------------------------------------------------*

   ProjectName := Putfile ( { { 'HMG Projects', '*.hbp' } }, 'New Project', , .F. )

   IF Empty ( ProjectName )
      RETURN
   ENDIF

   ProjectName := AllTrim ( ProjectName )

   IF HMG_UPPER ( hb_URight ( ProjectName, 4 ) ) == '.HBP'
      Projectname := hb_ULeft ( ProjectName, HMG_LEN( ProjectName ) - 4 )
   ENDIF

   IF hb_UAt ( ' ', ProjectName ) > 0
      MsgStop ( aMsgs[ 222 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF hb_UAt ( '.', ProjectName ) > 0
      MsgStop ( aMsgs[ 222 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF hb_UAt ( ',', ProjectName ) > 0
      MsgStop ( aMsgs[ 222 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF hb_UAt ( '/', ProjectName ) > 0
      MsgStop ( aMsgs[ 222 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF hb_UAt ( '*', ProjectName ) > 0
      MsgStop ( aMsgs[ 222 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF hb_UAt ( '?', ProjectName ) > 0
      MsgStop ( aMsgs[ 222 ], 'HMG IDE' )
      RETURN
   ENDIF


   IF HMG_UPPER ( hb_URight ( ProjectName, 4 ) ) != '.HBP'
      Projectname := ProjectName + '.hbp'
   ENDIF

   IF File ( ProjectName )
      IF MsgYesNo ( Projectname + ' ' + aMsgs[ 227 ] ) == .F.
         RETURN
      ENDIF
   ENDIF

   IF _IsWindowDefined ( DesignForm )
      DoMethod ( DesignForm, 'Release' )
   ENDIF

   Project.List_1.DeleteAllItems
   Project.List_2.DeleteAllItems
   Project.List_3.DeleteAllItems
   Project.config.VALUE := 'inc=yes' + CRLF + 'head=native'
   Project.tables.DeleteAllItems
   Project.Edit_1.VALUE := ''
   Project.Tab_1.VALUE := 1

   Project.TITLE := 'Project Browser [' + hb_URight ( ProjectName, HMG_LEN( Projectname ) - hb_utf8RAt ( '\', ProjectName ) ) + ']'

   Form_Main.TITLE := _EAT + IF ( Empty( ProjectName ), "", "[ " + ProjectName + " ]" )

   Form_Main.Button_BuildLog.ENABLED := .T.

   SaveProject()

   lVirtualForm := .F.
   NewModule( 'Main' )
   NewForm( 'Main' )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE CloseProject
*------------------------------------------------------------------------------*

   IF Empty ( ProjectName )
      RETURN
   ENDIF

   IF msgyesno ( aMsgs[ 099 ], aMsgs[ 003 ] ) == .F.
      RETURN
   ENDIF

   IF _IsWindowDefined ( DesignForm )
      DoMethod ( DesignForm, 'Release' )
   ENDIF

   SaveResources()

   ProjectName := ''
   OpenFormName := ''
   Project.List_1.DeleteAllItems
   Project.List_2.DeleteAllItems
   Project.List_3.DeleteAllItems
   Project.Edit_1.VALUE := ''
   Project.TITLE := aMsgs[ 065 ]
   Project.Tab_1.VALUE := 1
   Properties.Tab_1.VALUE := 1

   Project.config.VALUE := ''

   Project.tables.DeleteAllItems

   Form_Main.TITLE := _EAT + IF ( Empty( ProjectName ), "", "[ " + ProjectName + " ]" )

   Form_Main.Button_BuildLog.ENABLED := .F.

RETURN

*------------------------------------------------------------------------------*
PROCEDURE EditFile
*------------------------------------------------------------------------------*
   LOCAL FileName

   IF Empty ( Projectname )
      RETURN
   ENDIF

   IF Project.tab_1.VALUE == 1

      IF Project.List_1.VALUE == 0
         RETURN
      ENDIF

      FileName := AllTrim( Project.List_1.Item( Project.List_1.Value ) )

      IF hb_URight ( FileName, 7 ) == ' (Main)'
         FileName := hb_ULeft ( FileName, HMG_LEN ( FileName ) - 7 )
      ENDIF

      IF HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.PRG'

         EXECUTE FILE ProgramEditor PARAMETERS FileName

      ENDIF

   ELSEIF Project.tab_1.VALUE == 2


      IF Project.List_2.VALUE == 0
         RETURN
      ENDIF

      FileName := AllTrim( Project.List_2.Item( Project.List_2.Value ) )

      IF AllTrim( HMG_UPPER ( filename ) ) == AllTrim( HMG_UPPER( OpenFormName ) )
         RETURN
      ENDIF

      IF HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.FMG'

         IF _IsWindowDefined ( DesignForm )
            DoMethod ( DesignForm, 'Release' )
         ENDIF

         Properties.TITLE := aMsgs[ 154 ] + FileName + ']'

         _Open ( FileName )

      ENDIF

   ELSEIF Project.tab_1.VALUE == 4

      IF Project.List_3.VALUE == 0
         RETURN
      ENDIF

      FileName := AllTrim( Project.List_3.Item( Project.List_3.Value ) )

      IF HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.RPT'

         EditReport( FileName )

      ENDIF

      IF HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.RMG'

         EditNewReport( FileName )

      ENDIF

   ELSEIF Project.tab_1.VALUE == 6

      IF Project.List_1.VALUE == 0
         RETURN
      ENDIF

      FileName := AllTrim( Project.List_4.Item( Project.List_4.Value ) )

      IF HMG_UPPER ( hb_URight ( FileName, 3 ) ) == '.CH'

         EXECUTE FILE ProgramEditor PARAMETERS FileName

      ENDIF


   ELSEIF Project.tab_1.VALUE == 7

      IF Project.Tables.VALUE == 0
         RETURN
      ENDIF

      FileName := AllTrim( Project.tables.Item( Project.tables.Value ) )

      IF HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.DBF'

         TableView( FileName )

      ENDIF

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE EditReport ( cFileName )
*------------------------------------------------------------------------------*

   IF File ( cFileName )

      DEFINE WINDOW EditReport ;
            AT 0, 0 ;
            WIDTH 470 ;
            HEIGHT 435 + GetTitleHeight() + GetBorderHeight() + GetBorderHeight() ;
            TITLE 'Report Editor [' + cFileName + ']' ;
            MODAL ;
            NOSIZE

         ON KEY ESCAPE ACTION ( ;
            ThisWindow.RELEASE ;
            )

         // Labels Column 1

         DEFINE LABEL Label1
            ROW 10
            COL 15
            WIDTH 90
            VALUE 'Title:'
         END LABEL

         DEFINE LABEL Label2
            ROW 40
            COL 15
            WIDTH 90
            VALUE 'Headers:'
         END LABEL

         DEFINE LABEL Label3
            ROW 70
            COL 15
            WIDTH 90
            VALUE 'Fields:'
         END LABEL

         DEFINE LABEL Label4
            ROW 100
            COL 15
            WIDTH 90
            VALUE 'Widths:'
         END LABEL

         DEFINE LABEL Label5
            ROW 130
            COL 15
            WIDTH 90
            VALUE 'Totals:'
         END LABEL

         DEFINE LABEL Label6
            ROW 160
            COL 15
            WIDTH 90
            VALUE 'N. Formats:'
         END LABEL

         DEFINE LABEL Label7
            ROW 190
            COL 15
            WIDTH 90
            VALUE 'WorkArea:'
         END LABEL

         DEFINE LABEL Label8
            ROW 220
            COL 15
            WIDTH 90
            VALUE 'LPP:'
         END LABEL

         DEFINE LABEL Label9
            ROW 250
            COL 15
            WIDTH 90
            VALUE 'CPL:'
         END LABEL

         DEFINE LABEL Label10
            ROW 280
            COL 15
            WIDTH 90
            VALUE 'L. Margin:'
         END LABEL

         DEFINE LABEL LabelNoFixed
            ROW 310
            COL 15
            WIDTH 80
            VALUE 'NoFixed:'
         END LABEL

         // Labels Column 2

         DEFINE LABEL Label11
            ROW 10
            COL 240
            WIDTH 90
            VALUE 'DOS Mode:'
         END LABEL

         DEFINE LABEL Label12
            ROW 40
            COL 240
            WIDTH 90
            VALUE 'Preview:'
         END LABEL

         DEFINE LABEL Label13
            ROW 70
            COL 240
            WIDTH 90
            VALUE 'Select:'
         END LABEL

         DEFINE LABEL Label14
            ROW 100
            COL 240
            WIDTH 90
            VALUE 'Multiple:'
         END LABEL

         DEFINE LABEL Labe1l5
            ROW 130
            COL 240
            WIDTH 90
            VALUE 'Grouped By:'
         END LABEL

         DEFINE LABEL Label16
            ROW 160
            COL 240
            WIDTH 90
            VALUE 'Group Header:'
         END LABEL

         DEFINE LABEL Label17
            ROW 190
            COL 240
            WIDTH 90
            VALUE 'Landscape:'
         END LABEL

         DEFINE LABEL Label18
            ROW 220
            COL 240
            WIDTH 90
            VALUE 'PaperSize:'
         END LABEL

         DEFINE LABEL Label19
            ROW 250
            COL 240
            WIDTH 90
            VALUE 'Image:'
         END LABEL

         DEFINE LABEL Label20
            ROW 284
            COL 350
            WIDTH 20
            VALUE 'At:'
         END LABEL

         DEFINE LABEL Label21
            ROW 314
            COL 350
            WIDTH 20
            VALUE 'To:'
         END LABEL

         // TextBox Column 1

         DEFINE TEXTBOX Text1
            ROW 10
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text2
            ROW 40
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text3
            ROW 70
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text4
            ROW 100
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text5
            ROW 130
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text6
            ROW 160
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text7
            ROW 190
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text8
            ROW 220
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text9
            ROW 250
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text10
            ROW 280
            COL 100
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE CHECKBOX CheckNoFixed
            ROW 310
            COL 100
            WIDTH 120
            VALUE .F.
         END CHECKBOX

         // TextBox Column 2

         DEFINE CHECKBOX Check11
            ROW 10
            COL 330
            WIDTH 120
         END CHECKBOX

         DEFINE CHECKBOX Check12
            ROW 40
            COL 330
            WIDTH 120
         END CHECKBOX

         DEFINE CHECKBOX Check13
            ROW 70
            COL 330
            WIDTH 120
         END CHECKBOX

         DEFINE CHECKBOX Check14
            ROW 100
            COL 330
            WIDTH 20
         END CHECKBOX

         DEFINE TEXTBOX Text15
            ROW 130
            COL 330
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text16
            ROW 160
            COL 330
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE CHECKBOX Check17
            ROW 190
            COL 330
            WIDTH 120
         END CHECKBOX

         DEFINE TEXTBOX Text18
            ROW 220
            COL 330
            WIDTH 120
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text19
            ROW 250
            COL 330
            WIDTH 120
            VALUE ''
         END TEXTBOX

         // TextBox Extra

         DEFINE TEXTBOX Text20a
            ROW 280
            COL 375
            WIDTH 35
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text20b
            ROW 280
            COL 415
            WIDTH 35
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text21a
            ROW 310
            COL 375
            WIDTH 35
            VALUE ''
         END TEXTBOX

         DEFINE TEXTBOX Text21b
            ROW 310
            COL 415
            WIDTH 35
            VALUE ''
         END TEXTBOX

         // Buttons

         DEFINE BUTTON Preview
            ROW 398
            COL 130
            CAPTION 'Preview'
            ACTION DoReportPreview ( cFileName, EditReport.Text7.Value )
         END BUTTON

         DEFINE BUTTON Ok
            ROW 398
            COL 240
            CAPTION 'Ok'
            ACTION ( SaveReport ( cFileName ), ThisWindow.Release )
         END BUTTON

         DEFINE BUTTON Cancel
            ROW 398
            COL 350
            CAPTION 'Cancel'
            ACTION ThisWIndow.RELEASE
         END BUTTON

      END WINDOW

      ReadReport ( cFileName )

      EditReport.CENTER

      EditReport.ACTIVATE

   ELSE

      MsgStop ( "Report File Not Found!", "HMG IDE" )

   ENDIF

   IF _IsWIndowDefined ( DesignForm )

      DoMethod ( DesignForm, 'SetFocus' )

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE DoReportPreview ( cReport, cWorkArea )
*------------------------------------------------------------------------------*
   LOCAL cFile
   LOCAL lBack

   cFile := HMG_LOWER ( AllTrim ( cWorkArea ) ) + '.dbf'

   IF .NOT. File ( cFile )
      MsgStop ( cFile + " Not Available. Can't Preview", "HMG IDE" )
      RETURN
   ENDIF

   IF .NOT. Empty ( cWorkArea )

      IF hb_URight ( AllTrim ( HMG_UPPER ( cReport ) ), 4 ) == '.RPT'
         cReport := hb_ULeft ( cReport, HMG_LEN( cReport ) - 4 )
      ENDIF

      cWorkArea := AllTrim( cWorkArea )

      USE ( cWorkArea )

      lBack := EditReport.Check12.VALUE

      EditReport.Check12.VALUE := .T.

      SaveReport ( cReport + '.rpt' )

      extreport ( cReport )

      USE

      EditReport.Check12.VALUE := lBack

      SaveReport ( cReport + '.rpt' )

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE ReadReport ( cFileName )
*------------------------------------------------------------------------------*
   LOCAL cReport
   LOCAL i
   LOCAL Line
   LOCAL x
   LOCAL aTemp
   LOCAL c
   LOCAL s
   LOCAL nStart

   // Clean

   EditReport.Text1.VALUE := ''
   EditReport.Text2.VALUE := ''
   EditReport.Text3.VALUE := ''
   EditReport.Text4.VALUE := ''
   EditReport.Text5.VALUE := ''
   EditReport.Text6.VALUE := ''
   EditReport.Text7.VALUE := ''
   EditReport.Text8.VALUE := ''
   EditReport.Text9.VALUE := ''
   EditReport.Text10.VALUE := ''
   EditReport.CheckNoFixed.VALUE := .F.
   EditReport.Check11.VALUE := .F.
   EditReport.Check12.VALUE := .F.
   EditReport.Check13.VALUE := .F.
   EditReport.Check14.VALUE := .F.
   EditReport.Text15.VALUE := ''
   EditReport.Text16.VALUE := ''
   EditReport.Check17.VALUE := .F.
   EditReport.Text18.VALUE := ''
   EditReport.Text19.VALUE := ''
   EditReport.Text20a.VALUE := ''
   EditReport.Text20b.VALUE := ''
   EditReport.Text21a.VALUE := ''
   EditReport.Text21b.VALUE := ''

   cReport := hb_MemoRead ( cFileName )

   FOR i := 1 TO HMG_LEN ( cReport )

      Line := AllTrim ( MemoLine ( cReport, 1024, i, 4, .T. ) )

      IF HMG_UPPER( Line ) = 'TITLE '
         EditReport.Text1.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 6 ) )

      ELSEIF HMG_UPPER( Line ) = 'HEADERS '
         EditReport.Text2.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 8 ) )

      ELSEIF HMG_UPPER( Line ) = 'FIELDS '
         EditReport.Text3.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 7 ) )

      ELSEIF HMG_UPPER( Line ) = 'WIDTHS '
         EditReport.Text4.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 7 ) )

      ELSEIF HMG_UPPER( Line ) = 'TOTALS '
         EditReport.Text5.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 7 ) )

      ELSEIF HMG_UPPER( Line ) = 'NFORMATS '
         EditReport.Text6.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 9 ) )

      ELSEIF HMG_UPPER( Line ) = 'WORKAREA '
         EditReport.Text7.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 9 ) )

      ELSEIF HMG_UPPER( Line ) = 'LPP '
         EditReport.Text8.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 4 ) )

      ELSEIF HMG_UPPER( Line ) = 'CPL '
         EditReport.Text9.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 4 ) )

      ELSEIF HMG_UPPER( Line ) = 'LMARGIN '
         EditReport.Text10.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 8 ) )

      ELSEIF HMG_UPPER( Line ) = 'NOFIXED'
         EditReport.CheckNoFixed.VALUE := .T.

      ELSEIF HMG_UPPER( Line ) = 'DOSMODE'
         EditReport.Check11.VALUE := .T.

      ELSEIF HMG_UPPER( Line ) = 'PREVIEW'
         EditReport.Check12.VALUE := .T.

      ELSEIF HMG_UPPER( Line ) = 'SELECT'
         EditReport.Check13.VALUE := .T.

      ELSEIF HMG_UPPER( Line ) = 'MULTIPLE'
         EditReport.Check14.VALUE := .T.

      ELSEIF HMG_UPPER( Line ) = 'GROUPED BY '
         EditReport.Text15.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 11 ) )

      ELSEIF HMG_UPPER( Line ) = 'HEADRGRP '
         EditReport.Text16.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 9 ) )

      ELSEIF HMG_UPPER( Line ) = 'LANDSCAPE'
         EditReport.Check17.VALUE := .T.

      ELSEIF HMG_UPPER( Line ) = 'PAPERSIZE '
         EditReport.Text18.VALUE := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 10 ) )

      ELSEIF HMG_UPPER( Line ) = 'IMAGE '

         aTemp := {}
         s := ''
         nStart := hb_UAt ( '{', Line ) + 1

         FOR x := nStart TO HMG_LEN ( Line )
            c := hb_USubStr ( Line, x, 1 )
            IF c == ',' .OR. c == '}'
               AAdd ( aTemp, AllTrim( s ) )
               s := ''
            ELSE
               s := s + c
            ENDIF
         NEXT x

         IF HMG_LEN ( aTemp ) == 5
            EditReport.Text19.VALUE := aTemp[ 1 ]
            EditReport.Text20a.VALUE := aTemp[ 2 ]
            EditReport.Text20b.VALUE := aTemp[ 3 ]
            EditReport.Text21a.VALUE := aTemp[ 4 ]
            EditReport.Text21b.VALUE := aTemp[ 5 ]
         ENDIF

      ENDIF

   NEXT i

RETURN

*------------------------------------------------------------------------------*
PROCEDURE SaveReport ( cFileName )
*------------------------------------------------------------------------------*
   LOCAL cReport := ''

   cReport := 'DEFINE REPORT TEMPLATE' + CRLF

   IF .NOT. Empty ( EditReport.Text1.Value )
      cReport += Space( 4 ) + 'TITLE ' + AllTrim ( EditReport.Text1.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text2.Value )
      cReport += Space( 4 ) + 'HEADERS ' + AllTrim ( EditReport.Text2.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text3.Value )
      cReport += Space( 4 ) + 'FIELDS ' + AllTrim ( EditReport.Text3.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text4.Value )
      cReport += Space( 4 ) + 'WIDTHS ' + AllTrim ( EditReport.Text4.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text5.Value )
      cReport += Space( 4 ) + 'TOTALS ' + AllTrim ( EditReport.Text5.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text6.Value )
      cReport += Space( 4 ) + 'NFORMATS ' + AllTrim ( EditReport.Text6.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text7.Value )
      cReport += Space( 4 ) + 'WORKAREA ' + AllTrim ( EditReport.Text7.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text8.Value )
      cReport += Space( 4 ) + 'LPP ' + AllTrim ( EditReport.Text8.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text9.Value )
      cReport += Space( 4 ) + 'CPL ' + AllTrim ( EditReport.Text9.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text10.Value )
      cReport += Space( 4 ) + 'LMARGIN ' + AllTrim ( EditReport.Text10.Value ) + CRLF
   ENDIF

   IF EditReport.CheckNoFixed.VALUE == .T.
      cReport += Space( 4 ) + 'NOFIXED' + CRLF
   ENDIF

   IF EditReport.Check11.VALUE == .T.
      cReport += Space( 4 ) + 'DOSMODE' + CRLF
   ENDIF

   IF EditReport.Check12.VALUE == .T.
      cReport += Space( 4 ) + 'PREVIEW' + CRLF
   ENDIF

   IF EditReport.Check13.VALUE == .T.
      cReport += Space( 4 ) + 'SELECT' + CRLF
   ENDIF

   IF EditReport.Check14.VALUE == .T.
      cReport += Space( 4 ) + 'MULTIPLE' + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text15.Value )
      cReport += Space( 4 ) + 'GROUPED BY ' + AllTrim ( EditReport.Text15.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text16.Value )
      cReport += Space( 4 ) + 'HEADRGRP ' + AllTrim ( EditReport.Text16.Value ) + CRLF
   ENDIF

   IF EditReport.Check17.VALUE == .T.
      cReport += Space( 4 ) + 'LANDSCAPE' + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text18.Value )
      cReport += Space( 4 ) + 'PAPERSIZE ' + AllTrim ( EditReport.Text18.Value ) + CRLF
   ENDIF

   IF .NOT. Empty ( EditReport.Text19.Value )
      cReport += Space( 4 ) + 'IMAGE ' + '{ ' + AllTrim ( EditReport.Text19.Value ) + ' , '
      cReport += AllTrim ( EditReport.Text20a.Value ) + ' , ' + AllTrim ( EditReport.Text20b.Value ) + ' , '
      cReport += AllTrim ( EditReport.Text21a.Value ) + ' , ' + AllTrim ( EditReport.Text21b.Value ) + ' } ' + CRLF
   ENDIF

   cReport := cReport + 'END REPORT' + CRLF

   SaveString ( cFileName, cReport )

RETURN

*------------------------------------------------------------------------------*
FUNCTION NewForm ( cNewForm )
*------------------------------------------------------------------------------*
   LOCAL Result
   LOCAL i
   LOCAL cFormContent
   LOCAL lRetVal := .T.


   InitControlCounters()

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN NIL
   ENDIF

   _HMG_DialogCancelled := .F.

   IF ValType ( cNewForm ) = 'U'

      Result := AllTrim ( InputBox ( aMsgs[ 152 ], aMsgs[ 153 ], '' ) )

   ELSE

      Result := cNewForm

   ENDIF

   IF _HMG_DialogCancelled == .T.
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN NIL
   ENDIF

   IF Empty ( Result )
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN NIL
   ENDIF

   Result := AllTrim ( Result )

   IF HMG_UPPER ( hb_URight ( Result, 4 ) ) != '.FMG'
      Result := Result + '.Fmg'
   ENDIF

   FOR i := 1 TO Project.List_2.ItemCount
      IF AllTrim( HMG_UPPER( Project.List_2.Item( i ) ) ) == AllTrim( HMG_UPPER( result ) )
         MsgStop( aMsgs[ 157 ], 'HMG IDE' )
         RETURN NIL
      ENDIF
   NEXT i


   IF ValType ( cNewForm ) = 'U'

      cFormContent := ''
      cFormContent += 'DEFINE WINDOW TEMPLATE AT 132 , 235 WIDTH 550 HEIGHT 350 VIRTUAL WIDTH Nil VIRTUAL HEIGHT Nil TITLE "" ICON NIL  CURSOR NIL ON INIT Nil ON RELEASE Nil ON INTERACTIVECLOSE Nil ON MOUSECLICK Nil ON MOUSEDRAG Nil ON MOUSEMOVE Nil ON SIZE Nil ON MAXIMIZE Nil ON MINIMIZE Nil ON PAINT Nil BACKCOLOR Nil NOTIFYICON NIL NOTIFYTOOLTIP NIL ON NOTIFYCLICK Nil ON GOTFOCUS Nil ON LOSTFOCUS Nil ON SCROLLUP Nil ON SCROLLDOWN Nil ON SCROLLLEFT Nil ON SCROLLRIGHT Nil ON HSCROLLBOX Nil ON VSCROLLBOX Nil'
      cFormContent += CRLF
      cFormContent += 'END WINDOW'
      cFormContent += CRLF

      IF File ( Result )

         IF MsgYesNo ( Result + ' ' + aMsgs[ 227 ] )
            SaveString ( Result, cFormContent )
         ELSE
            RETURN ( .F. )
         ENDIF

      ELSE

         SaveString ( Result, cFormContent )

      ENDIF

   ELSE

      cFormContent := ''
      cFormContent += 'DEFINE WINDOW TEMPLATE AT 138 , 235 WIDTH 550 HEIGHT 350 VIRTUAL WIDTH Nil VIRTUAL HEIGHT Nil TITLE "" ICON NIL MAIN CURSOR NIL ON INIT Nil ON RELEASE Nil ON INTERACTIVECLOSE Nil ON MOUSECLICK Nil ON MOUSEDRAG Nil ON MOUSEMOVE Nil ON SIZE Nil ON MAXIMIZE Nil ON MINIMIZE Nil ON PAINT Nil BACKCOLOR Nil NOTIFYICON NIL NOTIFYTOOLTIP NIL ON NOTIFYCLICK Nil ON GOTFOCUS Nil ON LOSTFOCUS Nil ON SCROLLUP Nil ON SCROLLDOWN Nil ON SCROLLLEFT Nil ON SCROLLRIGHT Nil ON HSCROLLBOX Nil ON VSCROLLBOX Nil'
      cFormContent += CRLF
      cFormContent += 'END WINDOW'
      cFormContent += CRLF

      IF File ( Result )

         IF MsgYesNo ( Result + ' ' + aMsgs[ 227 ] )

            SaveString ( Result, cFormContent )

         ELSE

            RETURN ( .F. )

         ENDIF

      ELSE

         SaveString ( Result, cFormContent )

      ENDIF

   ENDIF

   Project.List_2.AddItem ( Result )

   SortFormList()

   SaveProject()

   Project.Tab_1.VALUE := 2

   Properties.TITLE := aMsgs[ 154 ] + Result + ']'

   IF _IsWindowDefined ( DesignForm )
      DoMethod ( DesignForm, 'Release' )
   ENDIF


   _Open ( Result )

RETURN lRetVal

*------------------------------------------------------------------------------*
PROCEDURE NewModule ( cNewModule )
*------------------------------------------------------------------------------*
   LOCAL Result
   LOCAL i
   LOCAL cProgram

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF ValType ( cNewModule ) = 'U'

      Result := AllTrim ( InputBox ( aMsgs[ 152 ], aMsgs[ 155 ], '' ) )

      cProgram := '#include <hmg.ch>' + CRLF

   ELSE

      Result := cNewModule

      cProgram := '#include <hmg.ch>' + CRLF + CRLF + 'Function Main' + CRLF + CRLF + Space( 8 ) + 'Load Window Main' + CRLF + Space( 8 ) + 'Main.Center' + CRLF + Space( 8 ) + 'Main.Activate' + CRLF + CRLF + 'Return' + CRLF

   ENDIF

   IF _HMG_DialogCancelled == .T.
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN
   ENDIF

   IF Empty ( Result )
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN
   ENDIF

   Result := AllTrim ( Result )

   IF HMG_UPPER ( hb_URight ( Result, 4 ) ) != '.PRG'
      Result := Result + '.Prg'
   ENDIF

   FOR i := 1 TO Project.List_1.ItemCount
      IF AllTrim( HMG_UPPER( Project.List_1.Item( i ) ) ) == AllTrim( HMG_UPPER( result ) )
         MsgStop( aMsgs[ 156 ], 'HMG IDE' )
         RETURN
      ENDIF
   NEXT i

   IF File ( Result )

      IF MsgYesNo ( Result + ' ' + aMsgs[ 227 ] )

         SaveString ( Result, cProgram )

      ELSE

         RETURN

      ENDIF

   ELSE

      SaveString ( Result, cProgram )

   ENDIF

   Project.List_1.AddItem ( Result )

   IF Project.List_1.ItemCount == 1
      Project.List_1.Item( 1 ) := Project.List_1.Item( 1 ) + ' (Main)'
   ELSE
      SortModuleList()
   ENDIF

   EXECUTE FILE ProgramEditor PARAMETERS Result

   SaveProject()

   Project.Tab_1.VALUE := 1

   IF _IsWindowDefined ( DesignForm )
      SelectControl ( SelectedControlName )
      DrawGrid()
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE NewReport
*------------------------------------------------------------------------------*
   LOCAL Result
   LOCAL i
   LOCAL lFound

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF _ReportBuilderActive == .T.
      MsgStop ( 'Report Builder already active!', 'HMG IDE' )
      RETURN
   ENDIF

   Result := AllTrim ( InputBox ( aMsgs[ 152 ], aMsgs[ 158 ], '' ) )

   IF Empty ( Result )
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN
   ENDIF

   Result := AllTrim ( Result )

   IF _REPORTTYPE == 'OLD'

      IF HMG_UPPER ( hb_URight ( Result, 4 ) ) != '.RPT'
         Result := Result + '.rpt'
      ENDIF

   ELSEIF _REPORTTYPE == 'NEW'

      IF HMG_UPPER ( hb_URight ( Result, 4 ) ) != '.RMG'
         Result := Result + '.rmg'
      ENDIF

   ENDIF

   lFound := .F.

   FOR i := 1 TO Project.List_3.ItemCount

      IF Project.List_3.Item( i ) == Result
         lFound := .T.
         EXIT
      ENDIF

   NEXT i

   IF lFound == .F.

      Project.List_3.AddItem ( Result )

   ELSE

      If ! MsgYesNo( Result + ' already exists. Overwrite it ?' )
         RETURN
      ENDIF

   ENDIF

   IF _REPORTTYPE == 'OLD'

      SaveString ( Result, 'DEFINE REPORT TEMPLATE' + CRLF + 'END REPORT' )

   ELSEIF _REPORTTYPE == 'NEW'

      SaveString ( Result, 'DEFINE REPORT TEMPLATE' + CRLF + 'END REPORT' )

   ENDIF

   Project.Tab_1.VALUE := 4
   Project.List_3.VALUE := Project.List_3.ItemCount

   IF _REPORTTYPE == 'OLD'

      EditReport ( Result )

   ELSEIF _REPORTTYPE == 'NEW'

      EditNewReport ( Result )

   ENDIF

   IF _IsWindowDefined ( DesignForm )
      SelectControl ( SelectedControlName )
      DrawGrid()
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE AddForm
*------------------------------------------------------------------------------*
   LOCAL Result, ProjectFolder // , FileFolder
   LOCAL FileName

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   Result := Getfile ( { { 'HMG Forms', '*.fmg' } }, aMsgs[ 159 ], , .F., .T. )

   IF Empty ( Result )
      RETURN
   ENDIF

   Result := AllTrim ( Result )

   ProjectFolder := HMG_UPPER ( AllTrim ( hb_ULeft ( Projectname, hb_utf8RAt ('\', ProjectName ) ) ) )
   // FileFolder := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Result , HB_UTF8RAT ('\' ,Result ) ) ) )

   FileName := AllTrim( hb_USubStr ( Result, hb_utf8RAt ( '\', Result ) + 1, 255 ) )

   MsgInfo( ProjectFolder + FileName )

   COPY FILE ( Result ) TO ( ProjectFolder + FileName )

   refreshproject()

   Project.Tab_1.VALUE := 2

RETURN


// #define _ALLOW_DELETE_FILE_

*------------------------------------------------------------------------------*
PROCEDURE ExcludeFile
*------------------------------------------------------------------------------*
   LOCAL i

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Project.tab_1.VALUE == 1

      i := Project.List_1.VALUE

      IF i == 0
         RETURN
      ENDIF

      IF MsgYesNo ( aMsgs[ 099 ], aMsgs[ 167 ] + ' ' + AllTrim( Project.List_1.Item ( i ) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
         IF hb_URight ( , 7 ) == ' (Main)'
            DELETE FILE ( hb_ULeft ( AllTrim( Project.List_1.Item (i ) ), HMG_LEN( AllTrim( Project.List_1.Item (i ) ) ) - 7 ) )
         ELSE
            DELETE FILE ( AllTrim( Project.List_1.Item ( i ) ) )
         ENDIF
#endif
         Project.List_1.DeleteItem ( i )
         SaveProject()

         IF Project.List_1.ItemCount > 0 ;
               .AND. ;
               i == 1
            Project.List_1.Item ( 1 ) := Project.List_1.Item ( 1 ) + ' (Main)'
         ENDIF

         Project.List_1.VALUE := 1

      ENDIF

   ELSEIF Project.tab_1.VALUE == 2

      i := Project.List_2.VALUE

      IF i == 0
         RETURN
      ENDIF

      IF MsgYesNo ( aMsgs[ 168 ], aMsgs[ 167 ] + ' ' + AllTrim( Project.List_2.Item ( i ) ) ) == .T.

         IF IsWindowDefined( &DesignForm ) ;
               .AND. ;
               HMG_UPPER( AllTrim( OpenFormName ) ) == HMG_UPPER( AllTrim( Project.List_2.Item ( i ) ) )

            DoMethod ( DesignForm, 'Release' )
         ENDIF

#ifdef _ALLOW_DELETE_FILE_
         DELETE FILE ( AllTrim( Project.List_2.Item ( i ) ) )
#endif
         Project.List_2.DeleteItem ( i )

      ENDIF

   ELSEIF Project.tab_1.VALUE == 4

      i := Project.List_3.VALUE

      IF i == 0
         RETURN
      ENDIF

      IF MsgYesNo ( aMsgs[ 168 ], aMsgs[ 167 ] + ' ' + AllTrim( Project.List_3.Item ( i ) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
         DELETE FILE ( AllTrim( Project.List_3.Item ( i ) ) )
#endif
         refreshproject()

      ENDIF

   ELSEIF Project.tab_1.VALUE == 6

      i := Project.List_4.VALUE

      IF i == 0
         RETURN
      ENDIF

      IF MsgYesNo ( aMsgs[ 168 ], aMsgs[ 167 ] + ' ' + AllTrim( Project.List_4.Item ( i ) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
         DELETE FILE ( AllTrim( Project.List_4.Item ( i ) ) )
#endif
         Project.List_4.DeleteItem ( i )

      ENDIF

   ELSEIF Project.tab_1.VALUE == 7

      i := Project.tables.VALUE

      IF i == 0
         RETURN
      ENDIF

      IF MsgYesNo ( aMsgs[ 168 ], aMsgs[ 167 ] + ' ' + AllTrim( Project.tables.Item ( i ) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
         DELETE FILE ( AllTrim( Project.tables.Item ( i ) ) )
#endif
         Project.tables.DeleteItem ( i )

      ENDIF

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE SetMain
*------------------------------------------------------------------------------*
   LOCAL i, SelectedItem, FirstItem

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   i := Project.List_1.VALUE

   IF i == 0
      RETURN
   ENDIF

   FirstItem := AllTrim ( Project.List_1.Item ( 1 ) )

   SelectedItem := AllTrim ( Project.List_1.Item ( i ) )

   IF hb_URight ( SelectedItem, 7 ) == ' (Main)'
      RETURN
   ENDIF

   IF hb_URight ( FirstItem, 7 ) == ' (Main)'
      FirstItem := hb_ULeft ( FirstItem, HMG_LEN ( FirstItem ) - 7 )
   ENDIF

   Project.List_1.Item ( 1 ) := SelectedItem + ' (Main)'

   Project.List_1.Item ( i ) := FirstItem

   SaveProject()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE refreshproject
*------------------------------------------------------------------------------*
   LOCAL PROJECTFOLDER := HMG_UPPER ( AllTrim ( hb_ULeft ( Projectname, hb_utf8RAt ('\', ProjectName ) - 1 ) ) )

   LOCAL aFiles1 := {}
   LOCAL aFiles2 := {}
   LOCAL aForms := {}
   LOCAL nForms
   LOCAL aIncludes := {}
   LOCAL nIncludes
   LOCAL aTables := {}
   LOCAL nTables
   LOCAL xName
   LOCAL i, cData

   IF Empty ( Projectname )
      RETURN
   ENDIF

   IF Project.List_1.ItemCount == 0
      RETURN
   ENDIF

   IF hb_URight ( projectfolder, 1 ) != '\'
      projectfolder += '\'
   ENDIF

   // Reports *************************************************************

   ASize ( aFiles1, ADir ( PROJECTFOLDER + "*.RPT" ) )

   ADir ( PROJECTFOLDER + "*.RPT", aFiles1 )

   ASize ( aFiles2, ADir ( PROJECTFOLDER + "*.RMG" ) )

   ADir ( PROJECTFOLDER + "*.RMG", aFiles2 )

   Project.List_3.DeleteAllItems

   FOR i := 1 TO HMG_LEN ( aFiles1 )

      Project.List_3.AddItem ( aFiles1[ i ] )

   NEXT i

   FOR i := 1 TO HMG_LEN ( aFiles2 )

      Project.List_3.AddItem ( aFiles2[ i ] )

   NEXT i

   Project.List_3.VALUE := 1
   Project.List_2.VALUE := 1
   Project.List_4.VALUE := 1

   // Forms ***************************************************************

   Project.List_2.DeleteAllItems

   nForms := ADir( "*.fmg" )
   ASize ( aForms, nForms )
   ADir( "*.fmg", aForms )

   aForms := ASort ( aForms )

   FOR i := 1 TO nForms
      Project.List_2.AddItem ( aForms[ i ] )
   NEXT i

   // Includes ************************************************************

   Project.List_4.DeleteAllItems

   nIncludes := ADir( "*.ch" )
   ASize ( aIncludes, nIncludes )
   ADir( "*.ch", aIncludes )
   aIncludes := ASort( aIncludes )

   FOR i := 1 TO nIncludes
      Project.List_4.AddItem ( aIncludes[ i ] )
   NEXT i

   // Tables **************************************************************

   Project.tables.DeleteAllItems

   nTables := ADir( "*.dbf" )
   ASize ( aTables, nTables )
   ADir( "*.dbf", aTables )
   aTables := ASort( aTables )

   FOR i := 1 TO nTables
      Project.tables.AddItem ( aTables[ i ] )
   NEXT i

   // Resources ***********************************************************

   xName := hb_URight ( ProjectName, HMG_LEN( Projectname ) - hb_utf8RAt ( '\', ProjectName ) )
   xName := hb_ULeft ( xName, HMG_LEN( xName ) - 4 ) + '.rc'

   IF .NOT. Empty( xName )
      IF File ( xName )
         Project.Edit_1.VALUE := hb_MemoRead ( xName )
      ELSE
         Project.Edit_1.VALUE := ''
      ENDIF
   ENDIF

   // Config **************************************************************

   xName := hb_URight ( ProjectName, HMG_LEN( ProjectName ) - hb_utf8RAt ( '\', ProjectName ) )
   xName := hb_ULeft ( xName, HMG_LEN( xName ) - 4 ) + '.hbc'

   Project.config.VALUE := ''

   IF .NOT. Empty( xName )
      IF File ( xName )
         cData := hb_MemoRead ( xName )
         project.config.VALUE := cData
      ENDIF
   ENDIF

   // msgdebug (ProjectName,xName,cData)

RETURN

*------------------------------------------------------------------------------*
PROCEDURE RunApplication
*------------------------------------------------------------------------------*

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF Project.List_1.ItemCount == 0
      RETURN
   ENDIF

   DebuggerSupport := .F.
   BuildProjectM()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE DrawSelectedControlFrame()
*------------------------------------------------------------------------------*
   LOCAL x, ROW, COL, WIDTH, HEIGHT
   LOCAL vdr, vdc

   IF .NOT. Empty( SelectedControlName )

      x := GetControlIndex ( SelectedControlName, DesignForm )

      IF x > 0

         IF lVirtualForm
            VDC := GetScrollPos ( DesignFormhandle, SB_HORZ )
            VDR := GetScrollPos ( DesignFormhandle, SB_VERT )
         ELSE
            VDC := 0
            VDR := 0
         ENDIF

         ROW := _HMG_aControlRow[ x ]
         COL := _HMG_aControlCol[ x ]
         WIDTH := _HMG_aControlWidth[ x ]
         HEIGHT := _HMG_aControlHeight[ x ]

         rectdraw( DesignFormhandle, ROW - 6 - VDR, COL - 6 - VDC, ROW - 1 - VDR, COL - 1 - VDC, BLACK, 4, WHITE, .T. )

         linedraw( DesignFormhandle, ROW - 3 - VDR, COL - 3 - VDC, ROW - 3 - VDR, COL - 3 - VDC, BLACK, 6 )
         linedraw( DesignFormhandle, ROW + HEIGHT + 3 - VDR, COL - 3 - VDC, ROW + HEIGHT + 3 - VDR, COL - 3 - VDC, BLACK, 6 )
         linedraw( DesignFormhandle, ROW - 3 - VDR, COL + WIDTH + 3 - VDC, ROW - 3 - VDR, COL + WIDTH + 3 - VDC, BLACK, 6 )
         linedraw( DesignFormhandle, ROW - 3 - VDR, COL + ( Width / 2 ) - VDC, ROW - 3 - VDR, COL + ( Width / 2 ) - VDC, BLACK, 6 )
         linedraw( DesignFormhandle, ROW + HEIGHT + 3 - VDR, COL + ( Width / 2 ) - VDC, ROW + HEIGHT + 3 - VDR, COL + ( Width / 2 ) - VDC, BLACK, 6 )
         linedraw( DesignFormhandle, ROW + ( Height / 2 ) - VDR, COL - 3 - VDC, ROW + ( Height / 2 ) - VDR, COL - 3 - VDC, BLACK, 6 )
         linedraw( DesignFormhandle, ROW + ( Height / 2 ) - VDR, COL + WIDTH + 3 - VDC, ROW + ( Height / 2 ) - VDR, COL + WIDTH + 3 - VDC, BLACK, 6 )
         linedraw( DesignFormhandle, ROW + HEIGHT + 4 - VDR, COL + WIDTH - 4 - VDC, ROW + HEIGHT + 4 - VDR, COL + WIDTH + 4 - VDC, BLACK, 3 )
         linedraw( DesignFormhandle, ROW + HEIGHT - 4 - VDR, COL + WIDTH + 4 - VDC, ROW + HEIGHT + 4 - VDR, COL + WIDTH + 4 - VDC, BLACK, 3 )

         DrawGrid()

      ENDIF

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE ViewCode
*------------------------------------------------------------------------------*
   LOCAL Code

   if ! IsWindowDefined( &DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   Code := Save ( .T. )

   DEFINE WINDOW ViewCode ;
         AT 0, 0 ;
         WIDTH 800 ;
         HEIGHT 600 ;
         TITLE 'Form Code' ;
         MODAL ;
         NOSIZE

      DEFINE EDITBOX edit_1
         ROW 0
         COL 0
         WIDTH 795
         HEIGHT 600 - GetTitleHeight() - GetBorderHeight() - 2
         VALUE Code
         FONTNAME 'Courier New'
         FONTSIZE 12
         READONLY .T.
      END EDITBOX

   END WINDOW

   ViewCode.CENTER
   ACTIVATE WINDOW ViewCode

   DoMethod ( DesignForm, 'SetFocus' )
   DrawGrid()

RETURN

*------------------------------------------------------------------------------*
FUNCTION PickPropertyValue ( TITLE, Legend, OPTIONS, CurrentValue )
*------------------------------------------------------------------------------*
   LOCAL RetVal
   LOCAL i
   LOCAL InitValue := 0

   FOR i := 1 TO HMG_LEN ( Options )
      IF AllTrim ( HMG_UPPER ( OPTIONS[ i ] ) ) ;
            == ;
            AllTrim ( HMG_UPPER ( CurrentValue ) ) ;

            InitValue := i
         EXIT

      ENDIF
   NEXT i

   DEFINE WINDOW PickPropertyValue ;
         AT 0, 0 ;
         WIDTH 300 ;
         HEIGHT GetTitleHeight() + 115 + 2 ;
         TITLE TITLE ;
         MODAL ;
         NOSIZE ;
         NoSysMenu

      ON KEY RETURN ACTION ( ;
         RetVal := PickPropertyValue.PickValue.Item( PickPropertyValue.PickValue.Value ), ;
         _HMG_DialogCancelled := .F., ;
         PickPropertyValue.RELEASE ;
         )

      ON KEY ESCAPE ACTION ( ;
         RetVal := '', ;
         _HMG_DialogCancelled := .T., ;
         PickPropertyValue.RELEASE ;
         )

      DEFINE LABEL Legend
         ROW 10
         COL 10
         VALUE Legend
      END LABEL

      DEFINE COMBOBOX PickValue
         ROW 35
         COL 10
         WIDTH 270
         HEIGHT 120
         ITEMS OPTIONS
         VALUE InitValue
      END COMBOBOX

      DEFINE BUTTON Ok
         ROW 70
         COL 70
         CAPTION aMsgs[ 116 ]
         ACTION ( ;
            RetVal := PickPropertyValue.PickValue.Item( PickPropertyValue.PickValue.Value ), ;
            _HMG_DialogCancelled := .F., ;
            PickPropertyValue.RELEASE ;
            )
      END BUTTON

      DEFINE BUTTON Cancel
         ROW 70
         COL 180
         CAPTION aMsgs[ 117 ]
         ACTION ( ;
            RetVal := '', ;
            _HMG_DialogCancelled := .T., ;
            PickPropertyValue.RELEASE ;
            )
      END BUTTON

   END WINDOW

   PickPropertyValue.CENTER
   PickPropertyValue.ACTIVATE

RETURN RetVal

*------------------------------------------------------------------------------*
FUNCTION PickNumericPropertyValue ( TITLE, Legend, CurrentValue )
*------------------------------------------------------------------------------*
   LOCAL RetVal

   DEFINE WINDOW PickPropertyValue ;
         AT 0, 0 ;
         WIDTH 300 ;
         HEIGHT GetTitleHeight() + 115 + 2 ;
         TITLE TITLE ;
         MODAL ;
         NOSIZE ;
         NoSysMenu

      ON KEY RETURN ACTION ( ;
         RetVal := AllTrim( Str( PickPropertyValue.PickValue.Value ) ), ;
         _HMG_DialogCancelled := .F., ;
         PickPropertyValue.RELEASE ;
         )

      ON KEY ESCAPE ACTION ( ;
         RetVal := '', ;
         _HMG_DialogCancelled := .T., ;
         PickPropertyValue.RELEASE ;
         )

      DEFINE LABEL Legend
         ROW 10
         COL 10
         VALUE Legend
      END LABEL

      DEFINE SPINNER PickValue
         ROW 35
         COL 10
         WIDTH 270
         RANGEMIN 0
         RANGEMAX 0x7FFFFFFF
         VALUE Val ( CurrentValue )
      END SPINNER

      DEFINE BUTTON Ok
         ROW 70
         COL 70
         CAPTION aMsgs[ 116 ]
         ACTION ( ;
            RetVal := AllTrim( Str( PickPropertyValue.PickValue.Value ) ), ;
            _HMG_DialogCancelled := .F., ;
            PickPropertyValue.RELEASE ;
            )
      END BUTTON

      DEFINE BUTTON Cancel
         ROW 70
         COL 180
         CAPTION aMsgs[ 117 ]
         ACTION ( ;
            RetVal := '', ;
            _HMG_DialogCancelled := .T., ;
            PickPropertyValue.RELEASE ;
            )
      END BUTTON

   END WINDOW

   PickPropertyValue.Cancel.SetFocus
   InsertTab()

   PickPropertyValue.CENTER
   PickPropertyValue.ACTIVATE

RETURN RetVal

*------------------------------------------------------------------------------*
FUNCTION PickCharacterPropertyValue ( TITLE, Legend, CurrentValue )
*------------------------------------------------------------------------------*
   LOCAL RetVal

   DEFINE WINDOW PickPropertyValue ;
         AT 0, 0 ;
         WIDTH 300 ;
         HEIGHT GetTitleHeight() + 115 + 2 ;
         TITLE TITLE ;
         MODAL ;
         NOSIZE ;
         NoSysMenu

      ON KEY RETURN ACTION ( ;
         RetVal := AllTrim( PickPropertyValue.PickValue.Value ), ;
         _HMG_DialogCancelled := .F., ;
         PickPropertyValue.RELEASE ;
         )

      ON KEY ESCAPE ACTION ( ;
         RetVal := '', ;
         _HMG_DialogCancelled := .T., ;
         PickPropertyValue.RELEASE ;
         )

      DEFINE LABEL Legend
         ROW 10
         COL 10
         VALUE Legend
      END LABEL

      DEFINE TEXTBOX PickValue
         ROW 35
         COL 10
         WIDTH 270
         VALUE CurrentValue
      END TEXTBOX

      DEFINE BUTTON Ok
         ROW 70
         COL 70
         CAPTION aMsgs[ 116 ]
         ACTION ( ;
            RetVal := AllTrim( PickPropertyValue.PickValue.Value ), ;
            _HMG_DialogCancelled := .F., ;
            PickPropertyValue.RELEASE ;
            )
      END BUTTON

      DEFINE BUTTON Cancel
         ROW 70
         COL 180
         CAPTION aMsgs[ 117 ]
         ACTION ( ;
            RetVal := '', ;
            _HMG_DialogCancelled := .T., ;
            PickPropertyValue.RELEASE ;
            )
      END BUTTON

   END WINDOW

   PickPropertyValue.PickValue.SetFocus

   PickPropertyValue.CENTER
   PickPropertyValue.ACTIVATE

RETURN RetVal

*------------------------------------------------------------------------------*
FUNCTION PickColorValue ( cPropertyName )
*------------------------------------------------------------------------------*
   LOCAL RetVal

   DEFINE WINDOW _PICKCOLOR ;
         AT 0, 0 ;
         WIDTH 368 ;
         HEIGHT 74 ;
         TITLE aMsgs[ 130 ] + ' : ' + cPropertyName ;
         MODAL ;
         NOSIZE ;
         NOSYSMENU

      DEFINE BUTTON DEFAULT
         ROW 10
         COL 10
         CAPTION aMsgs[ 224 ]
         ACTION ( RetVal := 'Nil', _HMG_DialogCancelled := .F., _PICKCOLOR.RELEASE )
      END BUTTON

      DEFINE BUTTON OTHER
         ROW 10
         COL 130
         CAPTION aMsgs[ 225 ]
         ACTION ( RetVal := PickColorOther(), If ( Empty( RetVal ), NIL, ( _HMG_DialogCancelled := .F., _PICKCOLOR.RELEASE ) ) )
      END BUTTON

      DEFINE BUTTON CANCEL
         ROW 10
         COL 250
         CAPTION aMsgs[ 117 ]
         ACTION ( RetVal := '', _HMG_DialogCancelled := .T., _PICKCOLOR.RELEASE )
      END BUTTON

   END WINDOW

   CENTER WINDOW _PICKCOLOR
   ACTIVATE WINDOW _PICKCOLOR

RETURN RetVal

STATIC FUNCTION PickColorOther()

   LOCAL TmpVal, RetVal

   TmpVal := GetColor ()

   IF TmpVal[ 1 ] == NIL
      RetVal := ''
   ELSE
      RetVal := '{' + AllTrim( Str( TmpVal[ 1 ] ) ) + ',' + AllTrim( Str( TmpVal[ 2 ] ) ) + ',' + AllTrim( Str( TmpVal[ 3 ] ) ) + '}'
   ENDIF

RETURN RetVal

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
PROCEDURE StatusBarBuilder
*------------------------------------------------------------------------------*
   PRIVATE _StCaptions := {}
   PRIVATE _StActions := {}
   PRIVATE _StWidths := {}
   PRIVATE _StIcons := {}
   PRIVATE _StToolTips := {}
   PRIVATE _StStyles := {}
   PRIVATE _StFont := { 'Arial', 9, .F., .F., .F., .F. }
   PRIVATE _StTop := .F.

   if ! _IsWIndowDefined ( DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   AAdd ( _StCaptions, '' )
   AAdd ( _StActions, '' )
   AAdd ( _StWidths, '' )
   AAdd ( _StIcons, '' )
   AAdd ( _StToolTips, '' )
   AAdd ( _StStyles, 1 )

   DEFINE WINDOW StDesigner ;
         AT 0, 0 ;
         WIDTH 370 ;
         HEIGHT GetTitleHeight() + 430 + 2 + 17 ;
         TITLE aMsgs[ 132 ] ;
         MODAL ;
         NOSIZE

      ON KEY ESCAPE ACTION ( ;
         ThisWindow.RELEASE ;
         )

      DEFINE STATUSBAR FONT 'Arial' SIZE 8
         STATUSITEM aMsgs[ 133 ]
      END STATUSBAR

      DEFINE FRAME Frame1
         ROW 9
         COL 10
         WIDTH 225
         HEIGHT 196
      END FRAME

      DEFINE LABEL Label1
         ROW 23
         COL 25
         WIDTH 50
         VALUE 'Caption:'
      END LABEL
      DEFINE TEXTBOX Text1
         ROW 20
         COL 100
         VALUE ''
         ONCHANGE StCaptionChange()
      END TEXTBOX

      DEFINE LABEL Label2
         ROW 53
         COL 25
         WIDTH 50
         VALUE 'Action:'
      END LABEL
      DEFINE TEXTBOX Text2
         ROW 50
         COL 100
         VALUE ''
         ONCHANGE StActionChange()
      END TEXTBOX

      DEFINE LABEL Label3
         ROW 83
         COL 25
         WIDTH 50
         VALUE 'Width:'
      END LABEL
      DEFINE TEXTBOX Text3
         ROW 80
         COL 100
         VALUE ''
         ONCHANGE StWidthChange()
      END TEXTBOX

      DEFINE LABEL Label4
         ROW 113
         COL 25
         WIDTH 50
         VALUE 'Icon:'
      END LABEL
      DEFINE TEXTBOX Text4
         ROW 110
         COL 100
         VALUE ''
         ONCHANGE StIconChange()
      END TEXTBOX

      DEFINE LABEL Label5
         ROW 143
         COL 25
         WIDTH 50
         VALUE 'ToolTip:'
      END LABEL

      DEFINE TEXTBOX Text5
         ROW 140
         COL 100
         VALUE ''
         ONCHANGE StToolTipChange()
      END TEXTBOX

      DEFINE LABEL Label6
         ROW 173
         COL 25
         WIDTH 50
         VALUE 'Style:'
      END LABEL

      DEFINE COMBOBOX Combo1
         ROW 170
         COL 100
         ITEMS { 'Normal', 'Flat', 'Raised' }
         VALUE 1
         ON CHANGE StStylesChange()
      END COMBOBOX

      // Button Bar

      DEFINE FRAME Frame3
         ROW 212
         COL 10
         WIDTH 340
         HEIGHT 36
      END FRAME

      DEFINE BUTTON button3
         ROW 216
         COL 13
         WIDTH 61
         HEIGHT 30
         PICTURE 'UP'
         ACTION StMoveUp()
      END BUTTON
      DEFINE BUTTON button4
         ROW 216
         COL 76
         WIDTH 61
         HEIGHT 30
         PICTURE 'DOWN'
         ACTION StMoveDown()
      END BUTTON
      DEFINE BUTTON button5
         ROW 216
         COL 140
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 112 ]
         ACTION StNext()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button6
         ROW 216
         COL 192
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 113 ]
         ACTION StPrior()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button7
         ROW 216
         COL 244
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 114 ]
         ACTION StInsert()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button8
         ROW 216
         COL 296
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 115 ]
         ACTION StDelete()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON

      // Main List Box

      DEFINE LISTBOX List1
         ROW 255
         COL 10
         WIDTH 340
         HEIGHT 160
         ITEMS FillStList()
         VALUE 1
         ONCHANGE StChange()
      END LISTBOX

      // Ok / Cancel Buttons

      DEFINE BUTTON Ok
         ROW 10
         COL 250
         CAPTION aMsgs[ 116 ]
         ACTION ( BuildStatusBar(), _HMG_DialogCancelled := .F. )
      END BUTTON
      DEFINE BUTTON Cancel
         ROW 40
         COL 250
         CAPTION aMsgs[ 117 ]
         ACTION ( ;
            _HMG_DialogCancelled := .T., ;
            ThisWindow.RELEASE ;
            )
      END BUTTON

      DEFINE BUTTON FONT
         ROW 175
         COL 250
         CAPTION aMsgs[ 134 ]
         ACTION StFont()
      END BUTTON

      DEFINE FRAME FrameTop
         ROW 140
         COL 250
         WIDTH 100
         HEIGHT 30
         CAPTION ''
      END FRAME

      DEFINE CHECKBOX TOP
         ROW 144
         COL 326
         WIDTH 15
         HEIGHT 24
         CAPTION ''
         ON CHANGE StTop()
         VALUE _StTop
      END CHECKBOX

      DEFINE LABEL LabelTop
         ROW 148
         COL 260
         WIDTH 65
         VALUE aMsgs[ 135 ]
      END LABEL

   END WINDOW

   StDesigner.List1.VALUE := 1
   StDesigner.Text1.VALUE := StDesigner.List1.Item( 1 )
   StDesigner.Text2.VALUE := _StActions[ 1 ]
   StDesigner.Text3.VALUE := _StWidths[ 1 ]
   StDesigner.Text4.VALUE := _StIcons[ 1 ]
   StDesigner.Text5.VALUE := _StToolTips[ 1 ]
   StDesigner.Combo1.VALUE := _StStyles[ 1 ]

   setfocus ( GetControlHandle ( 'Text1', 'StDesigner' ) )

   StDesigner.CENTER
   StDesigner.ACTIVATE

   DoMethod ( DesignForm, 'SetFocus' )

   DrawGrid()

RETURN
*------------------------------------------------------------------------------*
PROCEDURE StTop()
*------------------------------------------------------------------------------*

   _StTop := This.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE StFont()
*------------------------------------------------------------------------------*
   LOCAL aTemp

   aTemp := GetFont( _StFont[ 1 ], _StFont[ 2 ], _StFont[ 3 ], _StFont[ 4 ], { 0, 0, 0 }, _StFont[ 5 ], _StFont[ 6 ], Nil )

   IF .NOT. Empty ( aTemp[ 1 ] )
      _StFont[ 1 ] := aTemp[ 1 ]
      _StFont[ 2 ] := aTemp[ 2 ]
      _StFont[ 3 ] := aTemp[ 3 ]
      _StFont[ 4 ] := aTemp[ 4 ]
      _StFont[ 5 ] := aTemp[ 6 ]
      _StFont[ 6 ] := aTemp[ 7 ]
   ENDIF

RETURN
*------------------------------------------------------------------------------*
PROCEDURE StCaptionChange
*------------------------------------------------------------------------------*
   LOCAL i

   IF _InsertActive == .F.

      i := StDesigner.List1.VALUE

      IF i == 0
         RETURN
      ENDIF

      StDesigner.List1.Item ( i ) := AllTrim ( StDesigner.Text1.Value )

      StDesigner.List1.VALUE := i

      _StCaptions[ i ] := StDesigner.Text1.VALUE

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StActionChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _StActions[ i ] := StDesigner.Text2.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StWidthChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _StWidths[ i ] := StDesigner.Text3.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StIconChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _StIcons[ i ] := StDesigner.Text4.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE StToolTipChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _StToolTips[ i ] := StDesigner.Text5.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE StStylesChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _StStyles[ i ] := StDesigner.Combo1.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE StMoveUp
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL Previous
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4
   LOCAL aux5

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   Previous := StDesigner.List1.Item( i - 1 )
   Current := StDesigner.List1.Item( i )

   StDesigner.List1.Item( i ) := Previous
   StDesigner.List1.Item( i - 1 ) := Current

   StDesigner.List1.VALUE := i - 1

   aux0 := _StCaptions[ i ]
   aux1 := _StActions[ i ]
   aux2 := _StWidths[ i ]
   aux3 := _StIcons[ i ]
   aux4 := _StToolTips[ i ]
   aux5 := _StStyles[ i ]

   _StCaptions[ i ] := _StCaptions[ i - 1 ]
   _StActions[ i ] := _StActions[ i - 1 ]
   _StWidths[ i ] := _StWidths[ i - 1 ]
   _StIcons[ i ] := _StIcons[ i - 1 ]
   _StToolTips[ i ] := _StToolTips[ i - 1 ]
   _StStyles[ i ] := _StStyles[ i - 1 ]

   _StCaptions[ i - 1 ] := aux0
   _StActions[ i - 1 ] := aux1
   _StWidths[ i - 1 ] := aux2
   _StIcons[ i - 1 ] := aux3
   _StToolTips[ i - 1 ] := aux4
   _StStyles[ i - 1 ] := aux5

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StMoveDown
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL NEXT
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4
   LOCAL aux5

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := StDesigner.List1.ItemCount

   IF i == c
      RETURN
   ENDIF

   Current := StDesigner.List1.Item( i )
   NEXT := StDesigner.List1.Item( i + 1 )

   StDesigner.List1.Item( i ) := NEXT
   StDesigner.List1.Item( i + 1 ) := Current

   StDesigner.List1.VALUE := i + 1

   aux0 := _StCaptions[ i ]
   aux1 := _StActions[ i ]
   aux2 := _StWidths[ i ]
   aux3 := _StIcons[ i ]
   aux4 := _StToolTips[ i ]
   aux5 := _StStyles[ i ]

   _StCaptions[ i ] := _StCaptions[ i + 1 ]
   _StActions[ i ] := _StActions[ i + 1 ]
   _StWidths[ i ] := _StWidths[ i + 1 ]
   _StIcons[ i ] := _StIcons[ i + 1 ]
   _StToolTips[ i ] := _StToolTips[ i + 1 ]
   _StStyles[ i ] := _StStyles[ i + 1 ]

   _StCaptions[ i + 1 ] := aux0
   _StActions[ i + 1 ] := aux1
   _StWidths[ i + 1 ] := aux2
   _StIcons[ i + 1 ] := aux3
   _StToolTips[ i + 1 ] := aux4
   _StStyles[ i + 1 ] := aux5

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StNext
*------------------------------------------------------------------------------*
   LOCAL i, c

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := StDesigner.List1.ItemCount

   IF i + 1 > c

      if ! Empty ( StDesigner.List1.Item ( i ) )

         StDesigner.List1.additem( '' )

         AAdd ( _StCaptions, '' )
         AAdd ( _StActions, '' )
         AAdd ( _StWidths, '' )
         AAdd ( _StIcons, '' )
         AAdd ( _StToolTips, '' )
         AAdd ( _StStyles, 1 )

      ENDIF

   ENDIF

   StDesigner.List1.VALUE := i + 1

   StDesigner.Text1.VALUE := StDesigner.List1.Item( i + 1 )

   setfocus ( GetControlHandle ( 'Text1', 'StDesigner' ) )

   IF HMG_LEN ( _StActions ) >= i + 1

      StDesigner.Text2.VALUE := _StActions[ i + 1 ]
      StDesigner.Text3.VALUE := _StWidths[ i + 1 ]
      StDesigner.Text4.VALUE := _StIcons[ i + 1 ]
      StDesigner.Text5.VALUE := _StToolTips[ i + 1 ]
      StDesigner.Combo1.VALUE := _StStyles[ i + 1 ]

   ELSE

      StDesigner.Text2.VALUE := ''
      StDesigner.Text3.VALUE := ''
      StDesigner.Text4.VALUE := ''
      StDesigner.Text5.VALUE := ''
      StDesigner.Combo1.VALUE := 1

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StPrior
*------------------------------------------------------------------------------*
   LOCAL i

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   StDesigner.List1.VALUE := i - 1

   StDesigner.Text1.VALUE := StDesigner.List1.Item( i - 1 )

   setfocus ( GetControlHandle ( 'Text1', 'StDesigner' ) )

   StDesigner.Text2.VALUE := _StActions[ i - 1 ]
   StDesigner.Text3.VALUE := _StWidths[ i - 1 ]
   StDesigner.Text4.VALUE := _StIcons[ i - 1 ]
   StDesigner.Text5.VALUE := _StToolTips[ i - 1 ]
   StDesigner.Combo1.VALUE := _StStyles[ i - 1 ]

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StDelete
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := StDesigner.List1.ItemCount

   IF c == 1
      StDesigner.List1.Item ( 1 ) := ""
      StDesigner.List1.VALUE := 1
      RETURN
   ENDIF

   StDesigner.List1.DeleteItem( i )

   ADel ( _StCaptions, i )
   ADel ( _StActions, i )
   ADel ( _StWidths, i )
   ADel ( _StIcons, i )
   ADel ( _StToolTips, i )
   ADel ( _StStyles, i )

   ASize ( _StCaptions, HMG_LEN( _StCaptions ) - 1 )
   ASize ( _StActions, HMG_LEN( _StActions ) - 1 )
   ASize ( _StWidths, HMG_LEN( _StWidths ) - 1 )
   ASize ( _StIcons, HMG_LEN( _StIcons ) - 1 )
   ASize ( _StToolTips, HMG_LEN( _StToolTips ) - 1 )
   ASize ( _StStyles, HMG_LEN( _StStyles ) - 1 )

   c := c - 1

   IF i > c

      StDesigner.List1.VALUE := c
      StDesigner.Text1.VALUE := StDesigner.List1.Item( c )
      StDesigner.Text2.VALUE := _StActions[ c ]
      StDesigner.Text3.VALUE := _StWidths[ c ]
      StDesigner.Text4.VALUE := _StIcons[ c ]
      StDesigner.Text5.VALUE := _StToolTips[ c ]
      StDesigner.Combo1.VALUE := _StStyles[ c ]

   ELSE
      StDesigner.List1.VALUE := i
      StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
      StDesigner.Text2.VALUE := _StActions[ i ]
      StDesigner.Text3.VALUE := _StWidths[ i ]
      StDesigner.Text4.VALUE := _StIcons[ i ]
      StDesigner.Text5.VALUE := _StToolTips[ i ]
      StDesigner.Combo1.VALUE := _StStyles[ i ]

   ENDIF

   setfocus ( GetControlHandle ( 'Text1', 'StDesigner' ) )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StInsert
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL aTemp := {}
   LOCAL x

   _InsertActive := .T.

   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := StDesigner.List1.ItemCount

   FOR x := 1 TO c

      IF x == i
         AAdd ( aTemp, '' )
      ENDIF

      AAdd ( aTemp, StDesigner.List1.Item ( x ) )

   NEXT x

   StDesigner.List1.DeleteAllItems

   FOR x := 1 TO HMG_LEN ( aTemp )
      StDesigner.List1.AddItem ( aTemp[ x ] )
   NEXT x

   StDesigner.List1.VALUE := i

   AAdd ( _StCaptions, '' )
   AAdd ( _StActions, '' )
   AAdd ( _StWidths, '' )
   AAdd ( _StIcons, '' )
   AAdd ( _StToolTips, '' )
   AAdd ( _StStyles, 1 )

   AIns ( _StCaptions, i )
   AIns ( _StActions, i )
   AIns ( _StWidths, i )
   AIns ( _StIcons, i )
   AIns ( _StToolTips, i )
   AIns ( _StStyles, i )

   _StCaptions[ i ] := ''
   _StActions[ i ] := ''
   _StWidths[ i ] := ''
   _StIcons[ i ] := ''
   _StToolTips[ i ] := ''
   _StStyles[ i ] := 1

   StDesigner.Text1.VALUE := ''
   StDesigner.Text2.VALUE := ''
   StDesigner.Text3.VALUE := ''
   StDesigner.Text4.VALUE := ''
   StDesigner.Text5.VALUE := ''
   StDesigner.Combo1.VALUE := 1

   setfocus ( GetControlHandle ( 'Text1', 'StDesigner' ) )

   _InsertActive := .F.

RETURN

*------------------------------------------------------------------------------*
PROCEDURE StChange
*------------------------------------------------------------------------------*
   LOCAL i


   i := StDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
   StDesigner.Text2.VALUE := _StActions[ i ]
   StDesigner.Text3.VALUE := _StWidths[ i ]
   StDesigner.Text4.VALUE := _StIcons[ i ]
   StDesigner.Text5.VALUE := _StToolTips[ i ]
   StDesigner.Combo1.VALUE := _StStyles[ i ]

RETURN

*------------------------------------------------------------------------------*
FUNCTION FillStList()
*------------------------------------------------------------------------------*
   LOCAL aList := {}
   LOCAL LineCount
   LOCAL Line
   LOCAL x
   LOCAL i
   LOCAL CAPTION
   LOCAL ACTION
   LOCAL cIcon
   LOCAL cToolTip
   LOCAL nStyle
   LOCAL cWidth
   LOCAL cSize
   LOCAL cFont
   LOCAL lStrikeOut := .F.
   LOCAL lUnderLine := .F.
   LOCAL lBold := .F.
   LOCAL lItalic := .F.

   IF Empty ( _hmgide_CurrentStatusBar )
      aList := { '' }
   ELSE

      _StCaptions := {}
      _StActions := {}
      _StWidths := {}
      _StIcons := {}
      _StToolTips := {}
      _StStyles := {}

      LineCount := MLCount ( _hmgide_CurrentStatusBar )

      FOR i := 1 TO LineCount

         Line := AllTrim ( MemoLine ( _hmgide_CurrentStatusBar, 1024, i, 4, .T. ) )

         IF HMG_UPPER ( Line ) = 'DEFINE STATUSBAR'

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 16 ) )

            // Get Top

            IF hb_URight ( HMG_UPPER ( Line ), 4 ) == ' TOP'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 4 ) )
               _StTop := .T.
            ELSE
               _StTop := .F.
            ENDIF

            // Get StrikeOut

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' STRIKEOUT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               lStrikeOut := .T.
            ENDIF

            // Get UnderLine

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' UNDERLINE'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               lUnderLine := .T.
            ENDIF

            // Get Italic

            IF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' ITALIC'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               lItalic := .T.
            ENDIF

            // Get Bold

            IF hb_URight ( HMG_UPPER ( Line ), 5 ) == ' BOLD'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 5 ) )
               lBold := .T.
            ENDIF

            // Get Size

            x := hb_utf8RAt ( ' SIZE ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               cSize := hb_USubStr ( Line, x + 6, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               cSize := ''
            ENDIF

            // Get Font

            Line := AllTrim( Line )

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( 'FONT "', HMG_UPPER( Line ) )

               IF x > 0
                  cFont := AllTrim ( hb_USubStr ( Line, x + 6, HMG_LEN( Line ) - ( x + 6 ) ) )
                  // Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
               ELSE
                  cFont := 'Arial'
               ENDIF

            ELSE
               cFont := 'Arial'
            ENDIF

            _StFont := { cFont, Val( cSize ), lBold, lItalic, lUnderLine, lStrikeOut }

         ELSEIF HMG_UPPER ( Line ) = 'STATUSITEM '

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 11 ) )

            // Get ToolTip

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  cToolTip := AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN( Line ) - ( x + 10 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  cToolTip := ''
               ENDIF

            ELSE
               cToolTip := ''
            ENDIF

            // Get Style

            IF hb_URight ( HMG_UPPER ( Line ), 5 ) == ' FLAT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 5 ) )
               nStyle := 2
            ELSEIF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' RAISED'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               nStyle := 3
            ELSE
               nStyle := 1
            ENDIF

            // Get Icon

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' ICON "', HMG_UPPER( Line ) )

               IF x > 0
                  cIcon := AllTrim ( hb_USubStr ( Line, x + 7, HMG_LEN( Line ) - ( x + 7 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  cIcon := ''
               ENDIF

            ELSE
               cIcon := ''
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               ACTION := hb_USubStr ( Line, x + 8, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               ACTION := ''
            ENDIF

            // Get Width

            x := hb_utf8RAt ( ' WIDTH ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               cWidth := hb_USubStr ( Line, x + 7, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               cWidth := ''
            ENDIF

            // Get Caption

            Line := AllTrim ( Line )

            CAPTION := hb_ULeft ( Line, HMG_LEN( Line ) - 1 )

            CAPTION := hb_URight ( CAPTION, HMG_LEN( Caption ) - 1 )

            AAdd ( aList, Caption )

            AAdd ( _StCaptions, Caption )
            AAdd ( _StActions, Action )
            AAdd ( _StWidths, cWidth )
            AAdd ( _StIcons, cIcon )
            AAdd ( _StToolTips, cToolTip )
            AAdd ( _StStyles, nStyle )

         ELSEIF HMG_UPPER ( Line ) = 'CLOCK'

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 11 ) )

            // Get ToolTip

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  cToolTip := AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN( Line ) - ( x + 10 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  cToolTip := ''
               ENDIF

            ELSE
               cToolTip := ''
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               ACTION := hb_USubStr ( Line, x + 8, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               ACTION := ''
            ENDIF

            // Get Width

            x := hb_utf8RAt ( ' WIDTH ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               cWidth := hb_USubStr ( Line, x + 7, 255 )
               // Line := HB_ULEFT ( Line , x )
            ELSE
               cWidth := ''
            ENDIF

            AAdd ( aList, '$CLOCK' )

            AAdd ( _StCaptions, '$CLOCK' )
            AAdd ( _StActions, Action )
            AAdd ( _StWidths, cWidth )
            AAdd ( _StIcons, '' )
            AAdd ( _StToolTips, cToolTip )
            AAdd ( _StStyles, 1 )

         ELSEIF HMG_UPPER ( Line ) = 'DATE'

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 11 ) )

            // Get ToolTip

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  cToolTip := AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN( Line ) - ( x + 10 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  cToolTip := ''
               ENDIF

            ELSE
               cToolTip := ''
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               ACTION := hb_USubStr ( Line, x + 8, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               ACTION := ''
            ENDIF

            // Get Width

            x := hb_utf8RAt ( ' WIDTH ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               cWidth := hb_USubStr ( Line, x + 7, 255 )
               // Line := HB_ULEFT ( Line , x )
            ELSE
               cWidth := ''
            ENDIF

            AAdd ( aList, '$DATE' )

            AAdd ( _StCaptions, '$DATE' )
            AAdd ( _StActions, Action )
            AAdd ( _StWidths, cWidth )
            AAdd ( _StIcons, '' )
            AAdd ( _StToolTips, cToolTip )
            AAdd ( _StStyles, 1 )

         ELSEIF HMG_UPPER ( Line ) = 'KEYBOARD'

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 11 ) )

            // Get ToolTip

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  cToolTip := AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN( Line ) - ( x + 10 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  cToolTip := ''
               ENDIF

            ELSE
               cToolTip := ''
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               ACTION := hb_USubStr ( Line, x + 8, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               ACTION := ''
            ENDIF

            // Get Width

            x := hb_utf8RAt ( ' WIDTH ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               cWidth := hb_USubStr ( Line, x + 7, 255 )
               // Line := HB_ULEFT ( Line , x )
            ELSE
               cWidth := ''
            ENDIF

            AAdd ( aList, '$KEYBOARD' )

            AAdd ( _StCaptions, '$KEYBOARD' )
            AAdd ( _StActions, Action )
            AAdd ( _StWidths, cWidth )
            AAdd ( _StIcons, '' )
            AAdd ( _StToolTips, cToolTip )
            AAdd ( _StStyles, 1 )

         ENDIF

      NEXT i

   ENDIF

RETURN aList

*------------------------------------------------------------------------------*
PROCEDURE BuildStatusBar
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL MENU
   LOCAL aStyles := { '', ' FLAT', ' RAISED' }

   MENU := Space( 4 ) + 'DEFINE STATUSBAR' ;
      + ' FONT ' + Chr( 34 ) + _StFont[ 1 ] + Chr( 34 ) ;
      + ' SIZE ' + AllTrim ( Str ( _StFont[ 2 ] ) ) ;
      +if ( _StFont[ 3 ], ' BOLD', '' ) ;
      +if ( _StFont[ 4 ], ' ITALIC', '' ) ;
      +if ( _StFont[ 5 ], ' UNDERLINE', '' ) ;
      +if ( _StFont[ 6 ], ' STRIKEOUT', '' ) ;
      +if ( _StTop, ' TOP', '' ) ;
      +CRLF

   FOR i := 1 TO StDesigner.List1.ItemCount

      // Create Command

      IF AllTrim ( HMG_UPPER ( _StCaptions[ i ] ) ) == '$DATE'

         if ! Empty( _StIcons[ i ] )
            MsgStop ( aMsgs[ 136 ], 'HMG IDE' )
            StDesigner.List1.VALUE := i
            StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
            StDesigner.Text2.VALUE := _StActions[ i ]
            StDesigner.Text3.VALUE := _StWidths[ i ]
            StDesigner.Text4.VALUE := _StIcons[ i ]
            StDesigner.Text5.VALUE := _StToolTips[ i ]
            StDesigner.Combo1.VALUE := _StStyles[ i ]
            RETURN
         ENDIF

         IF _StStyles[ i ] != 1
            MsgStop ( aMsgs[ 137 ], 'HMG IDE' )
            StDesigner.List1.VALUE := i
            StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
            StDesigner.Text2.VALUE := _StActions[ i ]
            StDesigner.Text3.VALUE := _StWidths[ i ]
            StDesigner.Text4.VALUE := _StIcons[ i ]
            StDesigner.Text5.VALUE := _StToolTips[ i ]
            StDesigner.Combo1.VALUE := _StStyles[ i ]
            RETURN
         ENDIF

         MENU := MENU + Space( 8 ) + 'DATE' + ;
            +if ( ! Empty( _StWidths[ i ] ), ' WIDTH ' + _StWidths[ i ], '' ) ;
            +if ( ! Empty( _StActions[ i ] ), ' ACTION ' + _StActions[ i ], '' ) ;
            +if ( ! Empty( _StToolTips[ i ] ), ' TOOLTIP ' + Chr( 34 ) + _StToolTips[ i ] + Chr( 34 ), '' ) ;
            +CRLF

      ELSEIF AllTrim ( HMG_UPPER ( _StCaptions[ i ] ) ) == '$CLOCK'

         if ! Empty( _StIcons[ i ] )
            MsgStop ( aMsgs[ 138 ], 'HMG IDE' )
            StDesigner.List1.VALUE := i
            StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
            StDesigner.Text2.VALUE := _StActions[ i ]
            StDesigner.Text3.VALUE := _StWidths[ i ]
            StDesigner.Text4.VALUE := _StIcons[ i ]
            StDesigner.Text5.VALUE := _StToolTips[ i ]
            StDesigner.Combo1.VALUE := _StStyles[ i ]
            RETURN
         ENDIF

         IF _StStyles[ i ] != 1
            MsgStop ( aMsgs[ 139 ], 'HMG IDE' )
            StDesigner.List1.VALUE := i
            StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
            StDesigner.Text2.VALUE := _StActions[ i ]
            StDesigner.Text3.VALUE := _StWidths[ i ]
            StDesigner.Text4.VALUE := _StIcons[ i ]
            StDesigner.Text5.VALUE := _StToolTips[ i ]
            StDesigner.Combo1.VALUE := _StStyles[ i ]
            RETURN
         ENDIF

         MENU := MENU + Space( 8 ) + 'CLOCK' + ;
            +if ( ! Empty( _StWidths[ i ] ), ' WIDTH ' + _StWidths[ i ], '' ) ;
            +if ( ! Empty( _StActions[ i ] ), ' ACTION ' + _StActions[ i ], '' ) ;
            +if ( ! Empty( _StToolTips[ i ] ), ' TOOLTIP ' + Chr( 34 ) + _StToolTips[ i ] + Chr( 34 ), '' ) ;
            +CRLF

      ELSEIF AllTrim ( HMG_UPPER ( _StCaptions[ i ] ) ) == '$KEYBOARD'

         if ! Empty( _StIcons[ i ] )
            MsgStop ( aMsgs[ 140 ], 'HMG IDE' )
            StDesigner.List1.VALUE := i
            StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
            StDesigner.Text2.VALUE := _StActions[ i ]
            StDesigner.Text3.VALUE := _StWidths[ i ]
            StDesigner.Text4.VALUE := _StIcons[ i ]
            StDesigner.Text5.VALUE := _StToolTips[ i ]
            StDesigner.Combo1.VALUE := _StStyles[ i ]
            RETURN
         ENDIF

         IF _StStyles[ i ] != 1
            MsgStop ( aMsgs[ 141 ], 'HMG IDE' )
            StDesigner.List1.VALUE := i
            StDesigner.Text1.VALUE := StDesigner.List1.Item( i )
            StDesigner.Text2.VALUE := _StActions[ i ]
            StDesigner.Text3.VALUE := _StWidths[ i ]
            StDesigner.Text4.VALUE := _StIcons[ i ]
            StDesigner.Text5.VALUE := _StToolTips[ i ]
            StDesigner.Combo1.VALUE := _StStyles[ i ]
            RETURN
         ENDIF

         MENU := MENU + Space( 8 ) + 'KEYBOARD' + ;
            +if ( ! Empty( _StWidths[ i ] ), ' WIDTH ' + _StWidths[ i ], '' ) ;
            +if ( ! Empty( _StActions[ i ] ), ' ACTION ' + _StActions[ i ], '' ) ;
            +if ( ! Empty( _StToolTips[ i ] ), ' TOOLTIP ' + Chr( 34 ) + _StToolTips[ i ] + Chr( 34 ), '' ) ;
            +CRLF

      ELSE

         // Item

         MENU := MENU + Space( 8 ) + 'STATUSITEM ' + Chr( 34 ) + _StCaptions[ i ] + Chr( 34 ) ;
            +if ( ! Empty( _StWidths[ i ] ), ' WIDTH ' + _StWidths[ i ], '' ) ;
            +if ( ! Empty( _StActions[ i ] ), ' ACTION ' + _StActions[ i ], '' ) ;
            +if ( ! Empty( _StIcons[ i ] ), ' ICON ' + Chr( 34 ) + _StIcons[ i ] + Chr( 34 ), '' ) ;
            +aStyles[ _StStyles[ i ] ] ;
            +if ( ! Empty( _StToolTips[ i ] ), ' TOOLTIP ' + Chr( 34 ) + _StToolTips[ i ] + Chr( 34 ), '' ) ;
            +CRLF

      ENDIF

   NEXT i

   MENU := MENU + Space( 4 ) + 'END STATUSBAR' + CRLF

   _hmgide_CurrentStatusBar := MENU

   DesignFormModified := .T.

   StDesigner.RELEASE

RETURN

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
PROCEDURE ContextMenuBuilder ( cType, nDropDownArrayPos, cName )
*------------------------------------------------------------------------------*
   LOCAL cTitle

   PRIVATE _MenuCaptions := {}
   PRIVATE _MenuActions := {}
   PRIVATE _MenuNames := {}
   PRIVATE _MenuImages := {}
   PRIVATE _MenuChecked := {}


   if ! _IsWIndowDefined ( DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF ValType ( cType ) = 'U'
      cType := 'C'
   ENDIF

   IF cType == 'N'
      cTitle := aMsgs[ 127 ]
   ELSEIF cType == 'C'
      cTitle := aMsgs[ 128 ]
   ELSEIF cType == 'D'
      IF nDropDownArrayPos == 0
         RETURN
      ENDIF

      cTitle := aMsgs[ 129 ] + cName + ']'

   ENDIF

   AAdd ( _MenuCaptions, '' )
   AAdd ( _MenuActions, '' )
   AAdd ( _MenuNames, '' )
   AAdd ( _MenuImages, '' )
   AAdd ( _MenuChecked, .F. )

   DEFINE WINDOW MenuDesigner ;
         AT 0, 0 ;
         WIDTH 370 ;
         HEIGHT GetTitleHeight() + 430 + 2 ;
         TITLE cTitle ;
         MODAL ;
         NOSIZE

      ON KEY ESCAPE ACTION ( ;
         ThisWindow.RELEASE ;
         )

      DEFINE FRAME Frame1
         ROW 9
         COL 10
         WIDTH 225
         HEIGHT 166
      END FRAME

      DEFINE LABEL Label1
         ROW 23
         COL 25
         WIDTH 50
         VALUE 'Caption:'
      END LABEL
      DEFINE TEXTBOX Text1
         ROW 20
         COL 100
         VALUE ''
         ONCHANGE CaptionChange()
      END TEXTBOX

      DEFINE LABEL Label2
         ROW 53
         COL 25
         WIDTH 50
         VALUE 'Action:'
      END LABEL
      DEFINE TEXTBOX Text2
         ROW 50
         COL 100
         VALUE ''
         ONCHANGE ActionChange()
      END TEXTBOX

      DEFINE LABEL Label3
         ROW 83
         COL 25
         WIDTH 50
         VALUE 'Name:'
      END LABEL
      DEFINE TEXTBOX Text3
         ROW 80
         COL 100
         VALUE ''
         ONCHANGE NameChange()
      END TEXTBOX

      DEFINE LABEL Label4
         ROW 113
         COL 25
         WIDTH 50
         VALUE 'Image:'
      END LABEL
      DEFINE TEXTBOX Text4
         ROW 110
         COL 100
         VALUE ''
         ONCHANGE ImageChange()
      END TEXTBOX

      DEFINE LABEL Label5
         ROW 143
         COL 25
         WIDTH 50
         VALUE 'Checked:'
      END LABEL
      DEFINE CHECKBOX Check1
         ROW 140
         COL 100
         VALUE .F.
         ONCHANGE CheckedChange()
      END CHECKBOX

      // Button Bar

      DEFINE FRAME Frame2
         ROW 182
         COL 10
         WIDTH 340
         HEIGHT 36
      END FRAME

      DEFINE BUTTON button3
         ROW 186
         COL 13
         WIDTH 61
         HEIGHT 30
         PICTURE 'UP'
         ACTION MenuMoveUp()
      END BUTTON
      DEFINE BUTTON button4
         ROW 186
         COL 76
         WIDTH 61
         HEIGHT 30
         PICTURE 'DOWN'
         ACTION MenuMoveDown()
      END BUTTON
      DEFINE BUTTON button5
         ROW 186
         COL 140
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 112 ]
         ACTION MenuNext()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button6
         ROW 186
         COL 192
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 113 ]
         ACTION MenuPrior()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button7
         ROW 186
         COL 244
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 114 ]
         ACTION MenuInsert()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button8
         ROW 186
         COL 296
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 115 ]
         ACTION MenuDelete()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON

      // Main List Box

      DEFINE LISTBOX List1
         ROW 225
         COL 10
         WIDTH 340
         HEIGHT 190
         ITEMS FillContextMenuList ( cType, nDropDownArrayPos )
         VALUE 1
         ONCHANGE MenuChange()
      END LISTBOX

      // Ok / Cancel Buttons

      DEFINE BUTTON Ok
         ROW 10
         COL 250
         CAPTION aMsgs[ 116 ]
         ACTION ( ;
            BuildContextMenu( cType, nDropDownArrayPos, cName ), ;
            _HMG_DialogCancelled := .F. ;
            )
      END BUTTON
      DEFINE BUTTON Cancel
         ROW 45
         COL 250
         CAPTION aMsgs[ 117 ]
         ACTION ( _HMG_DialogCancelled := .T., ThisWindow.Release )
      END BUTTON

   END WINDOW

   MenuDesigner.List1.VALUE := 1
   MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( 1 ) )
   MenuDesigner.Text2.VALUE := _MenuActions[ 1 ]
   MenuDesigner.Text3.VALUE := _MenuNames[ 1 ]
   MenuDesigner.Text4.VALUE := _MenuImages[ 1 ]
   MenuDesigner.check1.VALUE := _MenuChecked[ 1 ]

   setfocus ( GetControlHandle ( 'Text1', 'MenuDesigner' ) )

   MenuDesigner.CENTER
   MenuDesigner.ACTIVATE

   DoMethod ( DesignForm, 'SetFocus' )
   DrawGrid()

RETURN

*------------------------------------------------------------------------------*
PROCEDURE BuildContextMenu ( cType, nDropDownArrayPos, cName )
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL MENU
   LOCAL CurrentLevel := 0

   IF HMG_LEN ( _MenuCaptions ) == 0
      MENU := ''
      IF cType == 'C'
         _hmgide_CurrentContextMenu := MENU
      ELSEIF cType == 'N'
         _hmgide_CurrentNotifyMenu := MENU
      ELSEIF cType == 'D'
         _hmgide_aDropDownMenus[ nDropDownArrayPos ] := MENU
      ENDIF
      DesignFormModified := .T.
      MenuDesigner.RELEASE
      RETURN
   ENDIF

   IF cType == 'C'

      MENU := Space( 4 ) + 'DEFINE CONTEXT MENU' + CRLF

   ELSEIF cType == 'N'

      MENU := Space( 4 ) + 'DEFINE NOTIFY MENU' + CRLF

   ELSEIF cType == 'D'

      MENU := Space( 4 ) + 'DEFINE DROPDOWN MENU BUTTON ' + cName + CRLF

   ENDIF

   FOR i := 1 TO MenuDesigner.List1.ItemCount

      // Create Command

      IF _MenuCaptions[ i ] = '-'

         // Separator

         if ! Empty( _MenuNames[ i ] )
            MsgStop ( aMsgs[ 122 ], 'HMG IDE' )
            MenuDesigner.List1.VALUE := i
            MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
            MenuDesigner.Text2.VALUE := _MenuActions[ i ]
            MenuDesigner.Text3.VALUE := _MenuNames[ i ]
            MenuDesigner.Text4.VALUE := _MenuImages[ i ]
            MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
            RETURN
         ENDIF

         if ! Empty( _MenuActions[ i ] )
            MsgStop ( aMsgs[ 123 ], 'HMG IDE' )
            MenuDesigner.List1.VALUE := i
            MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
            MenuDesigner.Text2.VALUE := _MenuActions[ i ]
            MenuDesigner.Text3.VALUE := _MenuNames[ i ]
            MenuDesigner.Text4.VALUE := _MenuImages[ i ]
            MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
            RETURN
         ENDIF

         if ! Empty( _MenuImages[ i ] )
            MsgStop ( aMsgs[ 124 ], 'HMG IDE' )
            MenuDesigner.List1.VALUE := i
            MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
            MenuDesigner.Text2.VALUE := _MenuActions[ i ]
            MenuDesigner.Text3.VALUE := _MenuNames[ i ]
            MenuDesigner.Text4.VALUE := _MenuImages[ i ]
            MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
            RETURN
         ENDIF

         IF _MenuChecked[ i ] == .T.
            MsgStop ( aMsgs[ 125 ], 'HMG IDE' )
            MenuDesigner.List1.VALUE := i
            MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
            MenuDesigner.Text2.VALUE := _MenuActions[ i ]
            MenuDesigner.Text3.VALUE := _MenuNames[ i ]
            MenuDesigner.Text4.VALUE := _MenuImages[ i ]
            MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
            RETURN
         ENDIF

         MENU := MENU + Space( 8 ) + Space( CurrentLevel * 4 ) + 'SEPARATOR' + CRLF

      ELSE

         // Item

         IF Empty( _MenuActions[ i ] )
            MsgStop ( aMsgs[ 126 ], 'HMG IDE' )
            MenuDesigner.List1.VALUE := i
            MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
            MenuDesigner.Text2.VALUE := _MenuActions[ i ]
            MenuDesigner.Text3.VALUE := _MenuNames[ i ]
            MenuDesigner.Text4.VALUE := _MenuImages[ i ]
            MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
            RETURN
         ENDIF

         MENU := MENU + Space( 8 ) + 'MENUITEM ' + Chr( 34 ) + _MenuCaptions[ i ] + Chr( 34 ) + ' ACTION ' + _MenuActions[ i ] + if ( ! Empty( _MenuNames[ i ] ), ' NAME ' + _MenuNames[ i ], '' ) + if ( ! Empty( _MenuImages[ i ] ), ' IMAGE ' + Chr( 34 ) + _MenuImages[ i ] + Chr( 34 ), '' ) + if ( _MenuChecked[ i ] == .T., ' CHECKED', '' ) + CRLF

      ENDIF

   NEXT i

   MENU := MENU + Space( 4 ) + 'END MENU' + CRLF


   IF cType == 'C'

      _hmgide_CurrentContextMenu := MENU

   ELSEIF cType == 'N'

      _hmgide_CurrentNotifyMenu := MENU

   ELSEIF cType == 'D'

      _hmgide_aDropDownMenus[ nDropDownArrayPos ] := MENU

   ENDIF

   DesignFormModified := .T.

   MenuDesigner.RELEASE

RETURN

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
PROCEDURE MainMenuBuilder
*------------------------------------------------------------------------------*
   PRIVATE _MenuCaptions := {}
   PRIVATE _MenuActions := {}
   PRIVATE _MenuNames := {}
   PRIVATE _MenuImages := {}
   PRIVATE _MenuChecked := {}

   if ! _IsWIndowDefined ( DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   AAdd ( _MenuCaptions, '' )
   AAdd ( _MenuActions, '' )
   AAdd ( _MenuNames, '' )
   AAdd ( _MenuImages, '' )
   AAdd ( _MenuChecked, .F. )

   DEFINE WINDOW MenuDesigner ;
         AT 0, 0 ;
         WIDTH 370 ;
         HEIGHT GetTitleHeight() + 430 + 2 ;
         TITLE aMsgs[ 111 ] ;
         MODAL ;
         NOSIZE

      ON KEY ESCAPE ACTION ( ;
         ThisWindow.RELEASE ;
         )

      DEFINE FRAME Frame1
         ROW 9
         COL 10
         WIDTH 225
         HEIGHT 166
      END FRAME

      DEFINE LABEL Label1
         ROW 23
         COL 25
         WIDTH 50
         VALUE 'Caption:'
      END LABEL
      DEFINE TEXTBOX Text1
         ROW 20
         COL 100
         VALUE ''
         ONCHANGE CaptionChange()
      END TEXTBOX

      DEFINE LABEL Label2
         ROW 53
         COL 25
         WIDTH 50
         VALUE 'Action:'
      END LABEL
      DEFINE TEXTBOX Text2
         ROW 50
         COL 100
         VALUE ''
         ONCHANGE ActionChange()
      END TEXTBOX

      DEFINE LABEL Label3
         ROW 83
         COL 25
         WIDTH 50
         VALUE 'Name:'
      END LABEL
      DEFINE TEXTBOX Text3
         ROW 80
         COL 100
         VALUE ''
         ONCHANGE NameChange()
      END TEXTBOX

      DEFINE LABEL Label4
         ROW 113
         COL 25
         WIDTH 50
         VALUE 'Image:'
      END LABEL
      DEFINE TEXTBOX Text4
         ROW 110
         COL 100
         VALUE ''
         ONCHANGE ImageChange()
      END TEXTBOX

      DEFINE LABEL Label5
         ROW 143
         COL 25
         WIDTH 50
         VALUE 'Checked:'
      END LABEL
      DEFINE CHECKBOX Check1
         ROW 140
         COL 100
         VALUE .F.
         ONCHANGE CheckedChange()
      END CHECKBOX

      // Button Bar

      DEFINE FRAME Frame2
         ROW 182
         COL 10
         WIDTH 340
         HEIGHT 36
      END FRAME
      DEFINE BUTTON button1
         ROW 186
         COL 13
         WIDTH 30
         HEIGHT 30
         PICTURE 'LEFT'
         ACTION UnIndent()
      END BUTTON
      DEFINE BUTTON button2
         ROW 186
         COL 45
         WIDTH 30
         HEIGHT 30
         PICTURE 'RIGHT'
         ACTION Indent()
      END BUTTON
      DEFINE BUTTON button3
         ROW 186
         COL 77
         WIDTH 30
         HEIGHT 30
         PICTURE 'UP'
         ACTION MenuMoveUp()
      END BUTTON
      DEFINE BUTTON button4
         ROW 186
         COL 109
         WIDTH 30
         HEIGHT 30
         PICTURE 'DOWN'
         ACTION MenuMoveDown()
      END BUTTON
      DEFINE BUTTON button5
         ROW 186
         COL 140
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 112 ]
         ACTION MenuNext()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button6
         ROW 186
         COL 192
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 113 ]
         ACTION MenuPrior()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button7
         ROW 186
         COL 244
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 114 ]
         ACTION MenuInsert()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button8
         ROW 186
         COL 296
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 115 ]
         ACTION MenuDelete()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON

      // Main List Box

      DEFINE LISTBOX List1
         ROW 225
         COL 10
         WIDTH 340
         HEIGHT 190
         ITEMS FillMenuList()
         VALUE 1
         ONCHANGE MenuChange()
      END LISTBOX

      // Ok / Cancel Buttons

      DEFINE BUTTON Ok
         ROW 10
         COL 250
         CAPTION aMsgs[ 116 ]
         ACTION ( BuildMenu(), _HMG_DialogCancelled := .F. )
      END BUTTON
      DEFINE BUTTON Cancel
         ROW 45
         COL 250
         CAPTION aMsgs[ 117 ]
         ACTION ( _HMG_DialogCancelled := .T., ThisWindow.Release )
      END BUTTON

   END WINDOW

   MenuDesigner.List1.VALUE := 1
   MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( 1 ) )
   MenuDesigner.Text2.VALUE := _MenuActions[ 1 ]
   MenuDesigner.Text3.VALUE := _MenuNames[ 1 ]
   MenuDesigner.Text4.VALUE := _MenuImages[ 1 ]
   MenuDesigner.check1.VALUE := _MenuChecked[ 1 ]

   setfocus ( GetControlHandle ( 'Text1', 'MenuDesigner' ) )

   MenuDesigner.CENTER
   MenuDesigner.ACTIVATE

   DoMethod ( DesignForm, 'SetFocus' )
   DrawGrid()

RETURN

*------------------------------------------------------------------------------*
STATIC FUNCTION PointCount ( String )
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL PointCount := 0

   FOR i := 1 TO HMG_LEN ( String )
      IF hb_USubStr ( String, i, 1 ) == '.'
         PointCount++
      ELSE
         EXIT
      ENDIF
   NEXT i

RETURN PointCount

*------------------------------------------------------------------------------*
PROCEDURE CaptionChange
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL PointCount
   LOCAL String


   IF _InsertActive == .F.

      i := MenuDesigner.List1.VALUE

      IF i == 0
         RETURN
      ENDIF

      String := MenuDesigner.List1.Item ( i )

      PointCount := PointCount( String )

      MenuDesigner.List1.Item ( i ) := Replicate ( '.', PointCount ) + AllTrim ( MenuDesigner.Text1.Value )

      MenuDesigner.List1.VALUE := i

      _MenuCaptions[ i ] := MenuDesigner.Text1.VALUE

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE ActionChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _MenuActions[ i ] := MenuDesigner.Text2.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE NameChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _MenuNames[ i ] := MenuDesigner.Text3.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE ImageChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _MenuImages[ i ] := MenuDesigner.Text4.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE CheckedChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _MenuChecked[ i ] := MenuDesigner.Check1.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE Indent
*------------------------------------------------------------------------------*
   LOCAL i

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   MenuDesigner.List1.Item ( i ) := '....' + AllTrim ( MenuDesigner.List1.Item ( i ) )

   MenuDesigner.List1.VALUE := i

RETURN

*------------------------------------------------------------------------------*
PROCEDURE UnIndent
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL String

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   String := MenuDesigner.List1.Item ( i )

   IF hb_ULeft ( String, 1 ) != '.'
      RETURN
   ENDIF

   MenuDesigner.List1.Item ( i ) := hb_URight ( String, HMG_LEN( String ) - 4 )

   MenuDesigner.List1.VALUE := i

RETURN

*------------------------------------------------------------------------------*
PROCEDURE MenuNext
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL p

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := MenuDesigner.List1.ItemCount

   IF i + 1 > c

      if ! Empty ( MenuDesigner.List1.Item ( i ) )

         p := PointCount ( MenuDesigner.List1.Item ( i ) )

         IF HMG_LEN ( AllTrim ( MenuDesigner.List1.Item ( i ) ) ) <> p

            MenuDesigner.List1.additem( Replicate ( '.', p ) )

            AAdd ( _MenuCaptions, '' )
            AAdd ( _MenuActions, '' )
            AAdd ( _MenuNames, '' )
            AAdd ( _MenuImages, '' )
            AAdd ( _MenuChecked, .F. )

         ENDIF

      ENDIF

   ENDIF

   MenuDesigner.List1.VALUE := i + 1

   MenuDesigner.Text1.VALUE := PointRemove( MenuDesigner.List1.Item( i + 1 ) )

   setfocus ( GetControlHandle ( 'Text1', 'MenuDesigner' ) )

   IF HMG_LEN ( _MenuActions ) >= i + 1

      MenuDesigner.Text2.VALUE := _MenuActions[ i + 1 ]
      MenuDesigner.Text3.VALUE := _MenuNames[ i + 1 ]
      MenuDesigner.Text4.VALUE := _MenuImages[ i + 1 ]
      MenuDesigner.check1.VALUE := _MenuChecked[ i + 1 ]

   ELSE

      MenuDesigner.Text2.VALUE := ''
      MenuDesigner.Text3.VALUE := ''
      MenuDesigner.Text4.VALUE := ''
      MenuDesigner.check1.VALUE := .F.

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE MenuPrior
*------------------------------------------------------------------------------*
   LOCAL i

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   MenuDesigner.List1.VALUE := i - 1

   MenuDesigner.Text1.VALUE := PointRemove( MenuDesigner.List1.Item( i - 1 ) )

   setfocus ( GetControlHandle ( 'Text1', 'MenuDesigner' ) )

   MenuDesigner.Text2.VALUE := _MenuActions[ i - 1 ]
   MenuDesigner.Text3.VALUE := _MenuNames[ i - 1 ]
   MenuDesigner.Text4.VALUE := _MenuImages[ i - 1 ]
   MenuDesigner.check1.VALUE := _MenuChecked[ i - 1 ]

RETURN

*------------------------------------------------------------------------------*
PROCEDURE MenuDelete
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := MenuDesigner.List1.ItemCount

   IF c == 1
      MenuDesigner.List1.Item ( 1 ) := ""
      MenuDesigner.List1.VALUE := 1

      MenuDesigner.Text1.VALUE := ''
      MenuDesigner.Text2.VALUE := ''
      MenuDesigner.Text3.VALUE := ''
      MenuDesigner.Text4.VALUE := ''
      MenuDesigner.check1.VALUE := .F.

      ASize ( _MenuCaptions, 0 )
      ASize ( _MenuActions, 0 )
      ASize ( _MenuNames, 0 )
      ASize ( _MenuImages, 0 )
      ASize ( _MenuChecked, 0 )

      RETURN
   ENDIF

   MenuDesigner.List1.DeleteItem( i )

   ADel ( _MenuCaptions, i )
   ADel ( _MenuActions, i )
   ADel ( _MenuNames, i )
   ADel ( _MenuImages, i )
   ADel ( _MenuChecked, i )

   ASize ( _MenuCaptions, HMG_LEN( _MenuCaptions ) - 1 )
   ASize ( _MenuActions, HMG_LEN( _MenuActions ) - 1 )
   ASize ( _MenuNames, HMG_LEN( _MenuNames ) - 1 )
   ASize ( _MenuImages, HMG_LEN( _MenuImages ) - 1 )
   ASize ( _MenuChecked, HMG_LEN( _MenuChecked ) - 1 )

   c := c - 1

   IF i > c
      MenuDesigner.List1.VALUE := c
      MenuDesigner.Text1.VALUE := PointRemove( MenuDesigner.List1.Item( c ) )
      MenuDesigner.Text2.VALUE := _MenuActions[ c ]
      MenuDesigner.Text3.VALUE := _MenuNames[ c ]
      MenuDesigner.Text4.VALUE := _MenuImages[ c ]
      MenuDesigner.check1.VALUE := _MenuChecked[ c ]

   ELSE
      MenuDesigner.List1.VALUE := i
      MenuDesigner.Text1.VALUE := PointRemove( MenuDesigner.List1.Item( i ) )
      MenuDesigner.Text2.VALUE := _MenuActions[ i ]
      MenuDesigner.Text3.VALUE := _MenuNames[ i ]
      MenuDesigner.Text4.VALUE := _MenuImages[ i ]
      MenuDesigner.check1.VALUE := _MenuChecked[ i ]

   ENDIF

   setfocus ( GetControlHandle ( 'Text1', 'MenuDesigner' ) )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE MenuInsert
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL aTemp := {}
   LOCAL x
   LOCAL P

   _InsertActive := .T.

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := MenuDesigner.List1.ItemCount

   P := PointCount( MenuDesigner.List1.Item ( i ) )

   FOR x := 1 TO c

      IF x == i
         AAdd ( aTemp, Replicate ( '.', P ) )
      ENDIF

      AAdd ( aTemp, MenuDesigner.List1.Item ( x ) )

   NEXT x


   MenuDesigner.List1.DeleteAllItems

   FOR x := 1 TO HMG_LEN ( aTemp )
      MenuDesigner.List1.AddItem ( aTemp[ x ] )
   NEXT x

   MenuDesigner.List1.VALUE := i

   AAdd ( _MenuCaptions, '' )
   AAdd ( _MenuActions, '' )
   AAdd ( _MenuNames, '' )
   AAdd ( _MenuImages, '' )
   AAdd ( _MenuChecked, .F. )

   AIns ( _MenuCaptions, i )
   AIns ( _MenuActions, i )
   AIns ( _MenuNames, i )
   AIns ( _MenuImages, i )
   AIns ( _MenuChecked, i )

   _MenuCaptions[ i ] := ''
   _MenuActions[ i ] := ''
   _MenuNames[ i ] := ''
   _MenuImages[ i ] := ''
   _MenuChecked[ i ] := .F.

   MenuDesigner.Text1.VALUE := ''
   MenuDesigner.Text2.VALUE := ''
   MenuDesigner.Text3.VALUE := ''
   MenuDesigner.Text4.VALUE := ''
   MenuDesigner.check1.VALUE := .F.


   setfocus ( GetControlHandle ( 'Text1', 'MenuDesigner' ) )


   _InsertActive := .F.

RETURN

*------------------------------------------------------------------------------*
PROCEDURE MenuChange
*------------------------------------------------------------------------------*
   LOCAL i


   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
   MenuDesigner.Text2.VALUE := _MenuActions[ i ]
   MenuDesigner.Text3.VALUE := _MenuNames[ i ]
   MenuDesigner.Text4.VALUE := _MenuImages[ i ]
   MenuDesigner.check1.VALUE := _MenuChecked[ i ]

RETURN

*------------------------------------------------------------------------------*
FUNCTION PointRemove ( String )
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL PointCount := 0

   String := AllTrim ( String )

   FOR i := 1 TO HMG_LEN ( String )
      IF hb_USubStr ( String, i, 1 ) == '.'
         PointCount++
      ELSE
         EXIT
      ENDIF
   NEXT i

   String := AllTrim ( hb_URight ( String, HMG_LEN( String ) - PointCount ) )

RETURN String

*------------------------------------------------------------------------------*
PROCEDURE MenuMoveUp
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL Previous
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   Previous := MenuDesigner.List1.Item( i - 1 )
   Current := MenuDesigner.List1.Item( i )

   MenuDesigner.List1.Item( i ) := Previous
   MenuDesigner.List1.Item( i - 1 ) := Current

   MenuDesigner.List1.VALUE := i - 1

   aux0 := _MenuCaptions[ i ]
   aux1 := _MenuActions[ i ]
   aux2 := _MenuNames[ i ]
   aux3 := _MenuImages[ i ]
   aux4 := _MenuChecked[ i ]

   _MenuCaptions[ i ] := _MenuCaptions[ i - 1 ]
   _MenuActions[ i ] := _MenuActions[ i - 1 ]
   _MenuNames[ i ] := _MenuNames[ i - 1 ]
   _MenuImages[ i ] := _MenuImages[ i - 1 ]
   _MenuChecked[ i ] := _MenuChecked[ i - 1 ]

   _MenuCaptions[ i - 1 ] := aux0
   _MenuActions[ i - 1 ] := aux1
   _MenuNames[ i - 1 ] := aux2
   _MenuImages[ i - 1 ] := aux3
   _MenuChecked[ i - 1 ] := aux4

RETURN

*------------------------------------------------------------------------------*
PROCEDURE MenuMoveDown
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL NEXT
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4

   i := MenuDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := MenuDesigner.List1.ItemCount

   IF i == c
      RETURN
   ENDIF

   Current := MenuDesigner.List1.Item( i )
   NEXT := MenuDesigner.List1.Item( i + 1 )

   MenuDesigner.List1.Item( i ) := NEXT
   MenuDesigner.List1.Item( i + 1 ) := Current

   MenuDesigner.List1.VALUE := i + 1

   aux0 := _MenuCaptions[ i ]
   aux1 := _MenuActions[ i ]
   aux2 := _MenuNames[ i ]
   aux3 := _MenuImages[ i ]
   aux4 := _MenuChecked[ i ]

   _MenuCaptions[ i ] := _MenuCaptions[ i + 1 ]
   _MenuActions[ i ] := _MenuActions[ i + 1 ]
   _MenuNames[ i ] := _MenuNames[ i + 1 ]
   _MenuImages[ i ] := _MenuImages[ i + 1 ]
   _MenuChecked[ i ] := _MenuChecked[ i + 1 ]

   _MenuCaptions[ i + 1 ] := aux0
   _MenuActions[ i + 1 ] := aux1
   _MenuNames[ i + 1 ] := aux2
   _MenuImages[ i + 1 ] := aux3
   _MenuChecked[ i + 1 ] := aux4

RETURN

*------------------------------------------------------------------------------*
PROCEDURE BuildMenu
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL j
   LOCAL MENU
   LOCAL CurrentLevel
   LOCAL NextLevel


   IF MenuDesigner.List1.ItemCount <= 1
      MenuDesigner.RELEASE
      RETURN
   ENDIF

   MENU := Space( 4 ) + 'DEFINE MAIN MENU' + CRLF

   FOR i := 1 TO MenuDesigner.List1.ItemCount

      // Determine Levels

      CurrentLevel := Int ( PointCount ( MenuDesigner.List1.Item( i ) ) / 4 )

      IF i + 1 <= MenuDesigner.List1.ItemCount
         NextLevel := Int ( PointCount ( MenuDesigner.List1.Item( i + 1 ) ) / 4 )
      ELSE
         NextLevel := 0
      ENDIF

      IF NextLevel - CurrentLevel > 1
         MsgStop ( aMsgs[ 118 ], 'HMG IDE' )
         MenuDesigner.List1.VALUE := i
         MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
         MenuDesigner.Text2.VALUE := _MenuActions[ i ]
         MenuDesigner.Text3.VALUE := _MenuNames[ i ]
         MenuDesigner.Text4.VALUE := _MenuImages[ i ]
         MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
         RETURN
      ENDIF

      // Create Command

      If ! Empty( PointRemove ( MenuDesigner.List1.Item( i ) ) )

         IF NextLevel > CurrentLevel ;
               .OR. ;
               CurrentLevel == 0

            // Popup

            if ! Empty( _MenuActions[ i ] )
               MsgStop ( aMsgs[ 119 ], 'HMG IDE' )
               MenuDesigner.List1.VALUE := i
               MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
               MenuDesigner.Text2.VALUE := _MenuActions[ i ]
               MenuDesigner.Text3.VALUE := _MenuNames[ i ]
               MenuDesigner.Text4.VALUE := _MenuImages[ i ]
               MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
               RETURN
            ENDIF

            if ! Empty( _MenuImages[ i ] )
               MsgStop ( aMsgs[ 120 ], 'HMG IDE' )
               MenuDesigner.List1.VALUE := i
               MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
               MenuDesigner.Text2.VALUE := _MenuActions[ i ]
               MenuDesigner.Text3.VALUE := _MenuNames[ i ]
               MenuDesigner.Text4.VALUE := _MenuImages[ i ]
               MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
               RETURN
            ENDIF

            IF _MenuChecked[ i ] == .T.
               MsgStop ( aMsgs[ 121 ], 'HMG IDE' )
               MenuDesigner.List1.VALUE := i
               MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
               MenuDesigner.Text2.VALUE := _MenuActions[ i ]
               MenuDesigner.Text3.VALUE := _MenuNames[ i ]
               MenuDesigner.Text4.VALUE := _MenuImages[ i ]
               MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
               RETURN
            ENDIF

            MENU := MENU + Space( 8 ) + Space( CurrentLevel * 4 ) + 'DEFINE POPUP ' + Chr( 34 ) + _MenuCaptions[ i ] + Chr( 34 ) + if ( ! Empty( _MenuNames[ i ] ), ' NAME ' + _MenuNames[ i ], '' ) + CRLF

         ELSE

            IF _MenuCaptions[ i ] = '-'

               // Separator

               if ! Empty( _MenuNames[ i ] )
                  MsgStop ( aMsgs[ 122 ], 'HMG IDE' )
                  MenuDesigner.List1.VALUE := i
                  MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
                  MenuDesigner.Text2.VALUE := _MenuActions[ i ]
                  MenuDesigner.Text3.VALUE := _MenuNames[ i ]
                  MenuDesigner.Text4.VALUE := _MenuImages[ i ]
                  MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
                  RETURN
               ENDIF

               if ! Empty( _MenuActions[ i ] )
                  MsgStop ( aMsgs[ 123 ], 'HMG IDE' )
                  MenuDesigner.List1.VALUE := i
                  MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
                  MenuDesigner.Text2.VALUE := _MenuActions[ i ]
                  MenuDesigner.Text3.VALUE := _MenuNames[ i ]
                  MenuDesigner.Text4.VALUE := _MenuImages[ i ]
                  MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
                  RETURN
               ENDIF

               if ! Empty( _MenuImages[ i ] )
                  MsgStop ( aMsgs[ 124 ], 'HMG IDE' )
                  MenuDesigner.List1.VALUE := i
                  MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
                  MenuDesigner.Text2.VALUE := _MenuActions[ i ]
                  MenuDesigner.Text3.VALUE := _MenuNames[ i ]
                  MenuDesigner.Text4.VALUE := _MenuImages[ i ]
                  MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
                  RETURN
               ENDIF

               IF _MenuChecked[ i ] == .T.
                  MsgStop ( aMsgs[ 125 ], 'HMG IDE' )
                  MenuDesigner.List1.VALUE := i
                  MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
                  MenuDesigner.Text2.VALUE := _MenuActions[ i ]
                  MenuDesigner.Text3.VALUE := _MenuNames[ i ]
                  MenuDesigner.Text4.VALUE := _MenuImages[ i ]
                  MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
                  RETURN
               ENDIF

               MENU := MENU + Space( 8 ) + Space( CurrentLevel * 4 ) + 'SEPARATOR' + CRLF

            ELSE

               // Item

               IF Empty( _MenuActions[ i ] )
                  MsgStop ( aMsgs[ 126 ], 'HMG IDE' )
                  MenuDesigner.List1.VALUE := i
                  MenuDesigner.Text1.VALUE := PointRemove ( MenuDesigner.List1.Item( i ) )
                  MenuDesigner.Text2.VALUE := _MenuActions[ i ]
                  MenuDesigner.Text3.VALUE := _MenuNames[ i ]
                  MenuDesigner.Text4.VALUE := _MenuImages[ i ]
                  MenuDesigner.Check1.VALUE := _MenuChecked[ i ]
                  RETURN
               ENDIF

               MENU := MENU + Space( 8 ) + Space( CurrentLevel * 4 ) + 'MENUITEM ' + Chr( 34 ) + _MenuCaptions[ i ] + Chr( 34 ) + ' ACTION ' + _MenuActions[ i ] + if ( ! Empty( _MenuNames[ i ] ), ' NAME ' + _MenuNames[ i ], '' ) + if ( ! Empty( _MenuImages[ i ] ), ' IMAGE ' + Chr( 34 ) + _MenuImages[ i ] + Chr( 34 ), '' ) + if ( _MenuChecked[ i ] == .T., ' CHECKED', '' ) + CRLF

            ENDIF

         ENDIF

         // Close Popups If Needed

         IF NextLevel < CurrentLevel

            FOR j := 1 To ( CurrentLevel - NextLevel )
               MENU := MENU + Space( 8 ) + Space( ( ( CurrentLevel * 4 ) - ( j * 4 ) ) ) + 'END POPUP' + CRLF
            NEXT j

         ELSEIF NextLevel == 0 .AND. CurrentLevel == 0

            MENU := MENU + Space( 8 ) + 'END POPUP' + CRLF

         ENDIF

      ENDIF

   NEXT i

   MENU := MENU + Space( 4 ) + 'END MENU' + CRLF

   _hmgide_CurrentMainMenu := MENU

   DesignFormModified := .T.

   MenuDesigner.RELEASE

RETURN
*------------------------------------------------------------------------------*
FUNCTION FillMenuList()
*------------------------------------------------------------------------------*
   LOCAL aList := {}
   LOCAL LineCount
   LOCAL Line
   LOCAL x
   LOCAL y
   LOCAL CurrentLevel := 0
   LOCAL i
   LOCAL CAPTION
   LOCAL ACTION
   LOCAL NAME
   LOCAL IMAGE
   LOCAL Checked

   IF Empty ( _hmgide_CurrentMainMenu )
      aList := { '' }
   ELSE

      _MenuCaptions := {}
      _MenuNames := {}
      _MenuActions := {}
      _MenuImages := {}
      _MenuChecked := {}

      LineCount := MLCount ( _hmgide_CurrentMainMenu )

      FOR i := 1 TO LineCount

         Line := AllTrim ( MemoLine ( _hmgide_CurrentMainMenu, 1024, i, 4, .T. ) )

         IF HMG_UPPER ( Line ) = 'DEFINE POPUP '

            CurrentLevel++

            Line := hb_URight ( Line, HMG_LEN( Line ) - 13 )

            // Get Caption
            // x := HB_UAT ( '"' , Line )
            y := hb_utf8RAt ( '"', Line )
            CAPTION := hb_USubStr ( Line, 2, y - 2 )

            // Get Name
            x := hb_utf8RAt ( '" NAME ', HMG_UPPER( Line ) )
            y := HMG_LEN ( Line )

            IF x > 0
               NAME := hb_USubStr ( Line, x + 7, y - ( x + 6 ) )
            ELSE
               NAME := ''
            ENDIF

            AAdd ( aList, Replicate ( '.', ( CurrentLevel - 1 ) * 4 ) + Caption )

            AAdd ( _MenuCaptions, Caption )
            AAdd ( _MenuNames, Name )
            AAdd ( _MenuActions, '' )
            AAdd ( _MenuImages, '' )
            AAdd ( _MenuChecked, .F. )

         ELSEIF HMG_UPPER ( Line ) = 'MENUITEM '

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 9 ) )

            // Get Checked
            IF hb_URight ( HMG_UPPER ( Line ), 8 ) == ' CHECKED'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 8 ) )
               Checked := .T.
            ELSE
               Checked := .F.
            ENDIF

            // Get Image

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' IMAGE "', HMG_UPPER( Line ) )

               IF x > 0
                  IMAGE := AllTrim ( hb_USubStr ( Line, x + 8, HMG_LEN( Line ) - ( x + 8 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  IMAGE := ''
               ENDIF

            ELSE
               IMAGE := ''
            ENDIF

            // Get Name

            x := hb_utf8RAt ( ' NAME ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               NAME := AllTrim ( hb_USubStr ( Line, x + 6, HMG_LEN( Line ) ) )
               Line := AllTrim ( hb_ULeft ( Line, x ) )
            ELSE
               NAME := ''
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               ACTION := hb_USubStr ( Line, x + 8, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               ACTION := ''
            ENDIF

            // Get Caption

            Line := AllTrim ( Line )

            CAPTION := hb_ULeft ( Line, HMG_LEN( Line ) - 1 )

            CAPTION := hb_URight ( CAPTION, HMG_LEN( Caption ) - 1 )

            AAdd ( aList, Replicate ( '.', CurrentLevel * 4 ) + Caption )

            AAdd ( _MenuCaptions, Caption )
            AAdd ( _MenuActions, Action )
            AAdd ( _MenuNames, Name )
            AAdd ( _MenuImages, Image )
            AAdd ( _MenuChecked, Checked )

         ELSEIF HMG_UPPER ( Line ) = 'END POPUP'

            CurrentLevel--

         ELSEIF HMG_UPPER ( Line ) = 'SEPARATOR'

            AAdd ( aList, Replicate ( '.', CurrentLevel * 4 ) + '-' )

            AAdd ( _MenuCaptions, '-' )
            AAdd ( _MenuActions, '' )
            AAdd ( _MenuNames, '' )
            AAdd ( _MenuImages, '' )
            AAdd ( _MenuChecked, .F. )

         ENDIF

      NEXT i

   ENDIF

RETURN aList

*------------------------------------------------------------------------------*
FUNCTION FillContextMenuList( cType, nDropDownArrayPos )
*------------------------------------------------------------------------------*
   LOCAL aList := {}
   LOCAL LineCount
   LOCAL Line := ''
   LOCAL x
   LOCAL i
   LOCAL CAPTION
   LOCAL ACTION
   LOCAL NAME
   LOCAL IMAGE
   LOCAL Checked

   IF Empty ( if ( cType == 'C', _hmgide_CurrentContextMenu, if ( cType == 'N', _hmgide_CurrentNotifyMenu, _hmgide_aDropDownMenus[ nDropDownArrayPos ] ) ) )
      aList := { '' }
   ELSE

      _MenuCaptions := {}
      _MenuNames := {}
      _MenuActions := {}
      _MenuImages := {}
      _MenuChecked := {}

      LineCount := if ( cType == 'C', MLCount ( _hmgide_CurrentContextMenu ), if ( cType == 'N', MLCount ( _hmgide_CurrentNotifyMenu ), MLCount ( _hmgide_aDropDownMenus[ nDropDownArrayPos ] ) ) )

      FOR i := 1 TO LineCount

         IF cType == 'C'

            Line := AllTrim ( MemoLine ( _hmgide_CurrentContextMenu, 1024, i, 4, .T. ) )

         ELSEIF cType == 'N'

            Line := AllTrim ( MemoLine ( _hmgide_CurrentNotifyMenu, 1024, i, 4, .T. ) )

         ELSEIF cType == 'D'

            Line := AllTrim ( MemoLine ( _hmgide_aDropDownMenus[ nDropDownArrayPos ], 1024, i, 4, .T. ) )

         ENDIF

         IF HMG_UPPER ( Line ) = 'MENUITEM '

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 9 ) )

            // Get Checked
            IF hb_URight ( HMG_UPPER ( Line ), 8 ) == ' CHECKED'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 8 ) )
               Checked := .T.
            ELSE
               Checked := .F.
            ENDIF

            // Get Image

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' IMAGE "', HMG_UPPER( Line ) )

               IF x > 0
                  IMAGE := AllTrim ( hb_USubStr ( Line, x + 8, HMG_LEN( Line ) - ( x + 8 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  IMAGE := ''
               ENDIF

            ELSE
               IMAGE := ''
            ENDIF

            // Get Name

            x := hb_utf8RAt ( ' NAME ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               NAME := AllTrim ( hb_USubStr ( Line, x + 6, HMG_LEN( Line ) ) )
               Line := AllTrim ( hb_ULeft ( Line, x ) )
            ELSE
               NAME := ''
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               ACTION := hb_USubStr ( Line, x + 8, 255 )
               Line := hb_ULeft ( Line, x )
            ELSE
               ACTION := ''
            ENDIF

            // Get Caption

            Line := AllTrim ( Line )

            CAPTION := hb_ULeft ( Line, HMG_LEN( Line ) - 1 )

            CAPTION := hb_URight ( CAPTION, HMG_LEN( Caption ) - 1 )

            AAdd ( aList, Caption )

            AAdd ( _MenuCaptions, Caption )
            AAdd ( _MenuActions, Action )
            AAdd ( _MenuNames, Name )
            AAdd ( _MenuImages, Image )
            AAdd ( _MenuChecked, Checked )


         ELSEIF HMG_UPPER ( Line ) = 'SEPARATOR'

            AAdd ( aList, '-' )

            AAdd ( _MenuCaptions, '-' )
            AAdd ( _MenuActions, '' )
            AAdd ( _MenuNames, '' )
            AAdd ( _MenuImages, '' )
            AAdd ( _MenuChecked, .F. )

         ENDIF

      NEXT i

   ENDIF

RETURN aList

// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
PROCEDURE ToolBarBuilder
*------------------------------------------------------------------------------*
   PRIVATE _TbName := 'ToolBar_1'
   PRIVATE _TbNames := {}
   PRIVATE _TbCaptions := {}
   PRIVATE _TbPictures := {}
   PRIVATE _TbActions := {}
   PRIVATE _TbToolTips := {}
   PRIVATE _TbSeparators := {}
   PRIVATE _TbChecks := {}
   PRIVATE _TbAutoSizes := {}
   PRIVATE _TbGroups := {}
   PRIVATE _TbDropDowns := {}
   PRIVATE _TbWholeDropDowns := {}

   PRIVATE _TbFontName := 'Arial'
   PRIVATE _TbFontSize := 9
   PRIVATE _TbFontBold := .F.
   PRIVATE _TbFontItalic := .F.
   PRIVATE _TbFontUnderLine := .F.
   PRIVATE _TbFontStrikeout := .F.
   PRIVATE _TbButtonWidth := '64'
   PRIVATE _TbButtonHeight := '64'
   PRIVATE _TbButtonImageWidth := ''
   PRIVATE _TbButtonImageHeight := ''
   PRIVATE _TbToolTip := ''
   PRIVATE _TbFlat := .T.
   PRIVATE _TbBottom := .F.
   PRIVATE _TbRightText := .F.
   PRIVATE _TbBorder := .F.
   PRIVATE _TbStrictWidth := .F.


   if ! _IsWIndowDefined ( DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   if ! Empty ( _hmgide_CurrentSplitBox )
      MsgStop ( 'This Windows has a SplitBox. You must delete it prior to create a Main ToolBar', 'HMG IDE' )
      RETURN
   ENDIF

   AAdd ( _TbNames, '' )
   AAdd ( _TbCaptions, '' )
   AAdd ( _TbPictures, '' )
   AAdd ( _TbActions, '' )
   AAdd ( _TbToolTips, '' )
   AAdd ( _TbSeparators, .F. )
   AAdd ( _TbChecks, .F. )
   AAdd ( _TbAutoSizes, .F. )
   AAdd ( _TbGroups, .F. )
   AAdd ( _TbDropDowns, .F. )
   AAdd ( _TbWholeDropDowns, .F. )

   DEFINE WINDOW TbDesigner ;
         AT 0, 0 ;
         WIDTH 370 ;
         HEIGHT GetTitleHeight() + 460 + 2 ;
         TITLE 'ToolBar Builder' ;
         MODAL ;
         NOSIZE

      ON KEY ESCAPE ACTION ( ;
         ThisWindow.RELEASE ;
         )

      DEFINE FRAME Frame1
         ROW 9
         COL 10
         WIDTH 225
         HEIGHT 256
      END FRAME

      DEFINE LABEL Label1
         ROW 23
         COL 25
         WIDTH 50
         VALUE 'Name:'
      END LABEL
      DEFINE TEXTBOX Text1
         ROW 20
         COL 100
         VALUE ''
         ONCHANGE TbNameChange()
      END TEXTBOX

      DEFINE LABEL Label2
         ROW 53
         COL 25
         WIDTH 50
         VALUE 'Caption:'
      END LABEL
      DEFINE TEXTBOX Text2
         ROW 50
         COL 100
         VALUE ''
         ONCHANGE TbCaptionChange()
      END TEXTBOX

      DEFINE LABEL Label3
         ROW 83
         COL 25
         WIDTH 50
         VALUE 'Picture:'
      END LABEL
      DEFINE TEXTBOX Text3
         ROW 80
         COL 100
         VALUE ''
         ONCHANGE TbPictureChange()
      END TEXTBOX

      DEFINE LABEL Label4
         ROW 113
         COL 25
         WIDTH 50
         VALUE 'Action:'
      END LABEL
      DEFINE TEXTBOX Text4
         ROW 110
         COL 100
         VALUE ''
         ONCHANGE TbActionChange()
      END TEXTBOX

      DEFINE LABEL Label4a
         ROW 143
         COL 25
         WIDTH 50
         VALUE 'ToolTip:'
      END LABEL
      DEFINE TEXTBOX Text4a
         ROW 140
         COL 100
         VALUE ''
         ONCHANGE TbToolTipChange()
      END TEXTBOX


      DEFINE LABEL Label5
         ROW 173
         COL 25
         WIDTH 60
         VALUE 'Separator:'
      END LABEL
      DEFINE CHECKBOX Check5
         ROW 170
         COL 100
         WIDTH 20
         VALUE .F.
         ONCHANGE TbSeparatorChange()
      END CHECKBOX

      DEFINE LABEL Label6
         ROW 203
         COL 25
         WIDTH 50
         VALUE 'AutoSize:'
      END LABEL
      DEFINE CHECKBOX Check6
         ROW 200
         COL 100
         WIDTH 20
         VALUE .F.
         ONCHANGE TbAutoSizeChange()
      END CHECKBOX

      DEFINE LABEL Label7
         ROW 173
         COL 130
         WIDTH 50
         VALUE 'Check:'
      END LABEL
      DEFINE CHECKBOX Check7
         ROW 170
         COL 205
         WIDTH 20
         VALUE .F.
         ONCHANGE TbCheckChange()
      END CHECKBOX

      DEFINE LABEL Label8
         ROW 203
         COL 130
         WIDTH 50
         VALUE 'Group:'
      END LABEL
      DEFINE CHECKBOX Check8
         ROW 200
         COL 205
         WIDTH 20
         VALUE .F.
         ONCHANGE TbGroupChange()
      END CHECKBOX

      // *

      DEFINE LABEL Label9
         ROW 233
         COL 25
         WIDTH 75
         VALUE 'DropDown:'
      END LABEL
      DEFINE CHECKBOX Check9
         ROW 230
         COL 100
         WIDTH 20
         VALUE .F.
         ONCHANGE TbDropDownChange()
      END CHECKBOX

      DEFINE LABEL Label10
         ROW 233
         COL 130
         WIDTH 75
         VALUE 'W.DropDn.:'
      END LABEL
      DEFINE CHECKBOX Check10
         ROW 230
         COL 205
         WIDTH 20
         VALUE .F.
         ONCHANGE TbWholeDropDownChange()
      END CHECKBOX

      // Button Bar

      DEFINE FRAME Frame3
         ROW 272
         COL 10
         WIDTH 340
         HEIGHT 36
      END FRAME

      DEFINE BUTTON button3
         ROW 276
         COL 13
         WIDTH 61
         HEIGHT 30
         PICTURE 'UP'
         ACTION TbMoveUp()
      END BUTTON
      DEFINE BUTTON button4
         ROW 276
         COL 76
         WIDTH 61
         HEIGHT 30
         PICTURE 'DOWN'
         ACTION TbMoveDown()
      END BUTTON
      DEFINE BUTTON button5
         ROW 276
         COL 140
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 112 ]
         ACTION TbNext()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button6
         ROW 276
         COL 192
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 113 ]
         ACTION TbPrior()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button7
         ROW 276
         COL 244
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 114 ]
         ACTION TbInsert()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button8
         ROW 276
         COL 296
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 115 ]
         ACTION TbDelete()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON

      // Main List Box

      DEFINE LISTBOX List1
         ROW 315
         COL 10
         WIDTH 340
         HEIGHT 130
         ITEMS FillTbList()
         VALUE 1
         ONCHANGE TbChange()
      END LISTBOX

      // Ok / Cancel Buttons

      DEFINE BUTTON Ok
         ROW 10
         COL 250
         CAPTION aMsgs[ 116 ]
         ACTION ( BuildToolBar(), _HMG_DialogCancelled := .F. )
      END BUTTON
      DEFINE BUTTON Cancel
         ROW 40
         COL 250
         CAPTION aMsgs[ 117 ]
         ACTION ( _HMG_DialogCancelled := .T., ThisWindow.Release )
      END BUTTON

      DEFINE BUTTON Properties
         ROW 235
         COL 250
         CAPTION aMsgs[ 142 ]
         ACTION TbProperties()
      END BUTTON

   END WINDOW

   TbDesigner.List1.VALUE := 1
   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( 1 )
   TbDesigner.Text2.VALUE := _TbCaptions[ 1 ]
   TbDesigner.Text3.VALUE := _TbPictures[ 1 ]
   TbDesigner.Text4.VALUE := _TbActions[ 1 ]
   TbDesigner.Text4a.VALUE := _TbToolTips[ 1 ]

   TbDesigner.Check5.VALUE := _TbSeparators[ 1 ]
   TbDesigner.Check6.VALUE := _TbAutoSizes[ 1 ]
   TbDesigner.Check7.VALUE := _TbChecks[ 1 ]
   TbDesigner.Check8.VALUE := _TbGroups[ 1 ]

   TbDesigner.Check9.VALUE := _TbDropDowns[ 1 ]
   TbDesigner.Check10.VALUE := _TbWholeDropDowns[ 1 ]

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

   TbDesigner.CENTER
   TbDesigner.ACTIVATE

   DoMethod ( DesignForm, 'SetFocus' )

   DrawGrid()

RETURN
*------------------------------------------------------------------------------*
PROCEDURE TbToolTipChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbToolTips[ i ] := TbDesigner.Text4a.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE TbDropDownChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbDropDowns[ i ] := TbDesigner.Check9.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbWholeDropDownChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbWholeDropDowns[ i ] := TbDesigner.Check10.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbNameChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   TbDesigner.List1.Item ( i ) := AllTrim ( TbDesigner.Text1.Value )

   TbDesigner.List1.VALUE := i

   _TbNames[ i ] := TbDesigner.Text1.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbCaptionChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbCaptions[ i ] := TbDesigner.Text2.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbPictureChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbPictures[ i ] := TbDesigner.Text3.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbActionChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbActions[ i ] := TbDesigner.Text4.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbSeparatorChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbSeparators[ i ] := TbDesigner.Check5.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE TbAutoSizeChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbAutoSizes[ i ] := TbDesigner.Check6.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE TbCheckChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbChecks[ i ] := TbDesigner.Check7.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE TbGroupChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbGroups[ i ] := TbDesigner.Check8.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE TbMoveUp
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL Previous
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4
   LOCAL aux5
   LOCAL aux6
   LOCAL aux7
   LOCAL aux8
   LOCAL aux9
   LOCAL aux10


   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   Previous := TbDesigner.List1.Item( i - 1 )
   Current := TbDesigner.List1.Item( i )

   TbDesigner.List1.Item( i ) := Previous
   TbDesigner.List1.Item( i - 1 ) := Current

   TbDesigner.List1.VALUE := i - 1

   aux0 := _TbNames[ i ]
   aux1 := _TbCaptions[ i ]
   aux2 := _TbPictures[ i ]
   aux3 := _TbActions[ i ]
   aux4 := _TbSeparators[ i ]
   aux5 := _TbAutoSizes[ i ]
   aux6 := _TbChecks[ i ]
   aux7 := _TbGroups[ i ]
   aux8 := _TbDropDowns[ i ]
   aux9 := _TbWholeDropDowns[ i ]
   aux10 := _TbToolTips[ i ]

   _Tbnames[ i ] := _TbNames[ i - 1 ]
   _TbCaptions[ i ] := _TbCaptions[ i - 1 ]
   _TbPictures[ i ] := _TbPictures[ i - 1 ]
   _TbActions[ i ] := _TbActions[ i - 1 ]
   _TbSeparators[ i ] := _TbSeparators[ i - 1 ]
   _TbAutoSizes[ i ] := _TbAutoSizes[ i - 1 ]
   _TbChecks[ i ] := _TbChecks[ i - 1 ]
   _TbGroups[ i ] := _TbGroups[ i - 1 ]
   _TbDropDowns[ i ] := _TbDropDowns[ i - 1 ]
   _TbWholeDropDowns[ i ] := _TbWholeDropDowns[ i - 1 ]
   _TbToolTips[ i ] := _TbToolTips[ i - 1 ]

   _TbNames[ i - 1 ] := aux0
   _TbCaptions[ i - 1 ] := aux1
   _TbPictures[ i - 1 ] := aux2
   _TbActions[ i - 1 ] := aux3
   _TbSeparators[ i - 1 ] := aux4
   _TbAutoSizes[ i - 1 ] := aux5
   _TbChecks[ i - 1 ] := aux6
   _TbGroups[ i - 1 ] := aux7
   _TbDropDowns[ i - 1 ] := aux8
   _TbWholeDropDowns[ i - 1 ] := aux9
   _TbToolTips[ i - 1 ] := aux10

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbMoveDown
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL NEXT
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4
   LOCAL aux5
   LOCAL aux6
   LOCAL aux7
   LOCAL aux8
   LOCAL aux9
   LOCAL aux10

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   IF i == c
      RETURN
   ENDIF

   Current := TbDesigner.List1.Item( i )
   NEXT := TbDesigner.List1.Item( i + 1 )

   TbDesigner.List1.Item( i ) := NEXT
   TbDesigner.List1.Item( i + 1 ) := Current

   TbDesigner.List1.VALUE := i + 1

   aux0 := _TbNames[ i ]
   aux1 := _TbCaptions[ i ]
   aux2 := _TbPictures[ i ]
   aux3 := _TbActions[ i ]
   aux4 := _TbSeparators[ i ]
   aux5 := _TbAutoSizes[ i ]
   aux6 := _TbChecks[ i ]
   aux7 := _TbGroups[ i ]
   aux8 := _TbDropDowns[ i ]
   aux9 := _TbWholeDropDowns[ i ]
   aux10 := _TbToolTips[ i ]

   _TbNames[ i ] := _TbNames[ i + 1 ]
   _TbCaptions[ i ] := _TbCaptions[ i + 1 ]
   _TbPictures[ i ] := _TbPictures[ i + 1 ]
   _TbActions[ i ] := _TbActions[ i + 1 ]
   _TbSeparators[ i ] := _TbSeparators[ i + 1 ]
   _TbAutoSizes[ i ] := _TbAutoSizes[ i + 1 ]
   _TbChecks[ i ] := _TbChecks[ i + 1 ]
   _TbGroups[ i ] := _TbGroups[ i + 1 ]
   _TbDropDowns[ i ] := _TbDropDowns[ i + 1 ]
   _TbWholeDropDowns[ i ] := _TbWholeDropDowns[ i + 1 ]
   _TbToolTips[ i ] := _TbToolTips[ i + 1 ]

   _TbNames[ i + 1 ] := aux0
   _TbCaptions[ i + 1 ] := aux1
   _TbPictures[ i + 1 ] := aux2
   _TbActions[ i + 1 ] := aux3
   _TbSeparators[ i + 1 ] := aux4
   _TbAutoSizes[ i + 1 ] := aux5
   _TbChecks[ i + 1 ] := aux6
   _TbGroups[ i + 1 ] := aux7
   _TbDropDowns[ i + 1 ] := aux8
   _TbWholeDropDowns[ i + 1 ] := aux9
   _TbToolTips[ i + 1 ] := aux10

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbNext
*------------------------------------------------------------------------------*
   LOCAL i, c

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   IF i + 1 > c

      if ! Empty ( TbDesigner.List1.Item ( i ) )

         TbDesigner.List1.additem( '' )

         AAdd ( _TbNames, '' )
         AAdd ( _TbCaptions, '' )
         AAdd ( _TbPictures, '' )
         AAdd ( _TbActions, '' )
         AAdd ( _TbSeparators, .F. )
         AAdd ( _TbAutoSizes, .F. )
         AAdd ( _TbChecks, .F. )
         AAdd ( _TbGroups, .F. )
         AAdd ( _TbDropDowns, .F. )
         AAdd ( _TbWholeDropDowns, .F. )
         AAdd ( _TbToolTips, '' )

      ENDIF

   ENDIF

   TbDesigner.List1.VALUE := i + 1

   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i + 1 )

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

   IF HMG_LEN ( _TbActions ) >= i + 1

      TbDesigner.Text2.VALUE := _TbCaptions[ i + 1 ]
      TbDesigner.Text3.VALUE := _TbPictures[ i + 1 ]
      TbDesigner.Text4.VALUE := _TbActions[ i + 1 ]
      TbDesigner.Text4a.VALUE := _TbToolTips[ i + 1 ]

      TbDesigner.Check5.VALUE := _TbSeparators[ i + 1 ]
      TbDesigner.Check6.VALUE := _TbAutoSizes[ i + 1 ]
      TbDesigner.Check7.VALUE := _TbChecks[ i + 1 ]
      TbDesigner.Check8.VALUE := _TbGroups[ i + 1 ]

      TbDesigner.Check9.VALUE := _TbDropDowns[ i + 1 ]
      TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i + 1 ]

   ELSE

      TbDesigner.Text2.VALUE := ''
      TbDesigner.Text3.VALUE := ''
      TbDesigner.Text4.VALUE := ''
      TbDesigner.Text4a.VALUE := ''

      TbDesigner.Check5.VALUE := .F.
      TbDesigner.Check6.VALUE := .F.
      TbDesigner.Check7.VALUE := .F.
      TbDesigner.Check8.VALUE := .F.

      TbDesigner.Check9.VALUE := .F.
      TbDesigner.Check10.VALUE := .F.

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbPrior
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   TbDesigner.List1.VALUE := i - 1

   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i - 1 )

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

   TbDesigner.Text2.VALUE := _TbCaptions[ i - 1 ]
   TbDesigner.Text3.VALUE := _TbPictures[ i - 1 ]
   TbDesigner.Text4.VALUE := _TbActions[ i - 1 ]
   TbDesigner.Text4a.VALUE := _TbToolTips[ i - 1 ]

   TbDesigner.Check5.VALUE := _TbSeparators[ i - 1 ]
   TbDesigner.Check6.VALUE := _TbAutoSizes[ i - 1 ]
   TbDesigner.Check7.VALUE := _TbChecks[ i - 1 ]
   TbDesigner.Check8.VALUE := _TbGroups[ i - 1 ]

   TbDesigner.Check9.VALUE := _TbDropDowns[ i - 1 ]
   TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i - 1 ]

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbDelete
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   IF c == 1
      TbDesigner.List1.Item ( 1 ) := ""
      TbDesigner.List1.VALUE := 1
      RETURN
   ENDIF

   TbDesigner.List1.DeleteItem( i )

   ADel ( _TbNames, i )
   ADel ( _TbCaptions, i )
   ADel ( _TbPictures, i )
   ADel ( _TbActions, i )
   ADel ( _TbToolTips, i )

   ADel ( _TbSeparators, i )
   ADel ( _TbAutoSizes, i )
   ADel ( _TbChecks, i )
   ADel ( _TbGroups, i )

   ADel ( _TbDropDowns, i )
   ADel ( _TbWholeDropDowns, i )

   ASize ( _TbNames, HMG_LEN( _TbNames ) - 1 )
   ASize ( _TbCaptions, HMG_LEN( _TbCaptions ) - 1 )
   ASize ( _TbPictures, HMG_LEN( _TbPictures ) - 1 )
   ASize ( _TbActions, HMG_LEN( _TbActions ) - 1 )
   ASize ( _TbToolTips, HMG_LEN( _TbToolTips ) - 1 )

   ASize ( _TbSeparators, HMG_LEN ( _TbSeparators ) - 1 )
   ASize ( _TbAutoSizes, HMG_LEN ( _TbAutoSizes ) - 1 )
   ASize ( _TbChecks, HMG_LEN ( _TbChecks ) - 1 )
   ASize ( _TbGroups, HMG_LEN ( _TbGroups ) - 1 )

   ASize ( _TbDropDowns, HMG_LEN ( _TbDropDowns ) - 1 )
   ASize ( _TbWholeDropDowns, HMG_LEN ( _TbWholeDropDowns ) - 1 )

   c := c - 1

   IF i > c

      TbDesigner.List1.VALUE := c
      TbDesigner.Text1.VALUE := TbDesigner.List1.Item( c )
      TbDesigner.Text2.VALUE := _TbCaptions[ c ]
      TbDesigner.Text3.VALUE := _TbPictures[ c ]
      TbDesigner.Text4.VALUE := _TbActions[ c ]
      TbDesigner.Text4a.VALUE := _TbToolTips[ c ]

      TbDesigner.Check5.VALUE := _TbSeparators[ c ]
      TbDesigner.Check6.VALUE := _TbAutoSizes[ c ]
      TbDesigner.Check7.VALUE := _TbChecks[ c ]
      TbDesigner.Check8.VALUE := _TbGroups[ c ]

      TbDesigner.Check9.VALUE := _TbDropDowns[ c ]
      TbDesigner.Check10.VALUE := _TbWholeDropDowns[ c ]

   ELSE

      TbDesigner.List1.VALUE := i
      TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i )
      TbDesigner.Text2.VALUE := _TbCaptions[ i ]
      TbDesigner.Text3.VALUE := _TbPictures[ i ]
      TbDesigner.Text4.VALUE := _TbActions[ i ]
      TbDesigner.Text4a.VALUE := _TbToolTips[ i ]

      TbDesigner.Check5.VALUE := _TbSeparators[ i ]
      TbDesigner.Check6.VALUE := _TbAutoSizes[ i ]
      TbDesigner.Check7.VALUE := _TbChecks[ i ]
      TbDesigner.Check8.VALUE := _TbGroups[ i ]

      TbDesigner.Check9.VALUE := _TbDropDowns[ i ]
      TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i ]

   ENDIF

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbInsert
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL aTemp := {}
   LOCAL x

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   FOR x := 1 TO c

      IF x == i
         AAdd ( aTemp, '' )
      ENDIF

      AAdd ( aTemp, TbDesigner.List1.Item ( x ) )

   NEXT x

   TbDesigner.List1.DeleteAllItems

   FOR x := 1 TO HMG_LEN ( aTemp )
      TbDesigner.List1.AddItem ( aTemp[ x ] )
   NEXT x

   TbDesigner.List1.VALUE := i

   AAdd ( _TbNames, '' )
   AAdd ( _TbCaptions, '' )
   AAdd ( _TbPictures, '' )
   AAdd ( _TbActions, '' )
   AAdd ( _TbToolTips, '' )

   AAdd ( _TbSeparators, .F. )
   AAdd ( _TbAutoSizes, .F. )
   AAdd ( _TbChecks, .F. )
   AAdd ( _TbGroups, .F. )

   AAdd ( _TbDropDowns, .F. )
   AAdd ( _TbWholeDropDowns, .F. )


   AIns ( _TbNames, i )
   AIns ( _TbCaptions, i )
   AIns ( _TbPictures, i )
   AIns ( _TbActions, i )
   AIns ( _TbToolTips, i )

   AIns ( _TbSeparators, i )
   AIns ( _TbAutoSizes, i )
   AIns ( _TbChecks, i )
   AIns ( _TbGroups, i )

   AIns ( _TbDropDowns, i )
   AIns ( _TbWholeDropDowns, i )


   _TbNames[ i ] := ''
   _TbCaptions[ i ] := ''
   _TbPictures[ i ] := ''
   _TbActions[ i ] := ''
   _TbToolTips[ i ] := ''

   _TbSeparators[ i ] := .F.
   _TbAutoSizes[ i ] := .F.
   _TbChecks[ i ] := .F.
   _TbGroups[ i ] := .F.

   _TbDropDowns[ i ] := .F.
   _TbWholeDropDowns[ i ] := .F.


   TbDesigner.Text1.VALUE := ''
   TbDesigner.Text2.VALUE := ''
   TbDesigner.Text3.VALUE := ''
   TbDesigner.Text4.VALUE := ''
   TbDesigner.Text4a.VALUE := ''

   TbDesigner.Check5.VALUE := .F.
   TbDesigner.Check6.VALUE := .F.
   TbDesigner.Check7.VALUE := .F.
   TbDesigner.Check8.VALUE := .F.

   TbDesigner.Check9.VALUE := .F.
   TbDesigner.Check10.VALUE := .F.

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbChange
*------------------------------------------------------------------------------*
   LOCAL i


   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i )
   TbDesigner.Text2.VALUE := _TbCaptions[ i ]
   TbDesigner.Text3.VALUE := _TbPictures[ i ]
   TbDesigner.Text4.VALUE := _TbActions[ i ]
   TbDesigner.Text4a.VALUE := _TbToolTips[ i ]

   TbDesigner.Check5.VALUE := _TbSeparators[ i ]
   TbDesigner.Check6.VALUE := _TbAutoSizes[ i ]
   TbDesigner.Check7.VALUE := _TbChecks[ i ]
   TbDesigner.Check8.VALUE := _TbGroups[ i ]

   TbDesigner.Check9.VALUE := _TbDropDowns[ i ]
   TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i ]

RETURN

*------------------------------------------------------------------------------*
FUNCTION FillTbList()
*------------------------------------------------------------------------------*
   LOCAL aList
   LOCAL LineCount
   LOCAL Line
   LOCAL x
   LOCAL i
   LOCAL cTemp
   LOCAL Numbers
   LOCAL z

   IF Empty ( _hmgide_CurrentToolBar )
      aList := { '' }
   ELSE

      aList := {}
      _TbGroups := {}
      _TbChecks := {}
      _TbSeparators := {}
      _TbActions := {}
      _TbPictures := {}
      _TbCaptions := {}
      _TbNames := {}
      _TbAutoSizes := {}
      _TbToolTips := {}

      _TbDropDowns := {}
      _TbWholeDropDowns := {}

      LineCount := MLCount ( _hmgide_CurrentToolBar )

      FOR i := 1 TO LineCount

         Line := AllTrim ( MemoLine ( _hmgide_CurrentToolBar, 1024, i, 4, .T. ) )

         IF HMG_UPPER ( Line ) = 'DEFINE TOOLBAR'

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 14 ) )

            // Get Border

            IF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' BORDER'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               _TbBorder := .T.
            ELSE
               _TbBorder := .F.
            ENDIF

            // Get RightText

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' RIGHTTEXT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               _TbRightText := .T.
            ELSE
               _TbRightText := .F.
            ENDIF

            // Get Bottom

            IF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' BOTTOM'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               _TbBottom := .T.
            ELSE
               _TbBottom := .F.
            ENDIF

            // Get Flat

            IF hb_URight ( HMG_UPPER ( Line ), 5 ) == ' FLAT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 5 ) )
               _TbFlat := .T.
            ELSE
               _TbFlat := .F.
            ENDIF

            // Get ToolTip

            Line := AllTrim( Line )

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( 'TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  _TbToolTip := AllTrim ( hb_USubStr ( Line, x + 9, HMG_LEN( Line ) - ( x + 9 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x - 1 ) )
               ELSE
                  _TbToolTip := ''
               ENDIF

            ELSE
               _TbToolTip := ''
            ENDIF

            Line := AllTrim( Line )

            // Get StrikeOut

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' STRIKEOUT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               _TbFontStrikeout := .T.
            ELSE
               _TbFontStrikeout := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get UnderLine

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' UNDERLINE'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               _TbFontUnderLine := .T.
            ELSE
               _TbFontUnderLine := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get Italic

            IF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' ITALIC'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               _TbFontItalic := .T.
            ELSE
               _TbFontItalic := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get Bold

            IF hb_URight ( HMG_UPPER ( Line ), 5 ) == ' BOLD'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 5 ) )
               _TbFontBold := .T.
            ELSE
               _TbFontBold := .F.
            ENDIF

            // Get Size

            x := hb_utf8RAt ( ' SIZE ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               _TbFontSize := Val ( hb_USubStr ( Line, x + 6, 255 ) )
               Line := hb_ULeft ( Line, x )
            ELSE
               _TbFontSize := 9
            ENDIF

            // Get Font

            Line := AllTrim( Line )

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( 'FONT "', HMG_UPPER( Line ) )

               IF x > 0
                  _TbFontName := AllTrim ( hb_USubStr ( Line, x + 6, HMG_LEN( Line ) - ( x + 6 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x - 1 ) )
               ELSE
                  _TbFontName := 'Arial'
               ENDIF

            ELSE
               _TbFontName := 'Arial'
            ENDIF

            Line := AllTrim( Line )

            // Get StrictWidth

            IF hb_URight ( HMG_UPPER ( Line ), 12 ) == ' STRICTWIDTH'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 12 ) )
               _TbStrictWidth := .T.
            ELSE
               _TbStrictWidth := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get ImageSize

            IF hb_URight ( Line, 1 ) == '0' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '1' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '2' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '3' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '4' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '5' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '6' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '7' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '8' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '9'

               x := hb_utf8RAt ( ' IMAGESIZE ', HMG_UPPER( Line ) )

               IF x == 0
                  _TbButtonImageWidth := ''
                  _TbButtonImageHeight := ''
               ELSE

                  Numbers := AllTrim ( hb_USubStr ( Line, x + 11, 255 ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )

                  z := hb_UAt ( ',', Numbers )

                  _TbButtonImageWidth := AllTrim ( hb_ULeft ( Numbers, z - 1 ) )
                  _TbButtonImageHeight := AllTrim ( hb_URight ( Numbers, HMG_LEN( Numbers ) - z ) )

               ENDIF

            ENDIF

            Line := AllTrim( Line )

            // Get ButtonSize

            Line := AllTrim( Line )

            IF hb_URight ( Line, 1 ) == '0' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '1' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '2' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '3' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '4' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '5' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '6' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '7' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '8' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '9'

               x := hb_utf8RAt ( ' BUTTONSIZE ', HMG_UPPER( Line ) )

               _TbName := AllTrim ( hb_ULeft ( Line, x ) )

               cTemp := AllTrim( hb_USubStr( Line, x + 12, 255 ) )

               x := hb_UAt ( ',', cTemp )

               _TbButtonWidth := hb_ULeft ( cTemp, x - 1 )

               _TbButtonHeight := hb_USubStr ( cTemp, x + 1, 255 )

            ELSE

               _TbButtonWidth := '64'
               _TbButtonHeight := '64'

            ENDIF

         ELSEIF HMG_UPPER ( Line ) = 'BUTTON '

            // Get Group

            IF hb_URight ( HMG_UPPER ( Line ), 6 ) == ' GROUP'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 6 ) )
               AAdd ( _TbGroups, .T. )
            ELSE
               AAdd ( _TbGroups, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get Check

            IF hb_URight ( HMG_UPPER ( Line ), 6 ) == ' CHECK'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 6 ) )
               AAdd ( _TbChecks, .T. )
            ELSE
               AAdd ( _TbChecks, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get WholeDropDown

            IF hb_URight ( HMG_UPPER ( Line ), 14 ) == ' WHOLEDROPDOWN'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 14 ) )
               AAdd ( _TbWholeDropDowns, .T. )
            ELSE
               AAdd ( _TbWholeDropDowns, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get DropDown

            IF hb_URight ( HMG_UPPER ( Line ), 9 ) == ' DROPDOWN'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 9 ) )
               AAdd ( _TbDropDowns, .T. )
            ELSE
               AAdd ( _TbDropDowns, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get AutoSize

            IF hb_URight ( HMG_UPPER ( Line ), 9 ) == ' AUTOSIZE'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 9 ) )
               AAdd ( _TbAutoSizes, .T. )
            ELSE
               AAdd ( _TbAutoSizes, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get Separator

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' SEPARATOR'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               AAdd ( _TbSeparators, .T. )
            ELSE
               AAdd ( _TbSeparators, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get ToolTip

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  AAdd ( _TbToolTips, AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN(Line ) - ( x + 10 ) ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  AAdd( _TbToolTips, '' )
               ENDIF

            ELSE
               AAdd ( _TbToolTips, '' )
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               AAdd ( _TbActions, hb_USubStr ( Line, x + 8, 255 ) )
               Line := hb_ULeft ( Line, x )
            ELSE
               AAdd ( _TbActions, '' )
            ENDIF

            Line := AllTrim( Line )

            // Get Picture

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' PICTURE "', HMG_UPPER( Line ) )

               IF x > 0
                  AAdd ( _TbPictures, AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN(Line ) - ( x + 10 ) ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  AAdd( _TbPictures, '' )
               ENDIF

            ELSE
               AAdd ( _TbPictures, '' )
            ENDIF

            // Get Caption

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' CAPTION "', HMG_UPPER( Line ) )

               IF x > 0
                  AAdd ( _TbCaptions, AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN(Line ) - ( x + 10 ) ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  AAdd( _TbCaptions, '' )
               ENDIF

            ELSE
               AAdd ( _TbCaptions, '' )
            ENDIF

            // Get Name

            Line := AllTrim( Line )

            Line := hb_URight ( Line, HMG_LEN( Line ) - 7 )

            Line := AllTrim( Line )

            AAdd ( _TbNames, Line )

            AAdd ( aList, Line )

         ENDIF

      NEXT i

   ENDIF

RETURN aList

*------------------------------------------------------------------------------*
PROCEDURE BuildToolBar
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL Menu

   IF Empty( _TbName )
      MsgStop( aMsgs[ 199 ], "HMG IDE" )
      RETURN
   ENDIF

   Menu := Space( 4 ) + 'DEFINE TOOLBAR ' + _TbName

   IF .NOT. Empty ( _TbButtonWidth ) .AND. .NOT. Empty ( _TbButtonHeight )
      Menu := Menu + ' BUTTONSIZE ' + AllTrim( _TbButtonWidth ) + ',' + AllTrim( _TbButtonHeight )
   ENDIF

   IF .NOT. Empty ( _TbButtonImageWidth ) .AND. .NOT. Empty ( _TbButtonImageHeight )
      Menu := Menu + ' IMAGESIZE ' + AllTrim( _TbButtonImageWidth ) + ',' + AllTrim( _TbButtonImageHeight )
   ENDIF

   IF _TbStrictWidth == .T.
      Menu := Menu + ' STRICTWIDTH'
   ENDIF

   Menu := Menu + ' FONT ' + Chr( 34 ) + _TbFontName + Chr( 34 )

   Menu := Menu + ' SIZE ' + AllTrim( Str( _TbFontSize ) )

   IF _TbFontBold == .T.
      Menu := Menu + ' BOLD'
   ENDIF

   IF _TbFontItalic == .T.
      Menu := Menu + ' ITALIC'
   ENDIF

   IF _TbFontUnderLine == .T.
      Menu := Menu + ' UNDERLINE'
   ENDIF

   IF _TbFontStrikeout == .T.
      Menu := Menu + ' STRIKEOUT'
   ENDIF

   IF .NOT. Empty( _TbToolTip )
      Menu := Menu + ' TOOLTIP ' + +Chr( 34 ) + _TbToolTip + Chr( 34 )
   ENDIF

   IF _TbFlat == .T.
      Menu := Menu + ' FLAT'
   ENDIF

   IF _TbBottom == .T.
      Menu := Menu + ' BOTTOM'
   ENDIF

   IF _TbRightText == .T.
      Menu := Menu + ' RIGHTTEXT'
   ENDIF

   IF _TbBorder == .T.
      Menu := Menu + ' BORDER'
   ENDIF

   Menu := Menu + CRLF

   FOR i := 1 TO TbDesigner.List1.ItemCount

      // Create Command

      // Button

      IF Empty ( _TbNames[ i ] )
         MsgStop( aMsgs[ 143 ] + " (Item: " + AllTrim( Str( i ) ) + ")", "HMG IDE" )
         RETURN
      ENDIF

      IF _TbDropDowns[ i ] == .T. .AND. _TbWholeDropDowns[ i ] == .T.
         MsgStop( aMsgs[ 144 ] + AllTrim( Str( i ) ) + ")", "HMG IDE" )
         RETURN
      ENDIF

      IF Empty ( _TbPictures[ i ] )
         MsgStop( aMsgs[ 145 ] + AllTrim( Str( i ) ) + ")", "HMG IDE" )
         RETURN
      ENDIF

      Menu := Menu + Space( 8 ) + 'BUTTON ' + _TbNames[ i ] ;
         +if ( ! Empty( _TbCaptions[ i ] ), ' CAPTION ' + Chr( 34 ) + _TbCaptions[ i ] + Chr( 34 ), '' ) ;
         +if ( ! Empty( _TbPictures[ i ] ), ' PICTURE ' + Chr( 34 ) + _TbPictures[ i ] + Chr( 34 ), '' ) ;
         +if ( ( ( ! Empty(_TbActions[ i ] ) ) .AND. ( _TbWholeDropDowns[ i ] == .F. ) ), ' ACTION ' + _TbActions[ i ], '' ) ;
         +if ( ! Empty( _TbToolTips[ i ] ), ' TOOLTIP ' + Chr( 34 ) + _TbToolTips[ i ] + Chr( 34 ), '' ) ;
         +if ( _TbSeparators[ i ] == .T., ' SEPARATOR', '' ) ;
         +if ( _TbAutoSizes[ i ] == .T., ' AUTOSIZE', '' ) ;
         +if ( _TbDropDowns[ i ] == .T., ' DROPDOWN', '' ) ;
         +if ( _TbWholeDropDowns[ i ] == .T., ' WHOLEDROPDOWN', '' ) ;
         +if ( _TbChecks[ i ] == .T., ' CHECK', '' ) ;
         +if ( _TbGroups[ i ] == .T., ' GROUP', '' ) ;
         +CRLF

   NEXT i

   Menu := Menu + Space( 4 ) + 'END TOOLBAR' + CRLF

   _hmgide_CurrentToolBar := Menu

   DesignFormModified := .T.

   TbDesigner.RELEASE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbProperties
*------------------------------------------------------------------------------*

   DEFINE WINDOW TbProperties ;
         AT 0, 0 ;
         WIDTH 380 ;
         HEIGHT GetTitleHeight() + 310 + 2 ;
         TITLE aMsgs[ 146 ] ;
         MODAL ;
         NOSIZE

      ON KEY ESCAPE ACTION ( ;
         ThisWindow.RELEASE ;
         )

      DEFINE FRAME Frame1
         ROW 9
         COL 10
         WIDTH 235
         HEIGHT 286
      END FRAME

      DEFINE LABEL Label0
         ROW 23
         COL 25
         WIDTH 90
         VALUE aMsgs[ 147 ]
      END LABEL
      DEFINE TEXTBOX Text0
         ROW 20
         COL 110
         VALUE _TbName
      END TEXTBOX

      DEFINE LABEL Label1
         ROW 53
         COL 25
         WIDTH 80
         VALUE aMsgs[ 148 ]
      END LABEL
      DEFINE TEXTBOX Text1
         ROW 50
         COL 110
         VALUE _TbButtonWidth
      END TEXTBOX

      DEFINE LABEL Label2
         ROW 83
         COL 25
         WIDTH 80
         VALUE aMsgs[ 149 ]
      END LABEL
      DEFINE TEXTBOX Text2
         ROW 80
         COL 110
         VALUE _TbButtonHeight
      END TEXTBOX

      DEFINE LABEL Label2a
         ROW 113
         COL 25
         WIDTH 85
         VALUE aMsgs[ 150 ]
      END LABEL
      DEFINE TEXTBOX Text2a
         ROW 110
         COL 110
         VALUE _TbButtonImageWidth
      END TEXTBOX

      DEFINE LABEL Label2b
         ROW 143
         COL 25
         WIDTH 80
         VALUE aMsgs[ 151 ]
      END LABEL
      DEFINE TEXTBOX Text2b
         ROW 140
         COL 110
         VALUE _TbButtonImageHeight
      END TEXTBOX

      DEFINE LABEL Label3
         ROW 173
         COL 25
         WIDTH 80
         VALUE 'ToolTip:'
      END LABEL
      DEFINE TEXTBOX Text3
         ROW 170
         COL 110
         VALUE _TbToolTip
      END TEXTBOX

      DEFINE LABEL Label5
         ROW 203
         COL 25
         WIDTH 60
         VALUE 'Flat:'
      END LABEL
      DEFINE CHECKBOX Check5
         ROW 200
         COL 100
         WIDTH 20
         VALUE _TbFlat
      END CHECKBOX

      DEFINE LABEL Label6
         ROW 233
         COL 25
         WIDTH 50
         VALUE 'Bottom:'
      END LABEL
      DEFINE CHECKBOX Check6
         ROW 230
         COL 100
         WIDTH 20
         VALUE _TbBottom
      END CHECKBOX

      DEFINE LABEL Label7
         ROW 203
         COL 145
         WIDTH 50
         VALUE 'RightText:'
      END LABEL
      DEFINE CHECKBOX Check7
         ROW 200
         COL 215
         WIDTH 20
         VALUE _TbRightText
      END CHECKBOX

      DEFINE LABEL Label8
         ROW 233
         COL 145
         WIDTH 50
         VALUE 'Border:'
      END LABEL
      DEFINE CHECKBOX Check8
         ROW 230
         COL 215
         WIDTH 20
         VALUE _TbBorder
      END CHECKBOX

      DEFINE LABEL Label9
         ROW 263
         COL 25
         WIDTH 60
         VALUE 'StrictWidth:'
      END LABEL
      DEFINE CHECKBOX Check9
         ROW 260
         COL 100
         WIDTH 20
         VALUE _TbStrictWidth
      END CHECKBOX

      DEFINE BUTTON FONT
         ROW 265
         COL 260
         CAPTION aMsgs[ 134 ]
         ACTION TbFont()
      END BUTTON

      // Ok / Cancel Buttons

      DEFINE BUTTON Ok
         ROW 10
         COL 260
         CAPTION aMsgs[ 116 ]
         ACTION ( ;
            _TbName := TbProperties.Text0.VALUE, ;
            _TbButtonWidth := TbProperties.Text1.VALUE, ;
            _TbButtonHeight := TbProperties.Text2.VALUE, ;
            _TbButtonImageWidth := TbProperties.Text2a.VALUE, ;
            _TbButtonImageHeight := TbProperties.Text2b.VALUE, ;
            _TbToolTip := TbProperties.Text3.VALUE, ;
            _TbFlat := TbProperties.Check5.VALUE, ;
            _TbBottom := TbProperties.Check6.VALUE, ;
            _TbRightText := TbProperties.Check7.VALUE, ;
            _TbBorder := TbProperties.Check8.VALUE, ;
            _TbStrictWidth := TbProperties.Check9.VALUE, ;
            _HMG_DialogCancelled := .F., ;
            ThisWindow.RELEASE ;
            )
      END BUTTON
      DEFINE BUTTON Cancel
         ROW 40
         COL 260
         CAPTION aMsgs[ 117 ]
         ACTION ( ;
            _HMG_DialogCancelled := .T., ;
            ThisWindow.RELEASE ;
            )
      END BUTTON

   END WINDOW

   setfocus ( GetControlHandle ( 'Text0', 'TbProperties' ) )

   TbProperties.CENTER
   TbProperties.ACTIVATE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE TbFont
*------------------------------------------------------------------------------*
   LOCAL aTemp

   aTemp := GetFont( _TbFontName, _TbFontSize, _TbFontBold, _TbFontItalic, { 0, 0, 0 }, _TbFontUnderLine, _TbFontStrikeout, Nil )

   IF .NOT. Empty ( aTemp[ 1 ] )
      _TbFontName := aTemp[ 1 ]
      _TbFontSize := aTemp[ 2 ]
      _TbFontBold := aTemp[ 3 ]
      _TbFontItalic := aTemp[ 4 ]
      _TbFontUnderLine := aTemp[ 6 ]
      _TbFontStrikeout := aTemp[ 7 ]
   ENDIF

RETURN

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
FUNCTION IsControNameValid ( cNewName )
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL l
   LOCAL RetVal := .T.
   LOCAL f := .F.
   LOCAL c

   FOR i := 1 TO HMG_LEN ( cNewName )

      c := HMG_UPPER ( hb_USubStr ( cNewName, i, 1 ) )

      IF c <> 'A' ;
            .AND. ;
            c <> 'B' ;
            .AND. ;
            c <> 'C' ;
            .AND. ;
            c <> 'D' ;
            .AND. ;
            c <> 'E' ;
            .AND. ;
            c <> 'F' ;
            .AND. ;
            c <> 'G' ;
            .AND. ;
            c <> 'H' ;
            .AND. ;
            c <> 'I' ;
            .AND. ;
            c <> 'J' ;
            .AND. ;
            c <> 'K' ;
            .AND. ;
            c <> 'L' ;
            .AND. ;
            c <> 'M' ;
            .AND. ;
            c <> 'N' ;
            .AND. ;
            c <> 'O' ;
            .AND. ;
            c <> 'P' ;
            .AND. ;
            c <> 'Q' ;
            .AND. ;
            c <> 'R' ;
            .AND. ;
            c <> 'S' ;
            .AND. ;
            c <> 'T' ;
            .AND. ;
            c <> 'U' ;
            .AND. ;
            c <> 'V' ;
            .AND. ;
            c <> 'W' ;
            .AND. ;
            c <> 'X' ;
            .AND. ;
            c <> 'Y' ;
            .AND. ;
            c <> 'Z' ;
            .AND. ;
            c <> '0' ;
            .AND. ;
            c <> '1' ;
            .AND. ;
            c <> '2' ;
            .AND. ;
            c <> '3' ;
            .AND. ;
            c <> '4' ;
            .AND. ;
            c <> '5' ;
            .AND. ;
            c <> '6' ;
            .AND. ;
            c <> '7' ;
            .AND. ;
            c <> '8' ;
            .AND. ;
            c <> '9' ;
            .AND. ;
            c <> '_'

         f := .T.
         EXIT

      ENDIF

   NEXT i

   IF f == .T.
      RETURN .F.
   ENDIF

   l := HMG_LEN ( _HMG_aControlNames )

   FOR i := 1 TO l

      IF HMG_UPPER( AllTrim( _HMG_aControlNames[ i ] ) ) == HMG_UPPER( AllTrim( cNewName ) ) ;
            .AND. ;
            _HMG_aControlParenthandles[ i ] == DesignFormhandle

         RetVal := .F.
         EXIT
      ENDIF

   NEXT i

RETURN ( RetVal )


*------------------------------------------------------------------------------*
Procedure BuildProjectM()
*------------------------------------------------------------------------------*
Local PROJECTFOLDER := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Projectname , HB_UTF8RAT ('\' , ProjectName ) - 1 ) ) )

 If Empty ( Projectname )
  MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
  Return
 EndIf

 If Project.List_1.ItemCount == 0
  Return
 EndIf

 If _IsWindowDefined ( DesignForm )
  DoMethod ( DesignForm , 'Release' )
 EndIf

 SaveProject()

 if DebuggerSupport == .F.

  if MixedMode == .F.

   if Empty ( AddIncPaths )
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   else
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder ) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   endif

  else

   if Empty ( AddIncPaths )
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   else
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   endif

  endif

 else

  if MixedMode == .F.

   if Empty ( AddIncPaths )
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   else
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths, '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   endif

  else

   if Empty ( AddIncPaths )
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/C', '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/C', '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   else
    if ResetProjectInfo == .f.
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder ) )
    else
     if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
    endif
   endif

  endif

 endif

 ResetProjectInfo := .F.

 FormBuildLog.EditBox1.VALUE := HB_MEMOREAD (PROJECTFOLDER+"\build.log")
 FormBuildLog.EditBox1.VALUE := HB_UTF8STRTRAN (FormBuildLog.EditBox1.VALUE, CHR(10) , CRLF )   // ADD

Return

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
Procedure SplitBoxBuilder
*------------------------------------------------------------------------------*
local i
local l
local w

 if ! IsWindowDefined(&DesignForm)
  MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
  Return
 EndIf

 if ! Empty ( _hmgide_CurrentToolBar )
  MsgStop ( aMsgs [ 171 ] ,'HMG IDE')
  Return
 endif

 DEFINE WINDOW  spb ;
  AT 0,0 ;
  WIDTH 400 ;
  HEIGHT 290 + GetTitleHeight() + GetBorderHeight() + 3 ;
  TITLE aMsgs [ 172 ]  ;
  MODAL

  DEFINE FRAME FRAME_1
   ROW 5
   COL 10
   WIDTH 260
   HEIGHT 205
   CAPTION aMsgs [ 173 ]
  END FRAME

  DEFINE GRID LIST_1
   ROW 27
   COL 23
   WIDTH 234
   HEIGHT 170
   WIDTHS { 110 , 110 }
   HEADERS { aMsgs [ 174 ]  , aMsgs [ 175 ]  }
   ONCHANGE IF ( this.cell ( this.value , 2 ) = 'Window' , spb.button_2c.enabled := .F. , spb.button_2c.enabled := .T. )
   ONDBLCLICK Sp6()
  END GRID

  DEFINE FRAME FRAME_2
   ROW 215
   COL 10
   WIDTH 260
   HEIGHT 65
   CAPTION aMsgs [ 176 ]
  END FRAME

  DEFINE CHECKBOX CHECK_1
   ROW 237
   COL 50
   CAPTION 'Bottom'
   VALUE .F.
  END CHECKBOX

  DEFINE CHECKBOX CHECK_2
   ROW 237
   COL 150
   CAPTION 'Horizontal'
   VALUE .F.
  END CHECKBOX

  DEFINE BUTTON BUTTON_1
   ROW 10
   COL 281
   CAPTION aMsgs [ 177 ]
   ACTION Sp1()
  END BUTTON

  DEFINE BUTTON BUTTON_2
   ROW 40
   COL 281
   CAPTION aMsgs [ 178 ]
   ACTION Sp2()
  END BUTTON

  DEFINE BUTTON BUTTON_2a
   ROW 70
   COL 281
   CAPTION aMsgs [ 179 ]
   ACTION sp4()
  END BUTTON

  DEFINE BUTTON BUTTON_2b
   ROW 100
   COL 281
   CAPTION aMsgs [ 180 ]
   ACTION Sp5()
  END BUTTON

  DEFINE BUTTON BUTTON_2c
   ROW 130
   COL 281
   CAPTION aMsgs [ 181 ]
   ACTION Sp6()
  END BUTTON

  DEFINE BUTTON BUTTON_3
   ROW 222
   COL 281
   CAPTION aMsgs [ 116 ]
   ACTION ( Sp3() , ThisWindow.Release )
  END BUTTON

  DEFINE BUTTON BUTTON_4
   ROW 252
   COL 281
   CAPTION aMsgs [ 117 ]
   ACTION ThisWindow.Release
  END BUTTON

 END WINDOW

 CENTER WINDOW spb

 L := ALLTRIM ( MemoLine ( _hmgide_CurrentSplitBox , 1024 , 1 , 4 , .t. ) )

 IF 'BOTTOM' $ L
  SPB.CHECK_1.VALUE := .T.
 ENDIF

 IF 'HORIZONTAL' $ L
  SPB.CHECK_2.VALUE := .T.
 ENDIF

 for i := 1 to mlcount ( _hmgide_CurrentSplitBox )

  L := ALLTRIM ( MemoLine ( _hmgide_CurrentSplitBox , 1024 , i , 4 , .t. ) )

  if l = 'LOAD WINDOW '
   w := ALLTRIM ( HB_USUBSTR ( l , 13 , 255 ) )
   spb.list_1.additem ( { w , 'Window' } )
  elseif l = 'DEFINE BROWSE '
   w := ALLTRIM ( HB_USUBSTR ( l , 15 , 255 ) )
   spb.list_1.additem ( { w , 'Browse' } )
  elseif l = 'DEFINE COMBOBOX '
   w := ALLTRIM ( HB_USUBSTR ( l , 17 , 255 ) )
   spb.list_1.additem ( { w , 'ComboBox' } )
  elseif l = 'DEFINE EDITBOX '
   w := ALLTRIM ( HB_USUBSTR ( l , 16 , 255 ) )
   spb.list_1.additem ( { w , 'EditBox' } )
  elseif l = 'DEFINE GRID '
   w := ALLTRIM ( HB_USUBSTR ( l , 13 , 255 ) )
   spb.list_1.additem ( { w , 'Grid' } )
  elseif l = 'DEFINE LISTBOX '
   w := ALLTRIM ( HB_USUBSTR ( l , 16 , 255 ) )
   spb.list_1.additem ( { w , 'ListBox' } )
  elseif l = 'DEFINE RICHEDITBOX '
   w := ALLTRIM ( HB_USUBSTR ( l , 20 , 255 ) )
   spb.list_1.additem ( { w , 'RichEditBox' } )
  elseif l = 'DEFINE TOOLBAR '
   w := ALLTRIM ( HB_USUBSTR ( l , 16 , 255 ) )
   w := ALLTRIM ( HB_ULEFT ( w , HB_UAT( ' ' , w ) ) )
   spb.list_1.additem ( { w , 'ToolBar' } )
  elseif l = 'DEFINE TREE '
   w := ALLTRIM ( HB_USUBSTR ( l , 13 , 255 ) )
   w := ALLTRIM ( HB_ULEFT ( w , HB_UAT( ' ' , w ) ) )
   spb.list_1.additem ( { w , 'Tree' } )
  endif

 next i

 if spb.list_1.itemcount > 0
  spb.list_1.value := 1
 endif

 ACTIVATE WINDOW spb

 DoMethod ( DesignForm , 'SetFocus' )

 DrawGrid()

Return


procedure sp6
local i

 i := spb.list_1.value

 if i == 0
  return
 endif

 if HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 2 ) ) ) == 'TOOLBAR'
  _spx_ToolBarBuilder( ALLTRIM ( spb.list_1.cell ( i , 1 ) ) )
 elseif HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 2 ) ) ) == 'WINDOW'
  return
 else
  sp7 ( HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 2 ) ) ) , HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 1 ) ) ) )
 endif

return

procedure sp7 ( cType , cName )

 DEFINE WINDOW sp7 ;
  AT 0 , 0 ;
  WIDTH 232 ;
  HEIGHT 205 + GetTitleHeight() + GetBorderHeight() + 1 ;
  TITLE aMsgs [ 182 ]  + cName + ']' ;
  MODAL ;
  NOSIZE

  DEFINE TAB Tab_1 AT 4,3 WIDTH 220 HEIGHT 198

   PAGE aMsgs [ 183 ]

    DEFINE GRID Grid_1
     ROW 27
     COL 5
     WIDTH 208
     HEIGHT 164
     HEADERS { aMsgs [ 184 ] ,aMsgs [ 185 ] }
     WIDTHS {115,72}
     ITEMS { {'',''},{'',''},{'',''},{'',''},{'',''} }
     FONTNAME 'Arial'
     FONTSIZE 9
     ON DBLCLICK sp8( cName , cType )
     TOOLTIP aMsgs [ 186 ]
    END GRID

   END PAGE

   PAGE aMsgs [ 187 ]

    DEFINE GRID Grid_2
     ROW 27
     COL 5
     WIDTH 208
     HEIGHT 164
     HEADERS { aMsgs [ 197 ] , aMsgs [ 198 ] }
     WIDTHS {115,72}
     ITEMS { {'',''},{'',''},{'',''},{'',''},{'',''} }
     FONTNAME 'Arial'
     FONTSIZE 9
     ON DBLCLICK Sp8( cName , cType )
     TOOLTIP aMsgs [ 186 ]
    END GRID

   END PAGE

  END TAB

 END WINDOW

 If cType == 'BROWSE'

  sp7.Grid_1.DeleteAllItems

  sp7.Grid_1.AddItem ( {'AllowAppend', __MVGET ( cName + 'AllowAppend' ) } )
  sp7.Grid_1.AddItem ( {'AllowDelete', __MVGET ( cName + 'AllowDelete' ) } )
  sp7.Grid_1.AddItem ( {'AllowEdit', __MVGET ( cName + 'AllowEdit' ) } )
  sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
  sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
  sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
  sp7.Grid_1.AddItem ( {'DynamicBackColor', __MVGET ( cName + 'DynamicBackColor' ) } )
  sp7.Grid_1.AddItem ( {'DynamicForeColor', __MVGET ( cName + 'DynamicForeColor' ) } )
  sp7.Grid_1.AddItem ( {'Fields',  __MVGET ( cName + 'Fields' ) } )
  sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
  sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
  sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
  sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
  sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
  sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
  sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
  sp7.Grid_1.AddItem ( {'Format', __MVGET ( cName + 'Format' ) } )
  sp7.Grid_1.AddItem ( {'Headers',  __MVGET ( cName + 'Headers' ) } )
  sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
  sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
  sp7.Grid_1.AddItem ( {'Image',  __MVGET ( cName + 'Image' ) } )
  sp7.Grid_1.AddItem ( {'InputMask',  __MVGET ( cName + 'InputMask' ) } )
  sp7.Grid_1.AddItem ( {'Justify',  __MVGET ( cName + 'Justify' ) } )
  sp7.Grid_1.AddItem ( {'Lines', __MVGET ( cName + 'Lines' ) } )
  sp7.Grid_1.AddItem ( {'Lock', __MVGET ( cName + 'Lock' ) } )
  sp7.Grid_1.AddItem ( {'Name', cName } )
  sp7.Grid_1.AddItem ( {'ReadOnlyFields',  __MVGET ( cName + 'ReadOnlyFields' ) } )
  sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
  sp7.Grid_1.AddItem ( {'Valid', __MVGET ( cName + 'Valid' ) } )
  sp7.Grid_1.AddItem ( {'ValidMessages', __MVGET ( cName + 'ValidMessages' ) } )
  sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
  sp7.Grid_1.AddItem ( {'vScrollBar',  __MVGET ( cName + 'vScrollBar' ) } )
  sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
  sp7.Grid_1.AddItem ( {'When', __MVGET ( cName + 'When' ) } )
  sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )
  sp7.Grid_1.AddItem ( {'Widths',  __MVGET ( cName + 'Widths' ) } )
  sp7.Grid_1.AddItem ( {'WorkArea',  __MVGET ( cName + 'WorkArea' ) } )

  sp7.Grid_2.DeleteAllItems

  sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
  sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
  sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnHeadClick', __MVGET ( cName + 'OnHeadClick' ) } )
  sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

  elseIf cType == 'COMBOBOX'

  sp7.Grid_1.DeleteAllItems
  sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
  sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
  sp7.Grid_1.AddItem ( {'DisplayEdit', __MVGET ( cName + 'DisplayEdit' ) } )
  sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
  sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
  sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
  sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
  sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
  sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
  sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
  sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
  sp7.Grid_1.AddItem ( {'Items',  __MVGET ( cName + 'Items' ) } )
  sp7.Grid_1.AddItem ( {'ItemSource',  __MVGET ( cName + 'ItemSource' ) } )
  sp7.Grid_1.AddItem ( {'Name',cName } )
  sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
  sp7.Grid_1.AddItem ( {'Sort', __MVGET ( cName + 'Sort' ) } )
  sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
  sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
  sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
  sp7.Grid_1.AddItem ( {'ValueSource',  __MVGET ( cName + 'ValueSource' ) } )
  sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
  sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

  sp7.Grid_2.DeleteAllItems
  sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
  sp7.Grid_2.AddItem ( {'OnDisplayChange', __MVGET ( cName + 'OnDisplayChange' ) } )
  sp7.Grid_2.AddItem ( {'OnEnter', __MVGET ( cName + 'OnEnter' ) } )
  sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

  elseIf cType == 'EDITBOX'

  sp7.Grid_1.DeleteAllItems
  sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
  sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
  sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
  sp7.Grid_1.AddItem ( {'Field', __MVGET ( cName + 'Field' ) } )
  sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
  sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
  sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
  sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
  sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
  sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
  sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
  sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
  sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
  sp7.Grid_1.AddItem ( {'HScrollBar', __MVGET ( cName + 'hScrollBar' ) } )
  sp7.Grid_1.AddItem ( {'MaxLength', __MVGET ( cName + 'MaxLength' ) } )
  sp7.Grid_1.AddItem ( {'Name',cName } )
  sp7.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( cName + 'ReadOnly' ) } )
  sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
  sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
  sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
  sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
  sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
  sp7.Grid_1.AddItem ( {'VScrollBar', __MVGET ( cName + 'VScrollBar' ) } )
  sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

  sp7.Grid_2.DeleteAllItems
  sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
  sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

  elseIf cType == 'LISTBOX'

  sp7.Grid_1.DeleteAllItems
  sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
  sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
  sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
  sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
  sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
  sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
  sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
  sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
  sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
  sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
  sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
  sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
  sp7.Grid_1.AddItem ( {'Items',  __MVGET ( cName + 'Items' ) } )
  sp7.Grid_1.AddItem ( {'MultiSelect',  __MVGET ( cName + 'MultiSelect' ) } )
  sp7.Grid_1.AddItem ( {'Name',cName } )
  sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
  sp7.Grid_1.AddItem ( {'Sort', __MVGET ( cName + 'Sort' ) } )
  sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
  sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
  sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
  sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
  sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

  sp7.Grid_2.DeleteAllItems
  sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
  sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
  sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

  elseIf cType == 'GRID'

  sp7.Grid_1.DeleteAllItems
  sp7.Grid_1.AddItem ( {'AllowEdit', __MVGET ( cName + 'AllowEdit' ) } )
  sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
  sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
  sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
  sp7.Grid_1.AddItem ( {'ColumnControls', __MVGET ( cName + 'ColumnControls' ) } )
  sp7.Grid_1.AddItem ( {'ColumnValid', __MVGET ( cName + 'ColumnValid' ) } )
  sp7.Grid_1.AddItem ( {'ColumnWhen', __MVGET ( cName + 'ColumnWhen' ) } )
  sp7.Grid_1.AddItem ( {'DynamicBackColor', __MVGET ( cName + 'DynamicBackColor' ) } )
  sp7.Grid_1.AddItem ( {'DynamicForeColor', __MVGET ( cName + 'DynamicForeColor' ) } )
  sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
  sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
  sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
  sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
  sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
  sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
  sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
  sp7.Grid_1.AddItem ( {'Headers',  __MVGET ( cName + 'Headers' ) } )
  sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
  sp7.Grid_1.AddItem ( {'HelpId',  __MVGET ( cName + 'HelpId' ) } )
  sp7.Grid_1.AddItem ( {'Image',  __MVGET ( cName + 'Image' ) } )
  sp7.Grid_1.AddItem ( {'ItemCount',  __MVGET ( cName + 'ItemCount' ) } )
  sp7.Grid_1.AddItem ( {'Items',  __MVGET ( cName + 'Items' ) } )
  sp7.Grid_1.AddItem ( {'Justify',  __MVGET ( cName + 'Justify' ) } )
  sp7.Grid_1.AddItem ( {'Lines', __MVGET ( cName + 'Lines' ) } )
  sp7.Grid_1.AddItem ( {'MultiSelect',  __MVGET ( cName + 'MultiSelect' ) } )
  sp7.Grid_1.AddItem ( {'Name',cName } )
  sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
  sp7.Grid_1.AddItem ( {'ShowHeaders', __MVGET ( cName + 'ShowHeaders' ) } )
  sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
  sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
  sp7.Grid_1.AddItem ( {'Virtual',  __MVGET ( cName + 'Virtual' ) } )
  sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )
  sp7.Grid_1.AddItem ( {'Widths',  __MVGET ( cName + 'Widths' ) } )

  sp7.Grid_2.DeleteAllItems
  sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
  sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
  sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnHeadClick', __MVGET ( cName + 'OnHeadClick' ) } )
  sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnQueryData', __MVGET ( cName + 'OnQueryData' ) } )

  elseIf cType == 'RICHEDITBOX'

  sp7.Grid_1.DeleteAllItems

  sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
  sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
  sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
  sp7.Grid_1.AddItem ( {'Field', __MVGET ( cName + 'Field' ) } )
  sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
  sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
  sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
  sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
  sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
  sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
  sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
  sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
  sp7.Grid_1.AddItem ( {'MaxLength', __MVGET ( cName + 'MaxLength' ) } )
  sp7.Grid_1.AddItem ( {'Name',cName } )
  sp7.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( cName + 'ReadOnly' ) } )
  sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
  sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
  sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
  sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
  sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
  sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

  sp7.Grid_2.DeleteAllItems
  sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
  sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

  elseIf cType == 'TREE'

  sp7.Grid_1.DeleteAllItems
  sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
  sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
  sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
  sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
  sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
  sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
  sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
  sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
  sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
  sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
  sp7.Grid_1.AddItem ( {'ItemIds', __MVGET ( cName + 'ItemIds' ) } )
  sp7.Grid_1.AddItem ( {'ItemImages', __MVGET ( cName + 'ItemImages' ) } )
  sp7.Grid_1.AddItem ( {'Name',cName } )
  sp7.Grid_1.AddItem ( {'NodeImages', __MVGET ( cName + 'NodeImages' ) } )
  sp7.Grid_1.AddItem ( {'RootButton', __MVGET ( cName + 'RootButton' ) } )
  sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
  sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
  sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
  sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

  sp7.Grid_2.DeleteAllItems
  sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
  sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
  sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
  sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

 endif

 CENTER WINDOW sp7

 ACTIVATE WINDOW sp7

return

procedure sp8 ( cControlName , cType )
Local cName , cValue , Result
Local PropertyName
Local SelectedControlType
Local aRow

 cName := this.cell ( this.value , 1 )
 cValue := this.cell ( this.value , 2 )

 if cName = 'Name' .or. cName = 'Col' .or. cName = 'Row'
  PlayHand()
  Return
 endif

 PropertyName := ALLTRIM(HMG_UPPER(cName))

 SelectedControlType := ALLTRIM(HMG_UPPER(cType))

 aRow := { cName , cValue }

 If PropertyName == 'VISIBLE' ;
  .Or. ;
  PropertyName == 'HANDCURSOR' ;
  .Or. ;
  PropertyName == 'FLAT' ;
  .Or. ;
  PropertyName == 'SHOWHEADERS' ;
  .Or. ;
  PropertyName == 'BREAK' ;
  .Or. ;
  PropertyName == 'FOCUSED' ;
  .Or. ;
  PropertyName == 'TITLEBAR' ;
  .Or. ;
  PropertyName == 'SYSMENU' ;
  .Or. ;
  PropertyName == 'SIZABLE' ;
  .Or. ;
  PropertyName == 'MAXBUTTON' ;
  .Or. ;
  PropertyName == 'MINBUTTON' ;
  .Or. ;
  PropertyName == 'AUTORELEASE' ;
  .Or. ;
  PropertyName == 'TOPMOST' ;
  .Or. ;
  PropertyName == 'HELPBUTTON' ;
  .Or. ;
  PropertyName == 'VERTICAL' ;
  .Or. ;
  PropertyName == 'HOTTRACK' ;
  .Or. ;
  PropertyName == 'BUTTONS' ;
  .Or. ;
  PropertyName == 'CENTER' ;
  .Or. ;
  PropertyName == 'AUTOPLAY' ;
  .Or. ;
  PropertyName == 'SMOOTH' ;
  .Or. ;
  PropertyName == 'TODAY' ;
  .Or. ;
  PropertyName == 'TODAYCIRCLE' ;
  .Or. ;
  PropertyName == 'WEEKNUMBERS' ;
  .Or. ;
  PropertyName == 'AUTOSIZEWINDOW' ;
  .Or. ;
  PropertyName == 'AUTOSIZEMOVIE' ;
  .Or. ;
  PropertyName == 'ERRORDLG' ;
  .Or. ;
  PropertyName == 'MENU' ;
  .Or. ;
  PropertyName == 'OPEN' ;
  .Or. ;
  PropertyName == 'PLAYBAR' ;
  .Or. ;
  PropertyName == 'SHOWALL' ;
  .Or. ;
  PropertyName == 'SHOWMODE' ;
  .Or. ;
  PropertyName == 'SHOWNAME' ;
  .Or. ;
  PropertyName == 'SHOWPOSITION' ;
  .Or. ;
  PropertyName == 'FONTBOLD' ;
  .Or. ;
  PropertyName == 'LOCK' ;
  .Or. ;
  PropertyName == 'VSCROLLBAR' ;
  .Or. ;
  PropertyName == 'HSCROLLBAR' ;
  .Or. ;
  PropertyName == 'FONTITALIC' ;
  .Or. ;
  PropertyName == 'FONTUNDERLINE' ;
  .Or. ;
  PropertyName == 'FONTSTRIKEOUT' ;
  .Or. ;
  PropertyName == 'TABSTOP' ;
  .Or. ;
  PropertyName == 'TRANSPARENT' ;
  .Or. ;
  PropertyName == 'MULTISELECT' ;
  .Or. ;
  PropertyName == 'SORT' ;
  .Or. ;
  PropertyName == 'DISPLAYEDIT' ;
  .Or. ;
  PropertyName == 'ALLOWEDIT' ;
  .Or. ;
  PropertyName == 'ALLOWAPPEND' ;
  .Or. ;
  PropertyName == 'ALLOWDELETE' ;
  .Or. ;
  PropertyName == 'LINES' ;
  .Or. ;
  PropertyName == 'VIRTUAL' ;
  .Or. ;
  PropertyName == 'READONLY' ;
  .Or. ;
  PropertyName == 'WRAP' ;
  .Or. ;
  PropertyName == 'STRETCH' ;
  .Or. ;
  PropertyName == 'RIGHTALIGN' ;
  .Or. ;
  PropertyName == 'SHOWNONE' ;
  .Or. ;
  PropertyName == 'ROOTBUTTON' ;
  .Or. ;
  PropertyName == 'UPDOWN' ;
  .Or. ;
  PropertyName == 'PASSWORD' ;
  .Or. ;
  PropertyName == 'AUTOSIZE' ;
  .Or. ;
  PropertyName == 'VIRTUAL SIZED' ;
  .Or. ;
  PropertyName == 'ITEMIDS' ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'CHECKBOX' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'CHECKBUTTON' )

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ]  , aRow [1] + ':' , { '.T.' , '.F.' } , aRow [2] ) )

 ElseIf PropertyName == 'CASECONVERT'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'LOWER' , 'NONE' , 'UPPER' } , aRow [2] ) )

 ElseIf PropertyName == 'ALIGNMENT'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'LEFT' , 'RIGHT' , 'CENTER' } , aRow [2] ) )

 ElseIf PropertyName == 'ROW' ;
  .Or. ;
  PropertyName == 'COL' ;
  .Or. ;
  PropertyName == 'WIDTH' ;
  .Or. ;
  PropertyName == 'VIRTUAL WIDTH' ;
  .Or. ;
  PropertyName == 'VIRTUAL HEIGHT' ;
  .Or. ;
  PropertyName == 'SPACING' ;
  .Or. ;
  PropertyName == 'HEIGHT' ;
  .Or. ;
  PropertyName == 'RANGEMAX' ;
  .Or. ;
  PropertyName == 'RANGEMIN' ;
  .Or. ;
  PropertyName == 'INCREMENT' ;
  .Or. ;
  PropertyName == 'FONTSIZE' ;
  .Or. ;
  PropertyName == 'PAGECOUNT' ;
  .Or. ;
  PropertyName == 'INTERVAL' ;
  .Or. ;
  PropertyName == 'MAXLENGTH' ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'BROWSE' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'GRID' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'TAB' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'TREE' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'RADIOGROUP' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'COMBOBOX' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'SLIDER' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'SPINNER' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'PROGRESSBAR' ) ;
  .Or. ;
  ( PropertyName == 'VALUE' .And. SelectedControlType == 'LISTBOX' )

  Result := ALLTRIM ( PickNumericPropertyValue ( 'Edit' , aRow [1] + ':' , aRow [2] ) )

 ElseIf PropertyName == 'WINDOWTYPE'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'CHILD' , 'MAIN' , 'MODAL' , 'SPLITCHILD' , 'STANDARD' , 'PANEL' } , aRow [2] ) )

 ElseIf PropertyName == 'HELPBUTTON'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'CHILD' , 'MAIN' , 'MODAL' , 'SPLITCHILD' , 'STANDARD' , 'PANEL' } , aRow [2] ) )

 ElseIf PropertyName == 'DATATYPE'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'CHARACTER' , 'DATE' , 'NUMERIC' } , aRow [2] ) )

 ElseIf PropertyName == 'ORIENTATION'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'HORIZONTAL' , 'VERTICAL' } , aRow [2] ) )

 ElseIf PropertyName == 'TICKMARKS' .And. ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlname + 'Orientation' ) ) ) == 'HORIZONTAL'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'BOTH' , 'BOTTOM' ,  'NONE' , 'TOP' } , aRow [2] ) )

 ElseIf PropertyName == 'TICKMARKS' .And. ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlname + 'Orientation' ) ) ) == 'VERTICAL'

  Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'BOTH' , 'LEFT' , 'NONE' , 'RIGHT' } , aRow [2] ) )

 ElseIf PropertyName == 'BACKCOLOR'

  Result := PickColorValue()

 ElseIf PropertyName == 'FONTCOLOR'

  Result := PickColorValue()

 ElseIf PropertyName == 'FORECOLOR'

  Result := PickColorValue()

 Else

  Result := ALLTRIM ( PickCharacterPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , aRow [2] ) )

 EndIf

 if _HMG_DialogCancelled == .T.
  Return
 else
  this.cell ( this.value , 2 ) := ALLTRIM ( Result )
  __MVPUT ( cControlName + cName , Result )

 endif

return

procedure Sp1
local n
local i
Local aTemp
Local t
Local cNewToolBar

 aTemp := GetChild()

 n := aTemp [2]
 t := aTemp [1]

 if t == 0
  return
 endif

 if t == 1

  if HB_URIGHT ( HMG_UPPER ( n ) , 4 ) == '.FMG'
   n := HB_ULEFT ( n , HMG_LEN (n) - 4 )
  endif

  for i := 1 to spb.list_1.itemcount
   if ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 2 ) ) ) == 'WINDOW'
    if ALLTRIM(HMG_UPPER(n)) == ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 1 ) ) )
     msgstop( aMsgs [ 189 ] ,'HMG IDE')
     return
    endif
   endif
  next i

  spb.list_1.additem ( { n , 'Window' } )

 elseif t == 2

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'Browse' } )

   * Browse Properties

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowAppend' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowAppend' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowDelete' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowDelete' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fields' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fields' , "{''}" )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fontname' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Format' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Format' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' , "{''}" )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'InputMask' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'InputMask' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lock' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lock' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnlyFields' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnlyFields' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Valid' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Valid' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValidMessages' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValidMessages' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'When' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'When' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' , '{0}' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'WorkArea' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'WorkArea' , 'Nil' )

   * Browse Events

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

  endif

 elseif t == 3

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'ComboBox' } )

   * ComboBox Properties

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DisplayEdit' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DisplayEdit' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '100' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' , '{""}' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '100' )

   * ComboBox Events

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDisplayChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDisplayChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnEnter' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnEnter' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

  endif

 elseif t == 4

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'EditBox' } )

   * EditBox Properties

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'hScrollBar' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'hScrollBar' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

   * EditBox Events

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

  endif

 elseif t == 5

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'ListBox' } )

   * ListBox Properties

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '100' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' , '{""}' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '100' )

   * ListBox Events

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

  endif

 elseif t == 6

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'Grid' } )

   * Grid Properties

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnControls' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnControls' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnValid' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnValid' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnWhen' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnWhen' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' , "{''}" )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemCount' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemCount' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' , '{ {""} }' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ShowHeaders' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ShowHeaders' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Virtual' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Virtual' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' , '{ 0 }' )

   * Grid Events

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnQueryData' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnQueryData' , 'Nil' )

  endif

 elseif t == 7

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'RichEditBox' } )

   * RichEditBox Properties

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fontname' , 'Arial' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

   * RichEditBox Events

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

  endif

 elseif t == 8

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'ToolBar' } )

   cNewToolBar := ''
   cNewToolBar := cNewToolBar + Space(8) + 'DEFINE TOOLBAR ' + N + ' BUTTONSIZE 64,64 FONT "Arial" SIZE 9 FLAT ' + CRLF
   cNewToolBar := cNewToolBar + Space (12) + 'BUTTON ' + N + '_Btn1' + ' CAPTION "" PICTURE "MINIGUI_EDIT_NEW" ACTION Nil TOOLTIP ""'+ CRLF
   cNewToolBar := cNewToolBar + Space (8) + 'END TOOLBAR' + CRLF

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'SpxToolBar' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'SpxToolBar' , cNewToolBar )

  endif

 elseif t == 9

  if ! iscontrolinsplit(n)

   spb.list_1.additem ( { n , 'Tree' } )

   * Tree Properties

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemIds' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemIds' , '.F.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemImages' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemImages' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'NodeImages' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'NodeImages' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'RootButton' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'RootButton' , '.T.' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

   * Tree Events

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

   __MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
   __MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

  endif

 endif

return

function iscontrolinsplit(n)
local i

 for i := 1 to spb.list_1.itemcount
  if ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 2 ) ) ) != 'WINDOW'
   if ALLTRIM(HMG_UPPER(n)) == ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 1 ) ) )
    msgstop( aMsgs [ 190 ] ,'HMG IDE')
    return .t.
   endif
  endif
 next i

return .f.

function GetChild()
local retval := { 0 , '' }

 define window sp9 at 0,0 width 302 height 395 + If ( IsAppThemed() , 7 , 0 ) + if( IsVistaOrLater() .And. IsAppThemed() , 6 , 0 ) title aMsgs [ 194 ] modal

  define frame frame1
   row 10
   col 10
   width 270
   height 250
   caption aMsgs [ 191 ]
  end frame

  define radiogroup radio1
   row 26
   col 40
   options { 'Window' , 'Browse' , 'ComboBox' , 'EditBox' , 'ListBox' , 'Grid' , 'RichEditBox' , 'ToolBar' , 'Tree' }
   OnChange sp9.text1.setfocus
   value 1
  end radiogroup

  define frame frame2
   row 265
   col 10
   width 270
   height 55
   caption aMsgs [ 174 ]
  end frame

  define textbox text1
   row 284
   col 22
   width 241
   value ''
  end textbox

  define button ok
   row 330
   col 45
   caption aMsgs [ 116 ]
   action if ( empty ( sp9.text1.value ) , ( MsgStop( aMsgs [ 192 ] ,'HMG IDE') , sp9.text1.setfocus ) , ( RetVal := { sp9.radio1.value , sp9.text1.value } , ThisWindow.Release ) )
  end button

  define button cancel
   row 330
   col 155
   caption aMsgs [ 117 ]
   action ( RetVal := { 0 , '' } , ThisWindow.Release )
  end button

 end window

 center window sp9

 sp9.text1.setfocus

 activate window sp9

return retval

procedure Sp2
local i

 i := spb.list_1.value

 if i == 0
  msgstop( aMsgs [ 193 ] ,'HMG IDE')
  return
 endif

 if ! msgyesno( aMsgs [ 099 ] ,'HMG IDE')
  return
 endif

 spb.list_1.deleteitem (i)

return

procedure Sp3
local c := ''
local i
local n

 if spb.list_1.itemcount == 0
  _hmgide_CurrentSplitBox := ''
  return
 endif

 c := c + space(4) + 'DEFINE SPLITBOX'

 if spb.check_1.value == .t.
  c := c +  ' BOTTOM'
 endif

 if spb.check_2.value == .t.
  c := c + ' HORIZONTAL'
 endif

 c := c + CRLF

 for i := 1 to spb.list_1.itemcount

  n := ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,1) ) )

  if ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'WINDOW'

   c := c + CRLF

   c := c + space (8) + 'LOAD WINDOW ' + spb.list_1.cell(i,1) + CRLF

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'BROWSE'

   c := c + CRLF

   c := c + space (8) + 'DEFINE BROWSE ' + spb.list_1.cell(i,1) + CRLF

   * Browse Properties

   c := c + space (12) + 'ALLOWAPPEND ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowAppend'  )  + CRLF

   c := c + space (12) + 'ALLOWDELETE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowDelete'  )  + CRLF

   c := c + space (12) + 'ALLOWEDIT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit'  )  + CRLF

   c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

   c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

   c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col'  )  + CRLF

   c := c + space (12) + 'DYNAMICBACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )  + CRLF

   c := c + space (12) + 'DYNAMICFORECOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )  + CRLF

   c := c + space (12) + 'FIELDS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fields' )  + CRLF

   c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

   c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

   c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

   c := c + space (12) + 'FONTNAME "' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName'  ) + '"' + CRLF

   c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

   c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize'  )  + CRLF

   c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

   c := c + space (12) + 'FORMAT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Format' )  + CRLF

   c := c + space (12) + 'HEADERS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )  + CRLF

   c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height'  )  + CRLF

   c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId'  )  + CRLF

   c := c + space (12) + 'IMAGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image'  )  + CRLF

   c := c + space (12) + 'INPUTMASK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'InputMask' )  + CRLF

   c := c + space (12) + 'JUSTIFY ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )  + CRLF

   IF HMG_UPPER ( ALLTRIM ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' ) ) ) == '.T.'
    c := c + space (12) + 'NOLINES .F.'   + CRLF
   ELSE
    c := c + space (12) + 'NOLINES .T.' + CRLF
   ENDIF

   c := c + space (12) + 'LOCK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lock' )  + CRLF

   c := c + space (12) + 'READONLYFIELDS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnlyFields' )  + CRLF

   c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

   c := c + space (12) + 'VALID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Valid' )  + CRLF

   c := c + space (12) + 'VALIDMESSAGES ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValidMessages' )  + CRLF

   c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

   c := c + space (12) + 'VSCROLLBAR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )  + CRLF

   c := c + space (12) + 'TOOLTIP "' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

   c := c + space (12) + 'WHEN ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'When' )  + CRLF

   c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

   c := c + space (12) + 'WIDTHS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths'  )  + CRLF

   c := c + space (12) + 'WORKAREA ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'WorkArea' )  + CRLF

   * Browse Events

   c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

   c := c + space (12) + 'ONDBLCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )  + CRLF

   c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus'  )  + CRLF

   c := c + space (12) + 'ONHEADCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )  + CRLF

   c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF


   c := c + space (8) + 'END BROWSE' + CRLF

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'COMBOBOX'

   c := c + CRLF

   c := c + space (8) + 'DEFINE COMBOBOX ' + spb.list_1.cell(i,1) + CRLF

   * ComboBox Properties

   c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

   c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col'  )  + CRLF

   c := c + space (12) + 'DISPLAYEDIT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DisplayEdit' )  + CRLF

   c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

   c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

   c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"' + CRLF

   c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

   c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

   c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

   c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

   c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

   c := c + space (12) + 'ITEMS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )  + CRLF

   IF HMG_UPPER ( ALLTRIM ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' ) ) ) <> 'NIL'
    c := c + space (12) + 'ITEMSOURCE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' )  + CRLF
   ENDIF

   c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

   c := c + space (12) + 'SORT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )  + CRLF

   c := c + space (12) + 'TABSTOP ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

   c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"'  + CRLF

   c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

   IF ! EMPTY ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' ) )
    c := c + space (12) + 'VALUESOURCE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' )  + CRLF
   ENDIF

   c := c + space (12) + 'VISIBLE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

   c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

   * ComboBox Events

   c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

   c := c + space (12) + 'ONDISPLAYCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDisplayChange' )  + CRLF

   c := c + space (12) + 'ONENTER ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnEnter' )  + CRLF

   c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

   c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF


   c := c + space (8) + 'END COMBOBOX' + CRLF

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'EDITBOX'

   c := c + CRLF

   c := c + space (8) + 'DEFINE EDITBOX ' + spb.list_1.cell(i,1) + CRLF

   * EditBox Properties

   c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

   c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

   c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

   IF ALLTRIM ( HMG_UPPER ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' ) ) ) <> 'NIL'
    c := c + space (12) + 'FIELD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )  + CRLF
   ENDIF

   c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

   c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

   c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

   c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"'  + CRLF

   c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

   c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

   c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

   c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

   c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

   c := c + space (12) + 'HSCROLLBAR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'hScrollBar' )  + CRLF

   c := c + space (12) + 'MAXLENGTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )  + CRLF

   c := c + space (12) + 'READONLY ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )  + CRLF

   c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

   c := c + space (12) + 'TABSTOP ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

   c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

   c := c + space (12) + 'VALUE ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' ) + '"' + CRLF

   c := c + space (12) + 'VISIBLE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

   c := c + space (12) + 'VSCROLLBAR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )  + CRLF

   c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

   * EditBox Events

   c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

   c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

   c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

   c := c + space (8) + 'END EDITBOX' + CRLF

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'GRID'

   c := c + CRLF

   c := c + space (8) + 'DEFINE GRID ' + spb.list_1.cell(i,1) + CRLF

   * Grid Properties

   c := c + space (12) + 'ALLOWEDIT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' )  + CRLF

   c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

   c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

   c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

   c := c + space (12) + 'COLUMNCONTROLS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnControls' )  + CRLF

   c := c + space (12) + 'COLUMNVALID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnValid' )  + CRLF

   c := c + space (12) + 'COLUMNWHEN ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnWhen' )  + CRLF

   c := c + space (12) + 'DYNAMICBACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )  + CRLF

   c := c + space (12) + 'DYNAMICFORECOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )  + CRLF

   c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

   c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

   c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

   c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"'  + CRLF

   c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

   c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

   c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

   c := c + space (12) + 'HEADERS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )  + CRLF

   c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

   c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

   c := c + space (12) + 'IMAGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' )  + CRLF

   c := c + space (12) + 'ITEMCOUNT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemCount' )  + CRLF

   c := c + space (12) + 'ITEMS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )  + CRLF

   c := c + space (12) + 'JUSTIFY ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )  + CRLF

   IF HMG_UPPER ( ALLTRIM ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' ) ) ) == '.T.'
    c := c + space (12) + 'NOLINES .F.'   + CRLF
   ELSE
    c := c + space (12) + 'NOLINES .T.' + CRLF
   ENDIF

   c := c + space (12) + 'MULTISELECT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )  + CRLF

   c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

   c := c + space (12) + 'SHOWHEADERS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ShowHeaders' )  + CRLF

   c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

   c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

   c := c + space (12) + 'VIRTUAL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Virtual' )  + CRLF

   c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

   c := c + space (12) + 'WIDTHS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' )  + CRLF

   * Grid Events

   c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

   c := c + space (12) + 'ONDBLCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )  + CRLF

   c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

   c := c + space (12) + 'ONHEADCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )  + CRLF

   c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

   c := c + space (12) + 'ONQUERYDATA ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnQueryData' )  + CRLF

   c := c + space (8) + 'END GRID' + CRLF

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'LISTBOX'

   c := c + CRLF

   c := c + space (8) + 'DEFINE LISTBOX ' + spb.list_1.cell(i,1) + CRLF

   * ListBox Properties

   c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

   c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

   c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

   c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

   c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

   c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

   c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"'  + CRLF

   c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

   c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

   c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

   c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

   c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

   c := c + space (12) + 'ITEMS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )  + CRLF

   c := c + space (12) + 'MULTISELECT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )  + CRLF

   c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

   c := c + space (12) + 'SORT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )  + CRLF

   c := c + space (12) + 'TABSTOP ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

   c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

   c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

   c := c + space (12) + 'VISIBLE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

   c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

   * ListBox Events

   c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

   c := c + space (12) + 'ONDBLCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )  + CRLF

   c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

   c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

   c := c + space (8) + 'END LISTBOX' + CRLF

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'RICHEDITBOX'

   c := c + CRLF

   c := c + space (8) + 'DEFINE RICHEDITBOX ' + spb.list_1.cell(i,1) + CRLF

   * RichEditBox Properties

   c := c + space (12) + 'BACKCOLOR ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

   c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

   c := c + space (12) + 'COL ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

   IF HMG_UPPER ( ALLTRIM ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' ) ) ) <> 'NIL'
    c := c + space (12) + 'FIELD ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )  + CRLF
   ENDIF

   c := c + space (12) + 'FONTBOLD ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

   c := c + space (12) + 'FONTITALIC ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

   c := c + space (12) + 'FONTNAME ' + '"' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fontname' ) + '"' + CRLF

   c := c + space (12) + 'FONTUNDERLINE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

   c := c + space (12) + 'FONTSIZE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

   c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

   c := c + space (12) + 'HEIGHT ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

   c := c + space (12) + 'HELPID ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

   c := c + space (12) + 'MAXLENGTH ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )  + CRLF

   c := c + space (12) + 'READONLY ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )  + CRLF

   c := c + space (12) + 'ROW ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

   c := c + space (12) + 'TABSTOP ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

   c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

   c := c + space (12) + 'VALUE ' + '"' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' ) + '"' + CRLF

   c := c + space (12) + 'VISIBLE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

   c := c + space (12) + 'WIDTH ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

   * RichEditBox Events

   c := c + space (12) + 'ONCHANGE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

   c := c + space (12) + 'ONGOTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

   c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

   c := c + space (8) + 'END RICHEDITBOX' + CRLF

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'TOOLBAR'

   c := c + CRLF

   c := c + __MVGET ( ALLTRIM(n) + 'SpxToolBar' )

  elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'TREE'

   c := c + CRLF

   c := c + space (8) + 'DEFINE TREE ' + ALLTRIM ( n ) + ' AT ' +  __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' ) + ' , ' +  __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' ) + ' WIDTH ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' ) + ' HEIGHT ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' ) + ' VALUE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + ' FONT ' + chr(34) + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + chr(34) + ' SIZE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' ) =='.T.',' BOLD','') + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' ) =='.T.',' ITALIC','') + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' ) =='.T.',' UNDERLINE','') + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' ) =='.T.',' STRIKEOUT','') + ' TOOLTIP ' + chr(34) + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + chr(34)  + ' ON GOTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + ' ON CHANGE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' ) + ' ON LOSTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' ) + ' ON DBLCLICK ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' ) + ' NODEIMAGES ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'NodeImages' ) + ' ITEMIMAGES ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemImages' ) + if ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'RootButton' ) == '.T.' , '' , ' NOROOTBUTTON' ) + if ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemIds' ) == '.T.' , ' ITEMIDS' , '' ) + ' HELPID ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' ) + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' ) =='.T.',' BREAK','') + CRLF

   c := c + space (8) + 'END TREE' + CRLF

  endif

 next i

 c := c + CRLF

 c := c + space(4) + 'END SPLITBOX' + CRLF

 _hmgide_CurrentSplitBox := c

 DesignFormModified := .T.

return

procedure sp4
local ant
local cur
local i

 i := spb.list_1.value

 if i == 0
  msgstop( aMsgs [ 193 ] ,'HMG IDE')
  return
 endif

 if i == 1
  return
 endif

 ant := spb.list_1.item(i-1)
 cur := spb.list_1.item(i)

 spb.list_1.item(i-1) := cur
 spb.list_1.item(i) := ant

 spb.list_1.value := i - 1

return

procedure sp5
local cur
local pos
local i

 i := spb.list_1.value

 if i == 0
  msgstop( aMsgs [ 193 ] ,'HMG IDE')
  return
 endif

 if i == spb.list_1.itemcount
  return
 endif

 pos := spb.list_1.item(i+1)
 cur := spb.list_1.item(i)

 spb.list_1.item(i+1) := cur
 spb.list_1.item(i) := pos

 spb.list_1.value := i + 1

return

*------------------------------------------------------------------------------*
Procedure SortModuleList (value)
*------------------------------------------------------------------------------*
Local i , j
Local aux
Local last

 last := Project.List_1.Item ( Project.List_1.ItemCount )

 For i := 2 To Project.List_1.ItemCount - 1

  For j := i+1 To Project.List_1.ItemCount

   if HMG_UPPER ( Project.List_1.Item ( i ) ) > HMG_UPPER ( Project.List_1.Item ( j ) )

    aux := Project.List_1.Item ( i )
    Project.List_1.Item ( i ) := Project.List_1.Item ( j )
    Project.List_1.Item ( j ) := aux

   EndIf

  Next j

 Next i

 if VALTYPE ( value ) = 'N'
  Project.List_1.Value := value
 else

  For i := 1 to Project.List_1.ItemCount

   if  ALLTRIM ( HMG_UPPER(Project.List_1.Item ( i ) ) ) ;
    == ;
    ALLTRIM ( HMG_UPPER( Last ) )

    Project.List_1.Value := i
    Exit

   endif

  Next i

 endif

Return

*------------------------------------------------------------------------------*
Procedure SortFormList (value)
*------------------------------------------------------------------------------*
Local i , j
Local aux
Local last

 last := Project.List_2.Item ( Project.List_2.ItemCount )

 For i := 1 To Project.List_2.ItemCount - 1

  For j := i+1 To Project.List_2.ItemCount

   if HMG_UPPER(Project.List_2.Item ( i ) ) > HMG_UPPER ( Project.List_2.Item ( j ) )

    aux := Project.List_2.Item ( i )
    Project.List_2.Item ( i ) := Project.List_2.Item ( j )
    Project.List_2.Item ( j ) := aux

   EndIf

  Next j

 Next i

 if VALTYPE ( value ) = 'N'
  Project.List_2.Value := value
 else

  For i := 1 to Project.List_2.ItemCount

   if  ALLTRIM ( HMG_UPPER(Project.List_2.Item ( i ) ) ) ;
    == ;
    ALLTRIM ( HMG_UPPER( Last ) )

    Project.List_2.Value := i
    Exit

   endif

  Next i

 endif

Return

*------------------------------------------------------------------------------*
Procedure SortReportList (value)
*------------------------------------------------------------------------------*
Local i , j
Local aux
Local last

 last := Project.List_3.Item ( Project.List_3.ItemCount )

 For i := 1 To Project.List_3.ItemCount - 1

  For j := i+1 To Project.List_3.ItemCount

   if HMG_UPPER(Project.List_3.Item ( i ) ) > HMG_UPPER ( Project.List_3.Item ( j ) )

    aux := Project.List_3.Item ( i )
    Project.List_3.Item ( i ) := Project.List_3.Item ( j )
    Project.List_3.Item ( j ) := aux

   EndIf

  Next j

 Next i

 if VALTYPE ( value ) = 'N'
  Project.List_3.Value := value
 else

  For i := 1 to Project.List_3.ItemCount

   if  ALLTRIM ( HMG_UPPER(Project.List_3.Item ( i ) ) ) ;
    == ;
    ALLTRIM ( HMG_UPPER( Last ) )

    Project.List_3.Value := i
    Exit

   endif

  Next i

 endif

Return

*------------------------------------------------------------------------------*
Procedure SortIncludeList (value)
*------------------------------------------------------------------------------*
Local i , j
Local aux
Local last

 last := Project.List_4.Item ( Project.List_4.ItemCount )

 For i := 1 To Project.List_4.ItemCount - 1

  For j := i+1 To Project.List_4.ItemCount

   if HMG_UPPER(Project.List_4.Item ( i ) ) > HMG_UPPER ( Project.List_4.Item ( j ) )

    aux := Project.List_4.Item ( i )
    Project.List_4.Item ( i ) := Project.List_4.Item ( j )
    Project.List_4.Item ( j ) := aux

   EndIf

  Next j

 Next i

 if VALTYPE ( value ) = 'N'
  Project.List_4.Value := value
 else

  For i := 1 to Project.List_4.ItemCount

   if  ALLTRIM ( HMG_UPPER(Project.List_4.Item ( i ) ) ) ;
    == ;
    ALLTRIM ( HMG_UPPER( Last ) )

    Project.List_4.Value := i
    Exit

   endif

  Next i

 endif

Return


*------------------------------------------------------------------------------*
Procedure hmgmake (cParam1,cParam2,cParam3,cParam4,cParam5,cParam6,cParam7,cParam8)
*------------------------------------------------------------------------------*
Local i , o , c , l
PUBLIC cProjectFile  := ''
PUBLIC cLibraries  := ''
PUBLIC cLinkerLibraries  := ''
PUBLIC lDebuggerSupport  := .F.
PUBLIC lFullBuild  := .F.
PUBLIC aParams [8]
PUBLIC cProjectBaseName  := ''
PUBLIC aModifiedFiles  := {}
PUBLIC aFilesToCompile  := {}
PUBLIC aFormsModified  := {}
PUBLIC aProjectModuleFiles := {}
PUBLIC cProjectFolder  := ''
PUBLIC cBackupFolder  := ''
PUBLIC aDependences  := {}
PUBLIC lConsoleMode  := .F.
PUBLIC cInclude   := ''

 aParams [1] := cParam1
 aParams [2] := cParam2
 aParams [3] := cParam3
 aParams [4] := cParam4
 aParams [5] := cParam5
 aParams [6] := cParam6
 aParams [7] := cParam7
 aParams [8] := cParam8

 cProjectFile := aParams [1]

 For i := 2 to pcount()

  If HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/H:'

   cHmgFolder := HB_URIGHT ( aParams [i] , HMG_LEN(aParams [i]) - 3 )

  ElseIf HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/L:'

   cLibraries := HB_URIGHT ( aParams [i] , HMG_LEN(aParams [i]) - 3 )

  ElseIf HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/I:'

   cInclude := HB_URIGHT ( aParams [i] , HMG_LEN(aParams [i]) - 3 )

  ElseIf HMG_UPPER ( HB_ULEFT (  aParams [i] , 2 ) ) == '/D'

   lDebuggerSupport := .T.

  ElseIf HMG_UPPER ( HB_ULEFT (  aParams [i] , 2 ) ) == '/C'

   lConsoleMode := .T.

  ElseIf HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/F'

   lFullBuild := .T.

  Else

   ShowSyntaxError()
   Return

  EndIf

 Next i

 if file ( cProjectFile )

  if HMG_UPPER ( HB_URIGHT ( ALLTRIM ( cProjectFile ) , 4 ) ) <> '.HBP'

   ShowSyntaxError()
   Return

  endif

 elseif file ( cProjectFile + '.hbp' )

  cProjectFile := cProjectFile + '.hbp'

 Else

  MsgStop ( 'Peoject File "'+ cProjectFile +'" Not Found' , 'HMG MAKE: File Error' )
  Return

 endif

 if HB_UTF8RAT ( '\' , cProjectFile ) == 0

  cProjectFolder := GetCurrentFolder()

 else

  cProjectFolder := HB_ULEFT ( cProjectFile , HB_UTF8RAT ( '\' , cProjectFile ) )

  cBackupFolder := GetCurrentFolder()

  SetCurrentFolder( cProjectFolder )

 endif

 if HB_URIGHT ( cHmgFolder , 1 ) == '\'
  cHmgFolder := HB_ULEFT ( cHmgFolder , HMG_LEN (cHmgFolder) - 1 )
 endif

 if HB_URIGHT ( cLibraries , 1 ) == ';'
  cLibraries := HB_ULEFT ( cLibraries , HMG_LEN (cLibraries) - 1 )
 endif

 if .Not. Empty (cLibraries)
  cLinkerLibraries := '-l' + HB_UTF8STRTRAN ( cLibraries , ';' , ' -l' )
 else
  cLinkerLibraries := ''
 endif

 cProjectBaseName := HB_ULEFT ( cProjectFile , HMG_LEN ( cProjectFile ) - 4 )

 *.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*

 * Create Programs List ************************************************

 c := HB_MEMOREAD ( cProjectFile )

 o := ''

 For i := 1 To MlCount (c)

  l := ALLTRIM( MemoLine( c , , i ) )

  if HMG_LOWER( HB_URIGHT( l, 4 ) ) == '.prg'
   o := o + l + CRLF
  EndIf

 Next i

 SaveString ( cProjectBaseName + '.hbp' , o )

 * Execute Build.bat

 DEFINE WINDOW newbuild ;
  AT 0 , 0 ;
  WIDTH 400 ;
  HEIGHT 150 ;
  TITLE '' ;
  MODAL ;
  NOCAPTION ;
  ON INIT Build()

  DEFINE LABEL L
   ROW 60
   COL 130
   WIDTH 200
   HEIGHT 100
   VALUE 'Building in '+ IF (Form_Main.IsBuild64.CHECKED == .T., "64-bits", "32-bits") +' ...'
   FONTBOLD .T.
  END LABEL

 END WINDOW

 newbuild.center
 newbuild.activate

Return

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

Static Procedure Build()
LOCAL xLog, ExeName := Array(1)
Local cOption := ' /n '

 // April, 2016
 disablewindow (getformhandle('Form_Main'))
 disablewindow (getformhandle('project'))
 disablewindow (getformhandle('properties'))

 RELEASE KEY F2 OF Form_Main
 RELEASE KEY F5 OF Form_Main
 RELEASE KEY F8 OF Form_Main
 RELEASE KEY F9 OF Form_Main
 RELEASE KEY F11 OF Form_Main

 RELEASE KEY F2 OF PROJECT
 RELEASE KEY F5 OF PROJECT
 RELEASE KEY F8 OF PROJECT
 RELEASE KEY F9 OF PROJECT
 RELEASE KEY F11 OF PROJECT

 RELEASE KEY F2 OF PROPERTIES
 RELEASE KEY F5 OF PROPERTIES
 RELEASE KEY F8 OF PROPERTIES
 RELEASE KEY F9 OF PROPERTIES
 RELEASE KEY F11 OF PROPERTIES


 IF ENABLEDEBUGGER == .T.
  cOption := ' /n /d '
  ENABLEDEBUGGER := .F.
 ENDIF

 IF RESETINCREMENTAL == .T.
  cOption := ' -clean '
  RESETINCREMENTAL := .F.
  newbuild.l.value := 'Cleaning...'
 ENDIF

IF Form_Main.IsBuild64.CHECKED == .T.

 if file ( cHmgFolder + "\BUILD64.BAT" )
  EXECUTE FILE cHmgFolder + "\BUILD64.BAT " + cOption + cProjectBaseName + '.hbp ' + cProjectBaseName + '.hbc' WAIT HIDE
 else
  msgstop (cHmgFolder + "\BUILD64.BAT " + 'Not Found!','HMG-IDE')
 endif

ELSE

 if file ( cHmgFolder + "\BUILD.BAT" )
  EXECUTE FILE cHmgFolder + "\BUILD.BAT " + cOption + cProjectBaseName + '.hbp ' + cProjectBaseName + '.hbc' WAIT HIDE
 else
  msgstop (cHmgFolder + "\BUILD.BAT " + 'Not Found!','HMG-IDE')
 endif

ENDIF

 ON KEY F2 OF Form_Main ACTION OpenProject()
 ON KEY F5 OF Form_Main ACTION RunApplication()
 ON KEY F8 OF Form_Main ACTION ( ENABLEDEBUGGER := .T. , RunApplication() )
 ON KEY F9 OF Form_Main ACTION NewForm()
 ON KEY F11 OF Form_Main ACTION NewModule()

 ON KEY F2 OF PROJECT ACTION OpenProject()
 ON KEY F5 OF PROJECT ACTION RunApplication()
 ON KEY F8 OF PROJECT ACTION ( ENABLEDEBUGGER := .T. , RunApplication() )
 ON KEY F9 OF PROJECT ACTION NewForm()
 ON KEY F11 OF PROJECT ACTION NewModule()

 ON KEY F2 OF PROPERTIES ACTION OpenProject()
 ON KEY F5 OF PROPERTIES ACTION RunApplication()
 ON KEY F8 OF PROPERTIES ACTION ( ENABLEDEBUGGER := .T. , RunApplication() )
 ON KEY F9 OF PROPERTIES ACTION NewForm()
 ON KEY F11 OF PROPERTIES ACTION NewModule()


 if file('error.log')

  xLog := ALLTRIM(HB_MEMOREAD('error.log'))

  showlog(xlog)

 else

  if cOption <> ' -clean '

   if file ( cProjectBaseName + '.exe ' )

    EXECUTE FILE cProjectBaseName + '.exe '

   elseif ADIR( cProjectFolder + "\*.exe" ) > 0

                                ADIR( cProjectFolder + "\*.exe", ExeName )
    EXECUTE FILE ExeName [1]

   endif

  endif

 EndIf

 newbuild.release

 DO EVENTS
 enablewindow (getformhandle('Form_Main'))
 enablewindow (getformhandle('project'))
 enablewindow (getformhandle('properties'))

return

*------------------------------------------------------------------------------*
Static Procedure ShowSyntaxError()
*------------------------------------------------------------------------------*
// Empty Function
Return


#ifdef _DEBUG_
*------------------------------------------------------------------------------*
PROCEDURE SaveLog
*------------------------------------------------------------------------------*
   LOCAL cBakFolder, cFile

   cBakFolder := GetCurrentFolder()

   cFile := PutFile ( { { 'Text Files', '*.txt' } }, aMsgs[ 216 ] )

   if ! Empty ( cFile )
      IF AllTrim ( HMG_UPPER ( hb_URight ( cFile, 4 ) ) ) <> '.TXT'
         cFile := cFile + '.txt'
      ENDIF
      SaveString ( cFile, cUserLog )
   ENDIF

   SetCurrentFolder ( cBakFolder )

RETURN

#endif

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
PROCEDURE _Spx_ToolBarBuilder( cName )
*------------------------------------------------------------------------------*
   PRIVATE _TbName := cName
   PRIVATE _TbNames := {}
   PRIVATE _TbCaptions := {}
   PRIVATE _TbPictures := {}
   PRIVATE _TbActions := {}
   PRIVATE _TbToolTips := {}
   PRIVATE _TbSeparators := {}
   PRIVATE _TbChecks := {}
   PRIVATE _TbAutoSizes := {}
   PRIVATE _TbGroups := {}
   PRIVATE _TbDropDowns := {}
   PRIVATE _TbWholeDropDowns := {}

   PRIVATE _TbFontName := 'Arial'
   PRIVATE _TbFontSize := 9
   PRIVATE _TbFontBold := .F.
   PRIVATE _TbFontItalic := .F.
   PRIVATE _TbFontUnderLine := .F.
   PRIVATE _TbFontStrikeout := .F.
   PRIVATE _TbButtonWidth := '64'
   PRIVATE _TbButtonHeight := '64'
   PRIVATE _TbButtonImageWidth := ''
   PRIVATE _TbButtonImageHeight := ''
   PRIVATE _TbToolTip := ''
   PRIVATE _TbFlat := .T.
   PRIVATE _TbBottom := .F.
   PRIVATE _TbRightText := .F.
   PRIVATE _TbBorder := .F.
   PRIVATE _TbStrictWidth := .F.
   PRIVATE _TbBreak := .F.

   if ! _IsWIndowDefined ( DesignForm )
      MsgStop ( aMsgs[ 086 ], 'HMG IDE' )
      RETURN
   ENDIF

   AAdd ( _TbNames, '' )
   AAdd ( _TbCaptions, '' )
   AAdd ( _TbPictures, '' )
   AAdd ( _TbActions, '' )
   AAdd ( _TbToolTips, '' )
   AAdd ( _TbSeparators, .F. )
   AAdd ( _TbChecks, .F. )
   AAdd ( _TbAutoSizes, .F. )
   AAdd ( _TbGroups, .F. )
   AAdd ( _TbDropDowns, .F. )
   AAdd ( _TbWholeDropDowns, .F. )

   DEFINE WINDOW TbDesigner ;
         AT 0, 0 ;
         WIDTH 370 ;
         HEIGHT GetTitleHeight() + 460 + 2 ;
         TITLE aMsgs[ 196 ] + cName + ']' ;
         MODAL ;
         NOSIZE

      ON KEY ESCAPE ACTION ( ;
         ThisWindow.RELEASE ;
         )

      DEFINE FRAME Frame1
         ROW 9
         COL 10
         WIDTH 225
         HEIGHT 256
      END FRAME

      DEFINE LABEL Label1
         ROW 23
         COL 25
         WIDTH 50
         VALUE 'Name:'
      END LABEL
      DEFINE TEXTBOX Text1
         ROW 20
         COL 100
         VALUE ''
         ONCHANGE _Spx_TbNameChange()
      END TEXTBOX

      DEFINE LABEL Label2
         ROW 53
         COL 25
         WIDTH 50
         VALUE 'Caption:'
      END LABEL
      DEFINE TEXTBOX Text2
         ROW 50
         COL 100
         VALUE ''
         ONCHANGE _Spx_TbCaptionChange()
      END TEXTBOX

      DEFINE LABEL Label3
         ROW 83
         COL 25
         WIDTH 50
         VALUE 'Picture:'
      END LABEL
      DEFINE TEXTBOX Text3
         ROW 80
         COL 100
         VALUE ''
         ONCHANGE _Spx_TbPictureChange()
      END TEXTBOX

      DEFINE LABEL Label4
         ROW 113
         COL 25
         WIDTH 50
         VALUE 'Action:'
      END LABEL
      DEFINE TEXTBOX Text4
         ROW 110
         COL 100
         VALUE ''
         ONCHANGE _Spx_TbActionChange()
      END TEXTBOX

      DEFINE LABEL Label4a
         ROW 143
         COL 25
         WIDTH 50
         VALUE 'ToolTip:'
      END LABEL
      DEFINE TEXTBOX Text4a
         ROW 140
         COL 100
         VALUE ''
         ONCHANGE _Spx_TbToolTipChange()
      END TEXTBOX

      DEFINE LABEL Label5
         ROW 173
         COL 25
         WIDTH 60
         VALUE 'Separator:'
      END LABEL
      DEFINE CHECKBOX Check5
         ROW 170
         COL 100
         WIDTH 20
         VALUE .F.
         ONCHANGE _Spx_TbSeparatorChange()
      END CHECKBOX

      DEFINE LABEL Label6
         ROW 203
         COL 25
         WIDTH 50
         VALUE 'AutoSize:'
      END LABEL
      DEFINE CHECKBOX Check6
         ROW 200
         COL 100
         WIDTH 20
         VALUE .F.
         ONCHANGE _Spx_TbAutoSizeChange()
      END CHECKBOX

      DEFINE LABEL Label7
         ROW 173
         COL 130
         WIDTH 50
         VALUE 'Check:'
      END LABEL
      DEFINE CHECKBOX Check7
         ROW 170
         COL 205
         WIDTH 20
         VALUE .F.
         ONCHANGE _Spx_TbCheckChange()
      END CHECKBOX

      DEFINE LABEL Label8
         ROW 203
         COL 130
         WIDTH 50
         VALUE 'Group:'
      END LABEL
      DEFINE CHECKBOX Check8
         ROW 200
         COL 205
         WIDTH 20
         VALUE .F.
         ONCHANGE _Spx_TbGroupChange()
      END CHECKBOX

      // *

      DEFINE LABEL Label9
         ROW 233
         COL 25
         WIDTH 75
         VALUE 'DropDown:'
      END LABEL
      DEFINE CHECKBOX Check9
         ROW 230
         COL 100
         WIDTH 20
         VALUE .F.
         ONCHANGE _Spx_TbDropDownChange()
      END CHECKBOX

      DEFINE LABEL Label10
         ROW 233
         COL 130
         WIDTH 75
         VALUE 'W.DropDn.:'
      END LABEL
      DEFINE CHECKBOX Check10
         ROW 230
         COL 205
         WIDTH 20
         VALUE .F.
         ONCHANGE _Spx_TbWholeDropDownChange()
      END CHECKBOX

      // Button Bar

      DEFINE FRAME Frame3
         ROW 272
         COL 10
         WIDTH 340
         HEIGHT 36
      END FRAME

      DEFINE BUTTON button3
         ROW 276
         COL 13
         WIDTH 61
         HEIGHT 30
         PICTURE 'UP'
         ACTION _Spx_TbMoveUp()
      END BUTTON
      DEFINE BUTTON button4
         ROW 276
         COL 76
         WIDTH 61
         HEIGHT 30
         PICTURE 'DOWN'
         ACTION _Spx_TbMoveDown()
      END BUTTON
      DEFINE BUTTON button5
         ROW 276
         COL 140
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 112 ]
         ACTION _Spx_TbNext()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button6
         ROW 276
         COL 192
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 113 ]
         ACTION _Spx_TbPrior()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button7
         ROW 276
         COL 244
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 114 ]
         ACTION _Spx_TbInsert()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON
      DEFINE BUTTON button8
         ROW 276
         COL 296
         WIDTH 50
         HEIGHT 30
         CAPTION aMsgs[ 115 ]
         ACTION _Spx_TbDelete()
         FONTNAME 'Arial'
         FONTSIZE 8
      END BUTTON

      // Main List Box

      DEFINE LISTBOX List1
         ROW 315
         COL 10
         WIDTH 340
         HEIGHT 130
         ITEMS _Spx_FillTbList( cName )
         VALUE 1
         ONCHANGE TbChange()
      END LISTBOX

      // Ok / Cancel Buttons

      DEFINE BUTTON Ok
         ROW 10
         COL 250
         CAPTION aMsgs[ 116 ]
         ACTION ( ;
            _Spx_BuildToolBar(), ;
            _HMG_DialogCancelled := .F. ;
            )
      END BUTTON
      DEFINE BUTTON Cancel
         ROW 40
         COL 250
         CAPTION aMsgs[ 117 ]
         ACTION ( ;
            _HMG_DialogCancelled := .T., ;
            ThisWindow.RELEASE ;
            )
      END BUTTON

      DEFINE BUTTON Properties
         ROW 235
         COL 250
         CAPTION aMsgs[ 142 ]
         ACTION _Spx_TbProperties()
      END BUTTON

   END WINDOW

   TbDesigner.List1.VALUE := 1
   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( 1 )

   TbDesigner.Text2.VALUE := _TbCaptions[ 1 ]
   TbDesigner.Text3.VALUE := _TbPictures[ 1 ]
   TbDesigner.Text4.VALUE := _TbActions[ 1 ]
   TbDesigner.Text4a.VALUE := _TbToolTips[ 1 ]

   TbDesigner.Check5.VALUE := _TbSeparators[ 1 ]
   TbDesigner.Check6.VALUE := _TbAutoSizes[ 1 ]
   TbDesigner.Check7.VALUE := _TbChecks[ 1 ]
   TbDesigner.Check8.VALUE := _TbGroups[ 1 ]

   TbDesigner.Check9.VALUE := _TbDropDowns[ 1 ]
   TbDesigner.Check10.VALUE := _TbWholeDropDowns[ 1 ]

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

   TbDesigner.CENTER
   TbDesigner.ACTIVATE

   DoMethod ( DesignForm, 'SetFocus' )

RETURN
*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbToolTipChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbToolTips[ i ] := TbDesigner.Text4a.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbDropDownChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbDropDowns[ i ] := TbDesigner.Check9.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbWholeDropDownChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbWholeDropDowns[ i ] := TbDesigner.Check10.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbNameChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   TbDesigner.List1.Item ( i ) := AllTrim ( TbDesigner.Text1.Value )

   TbDesigner.List1.VALUE := i

   _TbNames[ i ] := TbDesigner.Text1.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbCaptionChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbCaptions[ i ] := TbDesigner.Text2.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbPictureChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbPictures[ i ] := TbDesigner.Text3.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbActionChange
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbActions[ i ] := TbDesigner.Text4.VALUE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbSeparatorChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbSeparators[ i ] := TbDesigner.Check5.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbAutoSizeChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbAutoSizes[ i ] := TbDesigner.Check6.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbCheckChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbChecks[ i ] := TbDesigner.Check7.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbGroupChange()
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   _TbGroups[ i ] := TbDesigner.Check8.VALUE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbMoveUp
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL Previous
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4
   LOCAL aux5
   LOCAL aux6
   LOCAL aux7
   LOCAL aux8
   LOCAL aux9
   LOCAL aux10

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   Previous := TbDesigner.List1.Item( i - 1 )
   Current := TbDesigner.List1.Item( i )

   TbDesigner.List1.Item( i ) := Previous
   TbDesigner.List1.Item( i - 1 ) := Current

   TbDesigner.List1.VALUE := i - 1

   aux0 := _TbNames[ i ]
   aux1 := _TbCaptions[ i ]
   aux2 := _TbPictures[ i ]
   aux3 := _TbActions[ i ]
   aux4 := _TbSeparators[ i ]
   aux5 := _TbAutoSizes[ i ]
   aux6 := _TbChecks[ i ]
   aux7 := _TbGroups[ i ]
   aux8 := _TbDropDowns[ i ]
   aux9 := _TbWholeDropDowns[ i ]
   aux10 := _TbToolTips[ i ]

   _Tbnames[ i ] := _TbNames[ i - 1 ]
   _TbCaptions[ i ] := _TbCaptions[ i - 1 ]
   _TbPictures[ i ] := _TbPictures[ i - 1 ]
   _TbActions[ i ] := _TbActions[ i - 1 ]
   _TbSeparators[ i ] := _TbSeparators[ i - 1 ]
   _TbAutoSizes[ i ] := _TbAutoSizes[ i - 1 ]
   _TbChecks[ i ] := _TbChecks[ i - 1 ]
   _TbGroups[ i ] := _TbGroups[ i - 1 ]
   _TbDropDowns[ i ] := _TbDropDowns[ i - 1 ]
   _TbWholeDropDowns[ i ] := _TbWholeDropDowns[ i - 1 ]
   _TbToolTips[ i ] := _TbToolTips[ i - 1 ]

   _TbNames[ i - 1 ] := aux0
   _TbCaptions[ i - 1 ] := aux1
   _TbPictures[ i - 1 ] := aux2
   _TbActions[ i - 1 ] := aux3
   _TbSeparators[ i - 1 ] := aux4
   _TbAutoSizes[ i - 1 ] := aux5
   _TbChecks[ i - 1 ] := aux6
   _TbGroups[ i - 1 ] := aux7
   _TbDropDowns[ i - 1 ] := aux8
   _TbWholeDropDowns[ i - 1 ] := aux9
   _TbToolTips[ i - 1 ] := aux10

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbMoveDown
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL NEXT
   LOCAL Current
   LOCAL aux0
   LOCAL aux1
   LOCAL aux2
   LOCAL aux3
   LOCAL aux4
   LOCAL aux5
   LOCAL aux6
   LOCAL aux7
   LOCAL aux8
   LOCAL aux9
   LOCAL aux10

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   IF i == c
      RETURN
   ENDIF

   Current := TbDesigner.List1.Item( i )
   NEXT := TbDesigner.List1.Item( i + 1 )

   TbDesigner.List1.Item( i ) := NEXT
   TbDesigner.List1.Item( i + 1 ) := Current

   TbDesigner.List1.VALUE := i + 1

   aux0 := _TbNames[ i ]
   aux1 := _TbCaptions[ i ]
   aux2 := _TbPictures[ i ]
   aux3 := _TbActions[ i ]
   aux4 := _TbSeparators[ i ]
   aux5 := _TbAutoSizes[ i ]
   aux6 := _TbChecks[ i ]
   aux7 := _TbGroups[ i ]
   aux8 := _TbDropDowns[ i ]
   aux9 := _TbWholeDropDowns[ i ]
   aux10 := _TbToolTips[ i ]

   _TbNames[ i ] := _TbNames[ i + 1 ]
   _TbCaptions[ i ] := _TbCaptions[ i + 1 ]
   _TbPictures[ i ] := _TbPictures[ i + 1 ]
   _TbActions[ i ] := _TbActions[ i + 1 ]
   _TbSeparators[ i ] := _TbSeparators[ i + 1 ]
   _TbAutoSizes[ i ] := _TbAutoSizes[ i + 1 ]
   _TbChecks[ i ] := _TbChecks[ i + 1 ]
   _TbGroups[ i ] := _TbGroups[ i + 1 ]
   _TbDropDowns[ i ] := _TbDropDowns[ i + 1 ]
   _TbWholeDropDowns[ i ] := _TbWholeDropDowns[ i + 1 ]
   _TbToolTips[ i ] := _TbToolTips[ i + 1 ]

   _TbNames[ i + 1 ] := aux0
   _TbCaptions[ i + 1 ] := aux1
   _TbPictures[ i + 1 ] := aux2
   _TbActions[ i + 1 ] := aux3
   _TbSeparators[ i + 1 ] := aux4
   _TbAutoSizes[ i + 1 ] := aux5
   _TbChecks[ i + 1 ] := aux6
   _TbGroups[ i + 1 ] := aux7
   _TbDropDowns[ i + 1 ] := aux8
   _TbWholeDropDowns[ i + 1 ] := aux9
   _TbToolTips[ i + 1 ] := aux10

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbNext
*------------------------------------------------------------------------------*
   LOCAL i, c

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   IF i + 1 > c

      if ! Empty ( TbDesigner.List1.Item ( i ) )

         TbDesigner.List1.additem( '' )

         AAdd ( _TbNames, '' )
         AAdd ( _TbCaptions, '' )
         AAdd ( _TbPictures, '' )
         AAdd ( _TbActions, '' )
         AAdd ( _TbSeparators, .F. )
         AAdd ( _TbAutoSizes, .F. )
         AAdd ( _TbChecks, .F. )
         AAdd ( _TbGroups, .F. )
         AAdd ( _TbDropDowns, .F. )
         AAdd ( _TbWholeDropDowns, .F. )
         AAdd ( _TbToolTips, '' )

      ENDIF

   ENDIF

   TbDesigner.List1.VALUE := i + 1

   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i + 1 )

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

   IF HMG_LEN ( _TbActions ) >= i + 1

      TbDesigner.Text2.VALUE := _TbCaptions[ i + 1 ]
      TbDesigner.Text3.VALUE := _TbPictures[ i + 1 ]
      TbDesigner.Text4.VALUE := _TbActions[ i + 1 ]
      TbDesigner.Text4a.VALUE := _TbToolTips[ i + 1 ]

      TbDesigner.Check5.VALUE := _TbSeparators[ i + 1 ]
      TbDesigner.Check6.VALUE := _TbAutoSizes[ i + 1 ]
      TbDesigner.Check7.VALUE := _TbChecks[ i + 1 ]
      TbDesigner.Check8.VALUE := _TbGroups[ i + 1 ]

      TbDesigner.Check9.VALUE := _TbDropDowns[ i + 1 ]
      TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i + 1 ]

   ELSE

      TbDesigner.Text2.VALUE := ''
      TbDesigner.Text3.VALUE := ''
      TbDesigner.Text4.VALUE := ''
      TbDesigner.Text4a.VALUE := ''

      TbDesigner.Check5.VALUE := .F.
      TbDesigner.Check6.VALUE := .F.
      TbDesigner.Check7.VALUE := .F.
      TbDesigner.Check8.VALUE := .F.

      TbDesigner.Check9.VALUE := .F.
      TbDesigner.Check10.VALUE := .F.

   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbPrior
*------------------------------------------------------------------------------*
   LOCAL i

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF i == 1
      RETURN
   ENDIF

   TbDesigner.List1.VALUE := i - 1

   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i - 1 )

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

   TbDesigner.Text2.VALUE := _TbCaptions[ i - 1 ]
   TbDesigner.Text3.VALUE := _TbPictures[ i - 1 ]
   TbDesigner.Text4.VALUE := _TbActions[ i - 1 ]
   TbDesigner.Text4a.VALUE := _TbToolTips[ i - 1 ]

   TbDesigner.Check5.VALUE := _TbSeparators[ i - 1 ]
   TbDesigner.Check6.VALUE := _TbAutoSizes[ i - 1 ]
   TbDesigner.Check7.VALUE := _TbChecks[ i - 1 ]
   TbDesigner.Check8.VALUE := _TbGroups[ i - 1 ]

   TbDesigner.Check9.VALUE := _TbDropDowns[ i - 1 ]
   TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i - 1 ]

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbDelete
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   IF c == 1
      TbDesigner.List1.Item ( 1 ) := ""
      TbDesigner.List1.VALUE := 1
      RETURN
   ENDIF

   TbDesigner.List1.DeleteItem( i )

   ADel ( _TbNames, i )
   ADel ( _TbCaptions, i )
   ADel ( _TbPictures, i )
   ADel ( _TbActions, i )
   ADel ( _TbToolTips, i )

   ADel ( _TbSeparators, i )
   ADel ( _TbAutoSizes, i )
   ADel ( _TbChecks, i )
   ADel ( _TbGroups, i )

   ADel ( _TbDropDowns, i )
   ADel ( _TbWholeDropDowns, i )

   ASize ( _TbNames, HMG_LEN( _TbNames ) - 1 )
   ASize ( _TbCaptions, HMG_LEN( _TbCaptions ) - 1 )
   ASize ( _TbPictures, HMG_LEN( _TbPictures ) - 1 )
   ASize ( _TbActions, HMG_LEN( _TbActions ) - 1 )
   ASize ( _TbToolTips, HMG_LEN( _TbToolTips ) - 1 )

   ASize ( _TbSeparators, HMG_LEN ( _TbSeparators ) - 1 )
   ASize ( _TbAutoSizes, HMG_LEN ( _TbAutoSizes ) - 1 )
   ASize ( _TbChecks, HMG_LEN ( _TbChecks ) - 1 )
   ASize ( _TbGroups, HMG_LEN ( _TbGroups ) - 1 )

   ASize ( _TbDropDowns, HMG_LEN ( _TbDropDowns ) - 1 )
   ASize ( _TbWholeDropDowns, HMG_LEN ( _TbWholeDropDowns ) - 1 )

   c := c - 1

   IF i > c

      TbDesigner.List1.VALUE := c
      TbDesigner.Text1.VALUE := TbDesigner.List1.Item( c )
      TbDesigner.Text2.VALUE := _TbCaptions[ c ]
      TbDesigner.Text3.VALUE := _TbPictures[ c ]
      TbDesigner.Text4.VALUE := _TbActions[ c ]
      TbDesigner.Text4a.VALUE := _TbToolTips[ c ]

      TbDesigner.Check5.VALUE := _TbSeparators[ c ]
      TbDesigner.Check6.VALUE := _TbAutoSizes[ c ]
      TbDesigner.Check7.VALUE := _TbChecks[ c ]
      TbDesigner.Check8.VALUE := _TbGroups[ c ]

      TbDesigner.Check9.VALUE := _TbDropDowns[ c ]
      TbDesigner.Check10.VALUE := _TbWholeDropDowns[ c ]

   ELSE

      TbDesigner.List1.VALUE := i
      TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i )
      TbDesigner.Text2.VALUE := _TbCaptions[ i ]
      TbDesigner.Text3.VALUE := _TbPictures[ i ]
      TbDesigner.Text4.VALUE := _TbActions[ i ]
      TbDesigner.Text4a.VALUE := _TbToolTips[ i ]

      TbDesigner.Check5.VALUE := _TbSeparators[ i ]
      TbDesigner.Check6.VALUE := _TbAutoSizes[ i ]
      TbDesigner.Check7.VALUE := _TbChecks[ i ]
      TbDesigner.Check8.VALUE := _TbGroups[ i ]

      TbDesigner.Check9.VALUE := _TbDropDowns[ i ]
      TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i ]

   ENDIF

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbInsert
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL c
   LOCAL aTemp := {}
   LOCAL x

   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   c := TbDesigner.List1.ItemCount

   FOR x := 1 TO c

      IF x == i
         AAdd ( aTemp, '' )
      ENDIF

      AAdd ( aTemp, TbDesigner.List1.Item ( x ) )

   NEXT x

   TbDesigner.List1.DeleteAllItems

   FOR x := 1 TO HMG_LEN ( aTemp )
      TbDesigner.List1.AddItem ( aTemp[ x ] )
   NEXT x

   TbDesigner.List1.VALUE := i

   AAdd ( _TbNames, '' )
   AAdd ( _TbCaptions, '' )
   AAdd ( _TbPictures, '' )
   AAdd ( _TbActions, '' )
   AAdd ( _TbToolTips, '' )

   AAdd ( _TbSeparators, .F. )
   AAdd ( _TbAutoSizes, .F. )
   AAdd ( _TbChecks, .F. )
   AAdd ( _TbGroups, .F. )

   AAdd ( _TbDropDowns, .F. )
   AAdd ( _TbWholeDropDowns, .F. )


   AIns ( _TbNames, i )
   AIns ( _TbCaptions, i )
   AIns ( _TbPictures, i )
   AIns ( _TbActions, i )
   AIns ( _TbToolTips, i )

   AIns ( _TbSeparators, i )
   AIns ( _TbAutoSizes, i )
   AIns ( _TbChecks, i )
   AIns ( _TbGroups, i )

   AIns ( _TbDropDowns, i )
   AIns ( _TbWholeDropDowns, i )


   _TbNames[ i ] := ''
   _TbCaptions[ i ] := ''
   _TbPictures[ i ] := ''
   _TbActions[ i ] := ''
   _TbToolTips[ i ] := ''

   _TbSeparators[ i ] := .F.
   _TbAutoSizes[ i ] := .F.
   _TbChecks[ i ] := .F.
   _TbGroups[ i ] := .F.

   _TbDropDowns[ i ] := .F.
   _TbWholeDropDowns[ i ] := .F.


   TbDesigner.Text1.VALUE := ''
   TbDesigner.Text2.VALUE := ''
   TbDesigner.Text3.VALUE := ''
   TbDesigner.Text4.VALUE := ''
   TbDesigner.Text4a.VALUE := ''

   TbDesigner.Check5.VALUE := .F.
   TbDesigner.Check6.VALUE := .F.
   TbDesigner.Check7.VALUE := .F.
   TbDesigner.Check8.VALUE := .F.

   TbDesigner.Check9.VALUE := .F.
   TbDesigner.Check10.VALUE := .F.

   setfocus ( GetControlHandle ( 'Text1', 'TbDesigner' ) )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbChange
*------------------------------------------------------------------------------*
   LOCAL i


   i := TbDesigner.List1.VALUE

   IF i == 0
      RETURN
   ENDIF

   TbDesigner.Text1.VALUE := TbDesigner.List1.Item( i )
   TbDesigner.Text2.VALUE := _TbCaptions[ i ]
   TbDesigner.Text3.VALUE := _TbPictures[ i ]
   TbDesigner.Text4.VALUE := _TbActions[ i ]
   TbDesigner.Text4a.VALUE := _TbToolTips[ i ]

   TbDesigner.Check5.VALUE := _TbSeparators[ i ]
   TbDesigner.Check6.VALUE := _TbAutoSizes[ i ]
   TbDesigner.Check7.VALUE := _TbChecks[ i ]
   TbDesigner.Check8.VALUE := _TbGroups[ i ]

   TbDesigner.Check9.VALUE := _TbDropDowns[ i ]
   TbDesigner.Check10.VALUE := _TbWholeDropDowns[ i ]

RETURN

*------------------------------------------------------------------------------*
FUNCTION _Spx_FillTbList( cName )
*------------------------------------------------------------------------------*
   LOCAL aList
   LOCAL LineCount
   LOCAL Line
   LOCAL x
   LOCAL i
   LOCAL cTemp
   LOCAL Numbers
   LOCAL z

   IF Empty ( __mvGet ( HMG_UPPER ( AllTrim ( cName ) ) + 'SpxToolBar' ) )
      aList := { '' }
   ELSE

      aList := {}
      _TbGroups := {}
      _TbChecks := {}
      _TbSeparators := {}
      _TbActions := {}
      _TbPictures := {}
      _TbCaptions := {}
      _TbNames := {}
      _TbAutoSizes := {}
      _TbToolTips := {}

      _TbDropDowns := {}
      _TbWholeDropDowns := {}

      LineCount := MLCount ( __mvGet ( HMG_UPPER ( AllTrim ( cName ) ) + 'SpxToolBar' ) )

      FOR i := 1 TO LineCount

         Line := AllTrim ( MemoLine ( __mvGet ( HMG_UPPER ( AllTrim ( cName ) ) + 'SpxToolBar' ), 1024, i, 4, .T. ) )

         IF HMG_UPPER ( Line ) = 'DEFINE TOOLBAR'

            Line := AllTrim ( hb_URight ( Line, HMG_LEN( Line ) - 14 ) )

            // Get Break

            IF hb_URight ( HMG_UPPER ( Line ), 6 ) == ' BREAK'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 6 ) )
               _TbBreak := .T.
            ELSE
               _TbBreak := .F.
            ENDIF

            // Get Border

            IF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' BORDER'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               _TbBorder := .T.
            ELSE
               _TbBorder := .F.
            ENDIF

            // Get RightText

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' RIGHTTEXT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               _TbRightText := .T.
            ELSE
               _TbRightText := .F.
            ENDIF

            // Get Bottom

            IF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' BOTTOM'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               _TbBottom := .T.
            ELSE
               _TbBottom := .F.
            ENDIF

            // Get Flat

            IF hb_URight ( HMG_UPPER ( Line ), 5 ) == ' FLAT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 5 ) )
               _TbFlat := .T.
            ELSE
               _TbFlat := .F.
            ENDIF

            // Get ToolTip

            Line := AllTrim( Line )

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( 'TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  _TbToolTip := AllTrim ( hb_USubStr ( Line, x + 9, HMG_LEN( Line ) - ( x + 9 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x - 1 ) )
               ELSE
                  _TbToolTip := ''
               ENDIF

            ELSE
               _TbToolTip := ''
            ENDIF

            Line := AllTrim( Line )

            // Get StrikeOut

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' STRIKEOUT'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               _TbFontStrikeout := .T.
            ELSE
               _TbFontStrikeout := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get UnderLine

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' UNDERLINE'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               _TbFontUnderLine := .T.
            ELSE
               _TbFontUnderLine := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get Italic

            IF hb_URight ( HMG_UPPER ( Line ), 7 ) == ' ITALIC'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 7 ) )
               _TbFontItalic := .T.
            ELSE
               _TbFontItalic := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get Bold

            IF hb_URight ( HMG_UPPER ( Line ), 5 ) == ' BOLD'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 5 ) )
               _TbFontBold := .T.
            ELSE
               _TbFontBold := .F.
            ENDIF

            // Get Size

            x := hb_utf8RAt ( ' SIZE ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               _TbFontSize := Val ( hb_USubStr ( Line, x + 6, 255 ) )
               Line := hb_ULeft ( Line, x )
            ELSE
               _TbFontSize := 9
            ENDIF

            // Get Font

            Line := AllTrim( Line )

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( 'FONT "', HMG_UPPER( Line ) )

               IF x > 0
                  _TbFontName := AllTrim ( hb_USubStr ( Line, x + 6, HMG_LEN( Line ) - ( x + 6 ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x - 1 ) )
               ELSE
                  _TbFontName := 'Arial'
               ENDIF

            ELSE
               _TbFontName := 'Arial'
            ENDIF

            Line := AllTrim( Line )

            // Get StrictWidth

            IF hb_URight ( HMG_UPPER ( Line ), 12 ) == ' STRICTWIDTH'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 12 ) )
               _TbStrictWidth := .T.
            ELSE
               _TbStrictWidth := .F.
            ENDIF

            Line := AllTrim( Line )

            // Get ImageSize

            IF hb_URight ( Line, 1 ) == '0' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '1' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '2' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '3' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '4' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '5' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '6' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '7' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '8' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '9'

               x := hb_utf8RAt ( ' IMAGESIZE ', HMG_UPPER( Line ) )

               IF x == 0
                  _TbButtonImageWidth := ''
                  _TbButtonImageHeight := ''
               ELSE

                  Numbers := AllTrim ( hb_USubStr ( Line, x + 11, 255 ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )

                  z := hb_UAt ( ',', Numbers )

                  _TbButtonImageWidth := AllTrim ( hb_ULeft ( Numbers, z - 1 ) )
                  _TbButtonImageHeight := AllTrim ( hb_URight ( Numbers, HMG_LEN( Numbers ) - z ) )

               ENDIF

            ENDIF

            Line := AllTrim( Line )

            // Get ButtonSize

            Line := AllTrim( Line )

            IF hb_URight ( Line, 1 ) == '0' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '1' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '2' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '3' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '4' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '5' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '6' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '7' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '8' ;
                  .OR. ;
                  hb_URight ( Line, 1 ) == '9'

               x := hb_utf8RAt ( ' BUTTONSIZE ', HMG_UPPER( Line ) )

               _TbName := AllTrim ( hb_ULeft ( Line, x ) )

               cTemp := AllTrim( hb_USubStr( Line, x + 12, 255 ) )

               x := hb_UAt ( ',', cTemp )

               _TbButtonWidth := hb_ULeft ( cTemp, x - 1 )

               _TbButtonHeight := hb_USubStr ( cTemp, x + 1, 255 )

            ELSE

               _TbButtonWidth := '64'
               _TbButtonHeight := '64'

            ENDIF

         ELSEIF HMG_UPPER ( Line ) = 'BUTTON '

            // Get Group

            IF hb_URight ( HMG_UPPER ( Line ), 6 ) == ' GROUP'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 6 ) )
               AAdd ( _TbGroups, .T. )
            ELSE
               AAdd ( _TbGroups, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get Check

            IF hb_URight ( HMG_UPPER ( Line ), 6 ) == ' CHECK'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 6 ) )
               AAdd ( _TbChecks, .T. )
            ELSE
               AAdd ( _TbChecks, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get WholeDropDown

            IF hb_URight ( HMG_UPPER ( Line ), 14 ) == ' WHOLEDROPDOWN'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 14 ) )
               AAdd ( _TbWholeDropDowns, .T. )
            ELSE
               AAdd ( _TbWholeDropDowns, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get DropDown

            IF hb_URight ( HMG_UPPER ( Line ), 9 ) == ' DROPDOWN'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 9 ) )
               AAdd ( _TbDropDowns, .T. )
            ELSE
               AAdd ( _TbDropDowns, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get AutoSize

            IF hb_URight ( HMG_UPPER ( Line ), 9 ) == ' AUTOSIZE'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 9 ) )
               AAdd ( _TbAutoSizes, .T. )
            ELSE
               AAdd ( _TbAutoSizes, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get Separator

            IF hb_URight ( HMG_UPPER ( Line ), 10 ) == ' SEPARATOR'
               Line := AllTrim ( hb_ULeft ( Line, HMG_LEN( Line ) - 10 ) )
               AAdd ( _TbSeparators, .T. )
            ELSE
               AAdd ( _TbSeparators, .F. )
            ENDIF

            Line := AllTrim( Line )

            // Get ToolTip

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' TOOLTIP "', HMG_UPPER( Line ) )

               IF x > 0
                  AAdd ( _TbToolTips, AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN(Line ) - ( x + 10 ) ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  AAdd( _TbToolTips, '' )
               ENDIF

            ELSE
               AAdd ( _TbToolTips, '' )
            ENDIF

            // Get Action

            x := hb_utf8RAt ( ' ACTION ', HMG_UPPER( Line ) )

            IF x > 0 .AND. ! IsLiteral ( Line, x )
               AAdd ( _TbActions, hb_USubStr ( Line, x + 8, 255 ) )
               Line := hb_ULeft ( Line, x )
            ELSE
               AAdd ( _TbActions, '' )
            ENDIF

            Line := AllTrim( Line )

            // Get Picture

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' PICTURE "', HMG_UPPER( Line ) )

               IF x > 0
                  AAdd ( _TbPictures, AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN(Line ) - ( x + 10 ) ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  AAdd( _TbPictures, '' )
               ENDIF

            ELSE
               AAdd ( _TbPictures, '' )
            ENDIF

            // Get Caption

            IF hb_URight ( Line, 1 ) == '"'

               x := hb_utf8RAt ( ' CAPTION "', HMG_UPPER( Line ) )

               IF x > 0
                  AAdd ( _TbCaptions, AllTrim ( hb_USubStr ( Line, x + 10, HMG_LEN(Line ) - ( x + 10 ) ) ) )
                  Line := AllTrim ( hb_ULeft ( Line, x ) )
               ELSE
                  AAdd( _TbCaptions, '' )
               ENDIF

            ELSE
               AAdd ( _TbCaptions, '' )
            ENDIF

            // Get Name

            Line := AllTrim( Line )

            Line := hb_URight ( Line, HMG_LEN( Line ) - 7 )

            Line := AllTrim( Line )

            AAdd ( _TbNames, Line )

            AAdd ( aList, Line )

         ENDIF

      NEXT i

   ENDIF

RETURN aList

*------------------------------------------------------------------------------*
PROCEDURE _Spx_BuildToolBar
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL MENU

   IF Empty( _TbName )
      MsgStop( aMsgs[ 199 ], "HMG IDE" )
      RETURN
   ENDIF

   MENU := Space( 4 ) + Space( 4 ) + 'DEFINE TOOLBAR ' + _TbName

   IF .NOT. Empty ( _TbButtonWidth ) .AND. .NOT. Empty ( _TbButtonHeight )
      MENU := MENU + ' BUTTONSIZE ' + AllTrim( _TbButtonWidth ) + ',' + AllTrim( _TbButtonHeight )
   ENDIF

   IF .NOT. Empty ( _TbButtonImageWidth ) .AND. .NOT. Empty ( _TbButtonImageHeight )
      MENU := MENU + ' IMAGESIZE ' + AllTrim( _TbButtonImageWidth ) + ',' + AllTrim( _TbButtonImageHeight )
   ENDIF

   IF _TbStrictWidth == .T.
      MENU := MENU + ' STRICTWIDTH'
   ENDIF

   MENU := MENU + ' FONT ' + Chr( 34 ) + _TbFontName + Chr( 34 )

   MENU := MENU + ' SIZE ' + AllTrim( Str( _TbFontSize ) )

   IF _TbFontBold == .T.
      MENU := MENU + ' BOLD'
   ENDIF

   IF _TbFontItalic == .T.
      MENU := MENU + ' ITALIC'
   ENDIF

   IF _TbFontUnderLine == .T.
      MENU := MENU + ' UNDERLINE'
   ENDIF

   IF _TbFontStrikeout == .T.
      MENU := MENU + ' STRIKEOUT'
   ENDIF

   IF .NOT. Empty( _TbToolTip )
      MENU := MENU + ' TOOLTIP ' + +Chr( 34 ) + _TbToolTip + Chr( 34 )
   ENDIF

   IF _TbFlat == .T.
      MENU := MENU + ' FLAT'
   ENDIF

   IF _TbBottom == .T.
      MENU := MENU + ' BOTTOM'
   ENDIF

   IF _TbRightText == .T.
      MENU := MENU + ' RIGHTTEXT'
   ENDIF

   IF _TbBorder == .T.
      MENU := MENU + ' BORDER'
   ENDIF

   IF _TbBreak == .T.
      MENU := MENU + ' BREAK'
   ENDIF

   MENU := MENU + CRLF

   FOR i := 1 TO TbDesigner.List1.ItemCount

      // Create Command

      // Button

      IF Empty ( _TbNames[ i ] )
         MsgStop( aMsgs[ 143 ] + " (Item: " + AllTrim( Str( i ) ) + ")", "HMG IDE" )
         RETURN
      ENDIF

      IF _TbDropDowns[ i ] == .T. .AND. _TbWholeDropDowns[ i ] == .T.
         MsgStop( aMsgs[ 144 ] + AllTrim( Str( i ) ) + ")", "HMG IDE" )
         RETURN
      ENDIF

      IF Empty ( _TbPictures[ i ] )
         MsgStop( aMsgs[ 145 ] + AllTrim( Str( i ) ) + ")", "HMG IDE" )
         RETURN
      ENDIF

      MENU := MENU + Space( 8 ) + Space( 4 ) + 'BUTTON ' + _TbNames[ i ] ;
         +if ( ! Empty( _TbCaptions[ i ] ), ' CAPTION ' + Chr( 34 ) + _TbCaptions[ i ] + Chr( 34 ), '' ) ;
         +if ( ! Empty( _TbPictures[ i ] ), ' PICTURE ' + Chr( 34 ) + _TbPictures[ i ] + Chr( 34 ), '' ) ;
         +if ( ( ( ! Empty(_TbActions[ i ] ) ) .AND. ( _TbWholeDropDowns[ i ] == .F. ) ), ' ACTION ' + _TbActions[ i ], '' ) ;
         +if ( ! Empty( _TbToolTips[ i ] ), ' TOOLTIP ' + Chr( 34 ) + _TbToolTips[ i ] + Chr( 34 ), '' ) ;
         +if ( _TbSeparators[ i ] == .T., ' SEPARATOR', '' ) ;
         +if ( _TbAutoSizes[ i ] == .T., ' AUTOSIZE', '' ) ;
         +if ( _TbDropDowns[ i ] == .T., ' DROPDOWN', '' ) ;
         +if ( _TbWholeDropDowns[ i ] == .T., ' WHOLEDROPDOWN', '' ) ;
         +if ( _TbChecks[ i ] == .T., ' CHECK', '' ) ;
         +if ( _TbGroups[ i ] == .T., ' GROUP', '' ) ;
         +CRLF

   NEXT i

   MENU := MENU + Space( 4 ) + Space( 4 ) + 'END TOOLBAR' + CRLF

   __mvPut ( HMG_UPPER ( AllTrim ( _TbName ) ) + 'SpxToolBar', Menu )

   DesignFormModified := .T.

   TbDesigner.RELEASE

RETURN

*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbProperties
*------------------------------------------------------------------------------*
   DEFINE WINDOW TbProperties ;
         AT 0, 0 ;
         WIDTH 380 ;
         HEIGHT GetTitleHeight() + 310 + 2 ;
         TITLE aMsgs[ 195 ] ;
         MODAL ;
         NOSIZE

      ON KEY ESCAPE ACTION ( ;
         ThisWindow.RELEASE ;
         )

      DEFINE FRAME Frame1
         ROW 9
         COL 10
         WIDTH 235
         HEIGHT 286
      END FRAME

      DEFINE LABEL Label0
         ROW 23
         COL 25
         WIDTH 90
         VALUE aMsgs[ 147 ]
      END LABEL
      DEFINE TEXTBOX Text0
         ROW 20
         COL 110
         VALUE _TbName
         READONLY .T.
         TabStop .F.
      END TEXTBOX

      DEFINE LABEL Label1
         ROW 53
         COL 25
         WIDTH 80
         VALUE aMsgs[ 148 ]
      END LABEL
      DEFINE TEXTBOX Text1
         ROW 50
         COL 110
         VALUE _TbButtonWidth
      END TEXTBOX

      DEFINE LABEL Label2
         ROW 83
         COL 25
         WIDTH 80
         VALUE aMsgs[ 149 ]
      END LABEL
      DEFINE TEXTBOX Text2
         ROW 80
         COL 110
         VALUE _TbButtonHeight
      END TEXTBOX

      DEFINE LABEL Label2a
         ROW 113
         COL 25
         WIDTH 85
         VALUE aMsgs[ 150 ]
      END LABEL
      DEFINE TEXTBOX Text2a
         ROW 110
         COL 110
         VALUE _TbButtonImageWidth
      END TEXTBOX

      DEFINE LABEL Label2b
         ROW 143
         COL 25
         WIDTH 80
         VALUE aMsgs[ 151 ]
      END LABEL
      DEFINE TEXTBOX Text2b
         ROW 140
         COL 110
         VALUE _TbButtonImageHeight
      END TEXTBOX

      DEFINE LABEL Label3
         ROW 173
         COL 25
         WIDTH 80
         VALUE 'ToolTip:'
      END LABEL
      DEFINE TEXTBOX Text3
         ROW 170
         COL 110
         VALUE _TbToolTip
      END TEXTBOX

      DEFINE LABEL Label5
         ROW 203
         COL 25
         WIDTH 60
         VALUE 'Flat:'
      END LABEL
      DEFINE CHECKBOX Check5
         ROW 200
         COL 100
         WIDTH 20
         VALUE _TbFlat
      END CHECKBOX

      DEFINE LABEL Label6
         ROW 233
         COL 25
         WIDTH 50
         VALUE 'Bottom:'
      END LABEL
      DEFINE CHECKBOX Check6
         ROW 230
         COL 100
         WIDTH 20
         VALUE _TbBottom
      END CHECKBOX

      DEFINE LABEL Label7
         ROW 203
         COL 145
         WIDTH 50
         VALUE 'RightText:'
      END LABEL
      DEFINE CHECKBOX Check7
         ROW 200
         COL 215
         WIDTH 20
         VALUE _TbRightText
      END CHECKBOX

      DEFINE LABEL Label8
         ROW 233
         COL 145
         WIDTH 50
         VALUE 'Border:'
      END LABEL
      DEFINE CHECKBOX Check8
         ROW 230
         COL 215
         WIDTH 20
         VALUE _TbBorder
      END CHECKBOX

      DEFINE LABEL Label9
         ROW 263
         COL 25
         WIDTH 60
         VALUE 'StrictWidth:'
      END LABEL
      DEFINE CHECKBOX Check9
         ROW 260
         COL 100
         WIDTH 20
         VALUE _TbStrictWidth
      END CHECKBOX

      DEFINE LABEL Label10
         ROW 263
         COL 145
         WIDTH 50
         VALUE 'Break:'
      END LABEL
      DEFINE CHECKBOX Check10
         ROW 260
         COL 215
         WIDTH 20
         VALUE _TbBreak
      END CHECKBOX

      DEFINE BUTTON FONT
         ROW 265
         COL 260
         CAPTION aMsgs[ 134 ]
         ACTION TbFont()
      END BUTTON

      // Ok / Cancel Buttons

      DEFINE BUTTON Ok
         ROW 10
         COL 260
         CAPTION aMsgs[ 116 ]
         ACTION ( ;
            _TbName := TbProperties.Text0.VALUE, ;
            _TbButtonWidth := TbProperties.Text1.VALUE, ;
            _TbButtonHeight := TbProperties.Text2.VALUE, ;
            _TbButtonImageWidth := TbProperties.Text2a.VALUE, ;
            _TbButtonImageHeight := TbProperties.Text2b.VALUE, ;
            _TbToolTip := TbProperties.Text3.VALUE, ;
            _TbFlat := TbProperties.Check5.VALUE, ;
            _TbBottom := TbProperties.Check6.VALUE, ;
            _TbRightText := TbProperties.Check7.VALUE, ;
            _TbBorder := TbProperties.Check8.VALUE, ;
            _TbStrictWidth := TbProperties.Check9.VALUE, ;
            _TbBreak := TbProperties.Check10.VALUE, ;
            _HMG_DialogCancelled := .F., ;
            ThisWindow.RELEASE ;
            )
      END BUTTON
      DEFINE BUTTON Cancel
         ROW 40
         COL 260
         CAPTION aMsgs[ 117 ]
         ACTION ( ;
            _HMG_DialogCancelled := .T., ;
            ThisWindow.RELEASE ;
            )
      END BUTTON

   END WINDOW

   setfocus ( GetControlHandle ( 'Text1', 'TbProperties' ) )

   TbProperties.CENTER
   TbProperties.ACTIVATE

RETURN
*------------------------------------------------------------------------------*
PROCEDURE _Spx_TbFont
*------------------------------------------------------------------------------*
   LOCAL aTemp

   aTemp := GetFont( _TbFontName, _TbFontSize, _TbFontBold, _TbFontItalic, { 0, 0, 0 }, _TbFontUnderLine, _TbFontStrikeout, Nil )

   IF .NOT. Empty ( aTemp[ 1 ] )
      _TbFontName := aTemp[ 1 ]
      _TbFontSize := aTemp[ 2 ]
      _TbFontBold := aTemp[ 3 ]
      _TbFontItalic := aTemp[ 4 ]
      _TbFontUnderLine := aTemp[ 6 ]
      _TbFontStrikeout := aTemp[ 7 ]
   ENDIF

RETURN


*------------------------------------------------------------------------------*
STATIC FUNCTION IsLiteral ( cString, nPos )
*------------------------------------------------------------------------------*
   LOCAL i
   LOCAL nQuoteCount := 0
   LOCAL lIsLiteral

   FOR i := 1 TO nPos

      IF hb_USubStr ( cString, i, 1 ) == Chr( 34 )
         nQuoteCount++
      ENDIF

   NEXT i

   IF nQuoteCount / 2 == Int ( nQuoteCount / 2 )
      lIsLiteral := .F.
   ELSE
      lIsLiteral := .T.
   ENDIF

RETURN ( lIsLiteral )


*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
STATIC PROCEDURE InitControlCounters()
*------------------------------------------------------------------------------*

   CurrentControl := 0

   ActivexCount := 0
   AnimateCount := 0
   BrowseCount := 0
   ButtonCount := 0
   CheckBoxCount := 0
   ComboBoxCount := 0
   CheckButtonCount := 0
   EditBoxCount := 0
   FrameCount := 0
   GridCount := 0
   HyperLinkCount := 0
   ImageCount := 0
   IpAddressCount := 0
   DatepickerCount := 0
   TextBoxCount := 0
   LabelCount := 0
   ListBoxCount := 0
   MonthCalendarCount := 0
   PlayerCount := 0
   ProgressBarCount := 0
   RadioGroupCount := 0
   RichEditCount := 0
   SliderCount := 0
   SpinnerCount := 0
   TabCount := 0
   TimerCount := 0
   TreeCount := 0

RETURN


PROCEDURE ResetToolBar

   SendMessage( GetControlHandle( 'Control_01', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_02', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_03', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_04', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_05', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_06', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_07', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_08', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_09', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_10', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_11', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_12', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_13', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_14', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_15', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_16', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_17', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_18', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_19', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_20', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_21', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_22', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_23', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_24', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_25', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_26', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_27', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )
   SendMessage( GetControlHandle( 'Control_35', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )

   SendMessage( GetControlHandle( 'Control_36', 'Form_Main' ), BM_SETCHECK, BST_UNCHECKED, 0 )

   Form_Main.user.VALUE := 0

RETURN

*-----------------------------------------------------------------------------*
PROCEDURE EditNewReport( FileName )
*-----------------------------------------------------------------------------*
   LOCAL i, tmp

   rep_build_step_1.TITLE := aMsgs[ 228 ]
   rep_build_step_1.label_1.VALUE := aMsgs[ 229 ]
   rep_build_step_1.label_2.VALUE := aMsgs[ 230 ]
   rep_build_step_1.label_3.VALUE := aMsgs[ 231 ]
   rep_build_step_1.label_4.VALUE := aMsgs[ 232 ]
   rep_build_step_1.label_5.VALUE := aMsgs[ 233 ]
   rep_build_step_1.label_6.VALUE := aMsgs[ 234 ]
   rep_build_step_1.cancel.CAPTION := aMsgs[ 235 ]
   rep_build_step_1.next.CAPTION := aMsgs[ 236 ]

   rep_build_step_2.TITLE := aMsgs[ 237 ]
   rep_build_step_2.label_1.VALUE := aMsgs[ 238 ]
   rep_build_step_2.label_2.VALUE := aMsgs[ 239 ]
   rep_build_step_2.label_3.VALUE := aMsgs[ 240 ]
   rep_build_step_2.cancel.CAPTION := aMsgs[ 235 ]
   rep_build_step_2.back.CAPTION := aMsgs[ 241 ]

   rep_build_step_3.TITLE := aMsgs[ 242 ]
   rep_build_step_3.label_1.VALUE := aMsgs[ 243 ]
   rep_build_step_3.titles.CAPTION := aMsgs[ 244 ]
   rep_build_step_3.totals.CAPTION := aMsgs[ 245 ]
   rep_build_step_3.formats.CAPTION := aMsgs[ 246 ]
   rep_build_step_3.font.CAPTION := aMsgs[ 247 ]
   rep_build_step_3.preview.CAPTION := aMsgs[ 248 ]
   rep_build_step_3.label_2.VALUE := aMsgs[ 249 ]
   rep_build_step_3.cancel.CAPTION := aMsgs[ 235 ]
   rep_build_step_3.back.CAPTION := aMsgs[ 241 ]
   rep_build_step_3.finish.CAPTION := aMsgs[ 254 ]

   reporttitlesoptions.TITLE := aMsgs[ 255 ]
   reporttitlesoptions.label_1.VALUE := aMsgs[ 256 ]
   reporttitlesoptions.close.CAPTION := aMsgs[ 257 ]

   reportsummaryoptions.TITLE := aMsgs[ 258 ]
   reportsummaryoptions.label_1.VALUE := aMsgs[ 259 ]
   reportsummaryoptions.label_2.VALUE := aMsgs[ 260 ]
   reportsummaryoptions.close.CAPTION := aMsgs[ 257 ]

   reportformatoptions.TITLE := aMsgs[ 261 ]
   reportformatoptions.label_1.VALUE := aMsgs[ 262 ]
   reportformatoptions.label_2.VALUE := aMsgs[ 263 ]
   reportformatoptions.close.CAPTION := aMsgs[ 257 ]


   reportformatoptions.formats.Header( 1 ) := aMsgs[ 264 ] // Field
   reportformatoptions.formats.Header( 2 ) := aMsgs[ 265 ] // Mask

   reportsummaryoptions.fields.Header( 1 ) := aMsgs[ 264 ] // Field
   reportsummaryoptions.fields.Header( 2 ) := aMsgs[ 266 ] // Totalize

   reporttitlesoptions.titles.Header( 1 ) := aMsgs[ 264 ] // Field
   reporttitlesoptions.titles.Header( 2 ) := aMsgs[ 267 ] // Title


   rep_build_step_1.movetoselected.TOOLTIP := aMsgs[ 268 ]
   rep_build_step_1.addall.TOOLTIP := aMsgs[ 269 ]
   rep_build_step_1.movetoavailable.TOOLTIP := aMsgs[ 270 ]
   rep_build_step_1.removeall.TOOLTIP := aMsgs[ 271 ]
   rep_build_step_1.addcustom.TOOLTIP := aMsgs[ 272 ]
   rep_build_step_1.removecustom.TOOLTIP := aMsgs[ 273 ]


   rep_build_step_3.grouping.CAPTION := aMsgs[ 283 ]
   groupingoptions.label_1.VALUE := aMsgs[ 284 ]
   groupingoptions.label_2.VALUE := aMsgs[ 285 ]
   groupingoptions.label_3.VALUE := aMsgs[ 286 ]
   groupingoptions.ok.CAPTION := aMsgs[ 116 ]
   groupingoptions.cancel.CAPTION := aMsgs[ 117 ]


   cCurrentReportFileName := FileName

   tmp := hb_MemoRead ( cCurrentReportFileName )

   rep_build_step_1.tables.deleteallitems
   rep_build_step_1.availablefields.deleteallitems
   rep_build_step_1.selectedfields.deleteallitems


   aTables := Directory( "*.dbf" )


   FOR i := 1 TO HMG_LEN ( aTables )

      rep_build_step_1.tables.additem ( HMG_UPPER ( hb_ULeft ( aTables[ i ][ 1 ], HMG_LEN(aTables[ i ][ 1 ] ) - 4 ) ) )

   NEXT i


   IF MLCount( tmp ) > 10

      LoadNewReport( FileName )

   ENDIF


   rep_build_step_1.CENTER
   rep_build_step_2.CENTER
   rep_build_step_3.CENTER

   _ReportBuilderActive := .T.

   rep_build_step_1.Show

   rep_build_step_1.cancel.setfocus

RETURN

*-----------------------------------------------------------------------------*
PROCEDURE rep_build_step_1_tables_onchange
*-----------------------------------------------------------------------------*
   LOCAL i
   LOCA z

   i := rep_build_step_1.tables.VALUE

   IF i == 0
      RETURN
   ENDIF

   USE

   USE ( rep_build_step_1.tables.item( i ) ) Shared

   rep_build_step_1.availablefields.deleteallitems
   rep_build_step_1.selectedfields.deleteallitems

   FOR z := 1 TO FCount()
      rep_build_step_1.availablefields.additem ( rep_build_step_1.tables.item( i ) + '->' + FieldName( z ) )
   NEXT z

   rep_build_step_3.title.VALUE := Capitalize ( rep_build_step_1.tables.item( i ) )

RETURN


*-----------------------------------------------------------------------------*
PROCEDURE rep_build_step_1_addall
*-----------------------------------------------------------------------------*
   LOCAL z, table, i, aTemp := {}

   i := rep_build_step_1.tables.VALUE

   IF i == 0
      RETURN
   ENDIF


   FOR z := 1 TO rep_build_step_1.selectedfields.itemcount

      IF hb_ULeft ( rep_build_step_1.selectedfields.item( z ), 2 ) == '* '

         AAdd ( aTemp, rep_build_step_1.selectedfields.item( z ) )

      ENDIF

   NEXT z

   table := rep_build_step_1.tables.item( i )

   rep_build_step_1.selectedfields.deleteallitems
   rep_build_step_1.availablefields.deleteallitems

   FOR z := 1 TO FCount()
      rep_build_step_1.selectedfields.additem ( table + '->' + FieldName( z ) )
   NEXT z

   FOR z := 1 TO HMG_LEN ( aTemp )
      rep_build_step_1.selectedfields.additem ( aTemp[ z ] )
   NEXT z


   resetformats()
   resettitles()
   resettotals()

RETURN

*-----------------------------------------------------------------------------*
PROCEDURE rep_build_step_1_removeall
*-----------------------------------------------------------------------------*
   LOCAL z, table, i
   LOCAL aTemp := {}

   i := rep_build_step_1.tables.VALUE

   IF i == 0
      RETURN
   ENDIF

   table := rep_build_step_1.tables.item( i )

   FOR z := 1 TO rep_build_step_1.selectedfields.itemcount

      IF hb_ULeft ( rep_build_step_1.selectedfields.item( z ), 2 ) == '* '

         AAdd ( aTemp, rep_build_step_1.selectedfields.item( z ) )

      ENDIF

   NEXT z

   rep_build_step_1.selectedfields.deleteallitems
   rep_build_step_1.availablefields.deleteallitems

   FOR z := 1 TO FCount()
      rep_build_step_1.availablefields.additem ( table + '->' + FieldName( z ) )
   NEXT z

   FOR z := 1 TO HMG_LEN ( aTemp )
      rep_build_step_1.selectedfields.additem ( aTemp[ z ] )
   NEXT z

   resetformats()
   resettitles()
   resettotals()

RETURN

*-----------------------------------------------------------------------------*
PROCEDURE rep_build_step_1_movetoselected
*-----------------------------------------------------------------------------*
   LOCAL i
   LOCAL cField

   i := rep_build_step_1.availablefields.VALUE

   IF i == 0
      RETURN
   ENDIF

   cField := rep_build_step_1.availablefields.item( i )

   rep_build_step_1.selectedfields.additem ( cField )

   rep_build_step_1.availablefields.deleteitem( i )

   resetformats()
   resettitles()
   resettotals()

RETURN

*-----------------------------------------------------------------------------*
PROCEDURE rep_build_step_1_movetoavailable
*-----------------------------------------------------------------------------*
   LOCAL i
   LOCAL cField

   i := rep_build_step_1.selectedfields.VALUE

   IF i == 0
      RETURN
   ENDIF

   cField := rep_build_step_1.selectedfields.item( i )

   IF hb_ULeft ( cField, 2 ) == '* '
      MsgStop( 'Use [-] button to remove a custom field or expression', 'HMG IDE' )
      RETURN
   ENDIF

   rep_build_step_1.availablefields.additem ( cField )

   rep_build_step_1.selectedfields.deleteitem( i )

   resetformats()
   resettitles()
   resettotals()

RETURN

*-----------------------------------------------------------------------------*
PROCEDURE rep_build_step_3_finish
*-----------------------------------------------------------------------------*
   LOCAL cReport

   rep_build_step_3.hide

   cReport := GenReport( .F. )

   SaveString ( cCurrentReportFileName, cReport )

   _ReportBuilderActive := .F.

RETURN

*-----------------------------------------------------------------------------*
FUNCTION GetPaperSize()
*-----------------------------------------------------------------------------*
   LOCAL cRet

   IF rep_build_step_2.PaperSize.DisplayValue == 'Letter'

      cRet := 'PRINTER_PAPER_LETTER'

   ELSEIF rep_build_step_2.PaperSize.DisplayValue == 'A4'

      cRet := 'PRINTER_PAPER_A4'

   ELSEIF rep_build_step_2.PaperSize.DisplayValue == 'Legal'

      cRet := 'PRINTER_PAPER_LEGAL'

   ENDIF

RETURN cRet

*-----------------------------------------------------------------------------*
FUNCTION GetOrientation()
*-----------------------------------------------------------------------------*
   LOCAL cRet

   IF rep_build_step_2.Orientation.DisplayValue == 'Portrait'

      cRet := 'PRINTER_ORIENT_PORTRAIT'

   ELSEIF rep_build_step_2.Orientation.DisplayValue == 'Landscape'

      cRet := 'PRINTER_ORIENT_LANDSCAPE'

   ENDIF

RETURN cRet

*-----------------------------------------------------------------------------*
FUNCTION GetPaperWidth()
*-----------------------------------------------------------------------------*
   LOCAL nRet

   IF rep_build_step_2.PaperSize.DisplayValue == 'Letter'

      IF rep_build_step_2.Orientation.DisplayValue == 'Portrait'

         nRet := 215.9

      ELSEIF rep_build_step_2.Orientation.DisplayValue == 'Landscape'

         nRet := 279.4

      ENDIF

   ELSEIF rep_build_step_2.PaperSize.DisplayValue == 'A4'

      IF rep_build_step_2.Orientation.DisplayValue == 'Portrait'

         nRet := 210

      ELSEIF rep_build_step_2.Orientation.DisplayValue == 'Landscape'

         nRet := 297

      ENDIF

   ELSEIF rep_build_step_2.PaperSize.DisplayValue == 'Legal'

      IF rep_build_step_2.Orientation.DisplayValue == 'Portrait'

         nRet := 215.9

      ELSEIF rep_build_step_2.Orientation.DisplayValue == 'Landscape'

         nRet := 355.6

      ENDIF

   ENDIF

RETURN nRet

*-----------------------------------------------------------------------------*
PROCEDURE PreviewNewReport
*-----------------------------------------------------------------------------*
   LOCAL i

   i := rep_build_step_1.tables.VALUE

   SaveString ( '_TempReport.Rmg', GenReport( .T. ) )

   SaveString ( '_TempTable.Txt', rep_build_step_1.tables.item( i ) )

   USE

   SaveString ( 'RePreviewSemaforo.Txt', '' )

   GenerateReportApps()

   rep_build_step_3_EnabledSwitcher ( .F. )


   rep_build_step_3.label_3.VALUE := aMsgs[ 250 ]
   rep_build_step_3.label_4.VALUE := aMsgs[ 251 ]
   rep_build_step_3.label_5.VALUE := aMsgs[ 253 ]


   DELETE FILE ERROR.LOG

   EXECUTE FILE "_CompileReport.Bat" PARAMETERS "_PreviewReport" HIDE

   DO WHILE File( 'RePreviewSemaforo.Txt' )
      DO EVENTS
      IF File ( 'ERROR.LOG' )
         MSGSTOP ( aMsgs[ 089 ], 'HMG-IDE' )
         EXIT
      ENDIF
   ENDDO

   rep_build_step_3.label_3.VALUE := ''
   rep_build_step_3.label_4.VALUE := ''
   rep_build_step_3.label_5.VALUE := ''

   rep_build_step_3_EnabledSwitcher ( .T. )


   hb_idleSleep( 0.5 )
   DELETE FILE _TempReport.Rmg
   DELETE FILE _TempTable.Txt
   DELETE FILE _PreviewReport.Prg
   DELETE FILE _PreviewReport.Exe
   DELETE FILE _CompileReport.Bat


   USE ( rep_build_step_1.tables.item( i ) ) Shared

RETURN

*-----------------------------------------------------------------------------*
STATIC PROCEDURE rep_build_step_3_EnabledSwitcher( lOnOff )
*-----------------------------------------------------------------------------*

   rep_build_step_3.preview.enabled := lOnOff
   rep_build_step_3.finish.enabled := lOnOff
   rep_build_step_3.back.enabled := lOnOff
   rep_build_step_3.cancel.enabled := lOnOff
   rep_build_step_3.title.enabled := lOnOff
   rep_build_step_3.totals.enabled := lOnOff
   rep_build_step_3.titles.enabled := lOnOff
   rep_build_step_3.formats.enabled := lOnOff
   rep_build_step_3.font.enabled := lOnOff
   rep_build_step_3.grouping.enabled := lOnOff

RETURN

PROCEDURE GenerateReportApps

   LOCAL CR := CRLF
   LOCAL c := ''

   c += '#include "hmg.ch"' + CR

   c += 'Function Main' + CR
   c += 'DEFINE WINDOW Win_1 ROW 0 COL 0 WIDTH 400 HEIGHT 400 TITLE "Report Preview" MAIN ON INIT Test()' + CR
   c += 'END WINDOW' + CR
   c += 'Win_1.Minimize' + CR
   c += 'Win_1.Activate' + CR
   c += 'Return Nil' + CR + CR

   c += 'Function Test' + CR
   c += 'Use ( HB_MEMOREAD("_TempTable.Txt") ) Shared' + CR
   c += 'LOAD REPORT _TempReport' + CR
   c += 'bSaveHandler := errorblock( { |x| break(x) } )' + CR
   c += 'BEGIN SEQUENCE' + CR
   c += '     EXECUTE REPORT _TempReport PREVIEW' + CR
   c += 'RECOVER USING oError' + CR
   c += '     MSGSTOP( oError:Description + " " + oError:Operation  , "Report Error:" )' + CR
   c += 'END' + CR
   c += 'errorblock( bSaveHandler )' + CR
   c += 'DELETE FILE RePreviewSemaforo.Txt' + CR
   c += 'QUIT' + CR
   c += 'Return Nil' + CR

   SaveString ( '_PreviewReport.Prg', c )

   c := ''

   c += '@echo off' + CR

   IF Form_Main.IsBuild64.CHECKED == .T.

      c += 'call ' + cHmgFolder + '\build64.bat %1 %2' + CR

   ELSE

      c += 'call ' + cHmgFolder + '\build.bat %1 %2' + CR

   ENDIF

   SaveString ( '_CompileReport.Bat', c )

RETURN

*-----------------------------------------------------------------------------*
FUNCTION GenReport ( lPreview )
*-----------------------------------------------------------------------------*
   LOCAL aTotalize, cField
   LOCAL cReport := ''
   LOCAL CR := CRLF
   LOCAL i, r

   LOCAL nPaperWidth
   LOCAL nColmunCount
   LOCAL nColumnSpace
   LOCAL nMargin
   LOCAL nAvailableWidth
   LOCAL nTotalFieldWidth
   LOCAL nFieldWidth
   LOCAL nCurrentCol
   LOCAL cExp

   nPaperWidth := GetPaperWidth()
   nColmunCount := rep_build_step_1.selectedfields.itemcount

   nColumnSpace := 2
   nMargin := 12
   nAvailableWidth := nPaperWidth - ( nMargin * 2 )

   nTotalFieldWidth := nAvailableWidth - ( nColumnSpace * nColmunCount )

   nFieldWidth := Int ( nTotalFieldWidth / nColmunCount )

   nCurrentCol := nMargin

   cReport += 'DEFINE REPORT TEMPLATE' + CR
   cReport += '' + CR
   cReport += '    BEGIN LAYOUT' + CR
   cReport += '' + CR
   cReport += '        PAPERSIZE   ' + GetPaperSize() + CR
   cReport += '        ORIENTATION ' + GetOrientation() + CR
   cReport += '' + CR
   cReport += '    END LAYOUT' + CR
   cReport += '' + CR
   cReport += '    BEGIN HEADER' + CR
   cReport += '' + CR
   cReport += '        BANDHEIGHT 27' + CR
   cReport += '' + CR

   cReport += '        BEGIN TEXT' + CR
   cReport += '            EXPRESSION  "' + rep_build_step_3.title.VALUE +'"' + CR
   cReport += '            ROW         11' + CR
   cReport += '            COL         10' + CR
   cReport += '            WIDTH       100' + CR
   cReport += '            HEIGHT      10' + CR
   cReport += '            FONTNAME    "' + _ReportFontName + '"' + CR
   cReport += '            FONTSIZE    20' + CR
   cReport += '            FONTBOLD    .F.' + CR
   cReport += '        END TEXT' + CR
   cReport += '' + CR
   cReport += '        BEGIN LINE' + CR
   cReport += '            FROMROW     21' + CR
   cReport += '            FROMCOL     10' + CR
   cReport += '            TOROW       21' + CR
   cReport += '            TOCOL       ' + AllTrim( Str( Int( GetPaperWidth() ) - 12 ) ) + CR
   cReport += '            PENWIDTH    0.2' + CR
   cReport += '        END LINE' + CR
   cReport += '' + CR

   nCurrentCol := nMargin

   FOR i := 1 TO rep_build_step_1.selectedfields.itemcount

      cReport += '        BEGIN TEXT' + CR
      cReport += '            EXPRESSION "' + reporttitlesoptions.titles.cell( i, 2 ) + '"' + CR
      cReport += '            ROW         22' + CR
      cReport += '            COL         ' + AllTrim ( Str ( nCurrentCol ) ) + CR
      cReport += '            WIDTH       ' + AllTrim( Str( nFieldWidth ) ) + CR
      cReport += '            HEIGHT      8' + CR
      cReport += '            FONTNAME    "' + _ReportFontName + '"' + CR
      cReport += '            FONTSIZE    ' + AllTrim( Str( _ReportFontSize ) ) + CR
      cReport += '            FONTBOLD    .T.' + CR

      IF Type ( rep_build_step_1.selectedfields.item( i ) ) == 'N'
         cReport += '            ALIGNMENT RIGHT' + CR
      ENDIF

      cReport += '        END TEXT' + CR
      cReport += '' + CR

      nCurrentCol += nFieldWidth + nColumnSpace

   NEXT i

   cReport += '        BEGIN LINE' + CR
   cReport += '            FROMROW     27' + CR
   cReport += '            FROMCOL     10' + CR
   cReport += '            TOROW       27' + CR
   cReport += '            TOCOL       ' + AllTrim( Str( Int( GetPaperWidth() ) - 12 ) ) + CR
   cReport += '            PENWIDTH    0.2' + CR
   cReport += '        END LINE' + CR
   cReport += '' + CR
   cReport += '    END HEADER' + CR
   cReport += '' + CR
   cReport += '    BEGIN DETAIL' + CR
   cReport += '' + CR
   cReport += '        BANDHEIGHT      ' + AllTrim( Str( Int( _ReportFontSize / 2 ) ) ) + CR
   cReport += '' + CR

   nCurrentCol := nMargin

   FOR i := 1 TO rep_build_step_1.selectedfields.itemcount

      cReport += '        BEGIN TEXT' + CR


      cExp := rep_build_step_1.selectedfields.item( i )

      IF hb_ULeft ( cExp, 2 ) == '* '

         IF lPreview

            cExp := '"' + hb_USubStr ( cExp, 3, 255 ) + '"'

         ELSE

            cExp := hb_USubStr ( cExp, 3, 255 )

         ENDIF

      ENDIF

      IF Empty ( ReportFormatOptions.formats.cell( i, 2 ) )

         cReport += '            EXPRESSION ' + cExp + CR

      ELSE

         cReport += '            EXPRESSION Transform( ' + cExp + ' , "' + ReportFormatOptions.formats.cell( i, 2 ) + '")' + CR

      ENDIF

      cReport += '            ROW         2' + CR
      cReport += '            COL         ' + AllTrim ( Str ( nCurrentCol ) ) + CR
      cReport += '            WIDTH       ' + AllTrim( Str( nFieldWidth ) ) + CR
      cReport += '            HEIGHT      4' + CR
      cReport += '            FONTNAME    "' + _ReportFontName + '"' + CR
      cReport += '            FONTSIZE    ' + AllTrim( Str( _ReportFontSize ) ) + CR

      IF _ReportFontBold

         cReport += '            FONTBOLD    .T.' + CR

      ELSE

         cReport += '            FONTBOLD    .F.' + CR

      ENDIF

      IF _ReportFontItalic

         cReport += '            FONTITALIC  .T.' + CR

      ELSE

         cReport += '            FONTITALIC  .F.' + CR

      ENDIF


      IF Type ( rep_build_step_1.selectedfields.item( i ) ) == 'N'
         cReport += '            ALIGNMENT   RIGHT' + CR
      ENDIF

      cReport += '        END TEXT' + CR
      cReport += '' + CR

      nCurrentCol += nFieldWidth + nColumnSpace

   NEXT i

   cReport += '    END DETAIL' + CR
   cReport += '' + CR
   cReport += '    BEGIN FOOTER' + CR
   cReport += '' + CR
   cReport += '        BANDHEIGHT 23' + CR
   cReport += '' + CR
   cReport += '        BEGIN LINE' + CR
   cReport += '            FROMROW     4' + CR
   cReport += '            FROMCOL     10' + CR
   cReport += '            TOROW       4' + CR
   cReport += '            TOCOL       ' + AllTrim( Str( Int( GetPaperWidth() ) - 12 ) ) + CR
   cReport += '            PENWIDTH    0.1' + CR
   cReport += '        END LINE' + CR
   cReport += '' + CR
   cReport += '        BEGIN TEXT' + CR
   cReport += '            EXPRESSION  STR(_PageNo)' + CR
   cReport += '            ROW         6' + CR
   cReport += '            COL         ' + AllTrim( Str( GetPaperWidth() - 25 ) ) + CR
   cReport += '            WIDTH       100' + CR
   cReport += '            HEIGHT      10' + CR
   cReport += '            FONTNAME   "' + _ReportFontName + '"' + CR
   cReport += '            FONTSIZE    9' + CR
   cReport += '            FONTBOLD    .T.' + CR
   cReport += '        END TEXT' + CR
   cReport += '' + CR
   cReport += '        BEGIN TEXT' + CR
   cReport += '            EXPRESSION  dtoc(Date())' + CR
   cReport += '            ROW         6' + CR
   cReport += '            COL         10' + CR
   cReport += '            WIDTH       100' + CR
   cReport += '            HEIGHT      10' + CR
   cReport += '            FONTNAME   "' + _ReportFontName + '"' + CR
   cReport += '            FONTSIZE    9' + CR
   cReport += '            FONTBOLD    .T.' + CR
   cReport += '        END TEXT' + CR
   cReport += '' + CR
   cReport += '    END FOOTER' + CR

   aTotalize := {}

   FOR i := 1 TO reportsummaryoptions.fields.ItemCount

      IF reportsummaryoptions.fields.Cell ( i, 2 ) == '.T.'

         AAdd ( aTotalize, i )

      ENDIF

   NEXT i

   IF HMG_LEN ( aTotalize ) > 0

      // Summary

      cReport += '' + CR
      cReport += '    BEGIN SUMMARY' + CR
      cReport += '' + CR
      cReport += '        BANDHEIGHT 23' + CR
      cReport += '' + CR

      cReport += '        BEGIN TEXT' + CR
      cReport += '            EXPRESSION  "Total:"' + CR
      cReport += '            ROW         12' + CR
      cReport += '            COL         10' + CR
      cReport += '            WIDTH       100' + CR
      cReport += '            HEIGHT      10' + CR
      cReport += '            FONTNAME   "' + _ReportFontName + '"' + CR
      cReport += '            FONTSIZE    9' + CR
      cReport += '            FONTBOLD    .T.' + CR
      cReport += '        END TEXT' + CR

      nCurrentCol := nMargin

      FOR i := 1 TO reportsummaryoptions.fields.ItemCount

         r := AScan ( aTotalize, i )

         IF r <> 0

            cReport += '' + CR
            cReport += '        BEGIN TEXT' + CR

            cField := reportsummaryoptions.fields.cell( i, 1 )

            IF hb_ULeft ( cField, 2 ) == '* '

               cField := hb_USubStr ( cField, 3, 255 )

            ENDIF

            IF Empty ( ReportFormatOptions.formats.cell( i, 2 ) )

               cReport += '            EXPRESSION  _dbSum("' + cField + '") ' + CR

            ELSE

               cReport += '            EXPRESSION  Transform ( _dbSum("' + cField + '") , "' + ReportFormatOptions.formats.cell( i, 2 ) + '"  ) ' + CR

            ENDIF

            cReport += '            ROW         12' + CR
            cReport += '            COL         ' + AllTrim( Str( nCurrentCol ) ) + CR
            cReport += '            WIDTH       ' + AllTrim( Str( nFieldWidth ) ) + CR
            cReport += '            HEIGHT      10' + CR
            cReport += '            FONTNAME   "' + _ReportFontName + '"' + CR
            cReport += '            FONTSIZE    9' + CR
            cReport += '            FONTBOLD    .T.' + CR
            cReport += '            ALIGNMENT   RIGHT' + CR
            cReport += '        END TEXT' + CR
            cReport += '' + CR

         ENDIF

         nCurrentCol += nFieldWidth + nColumnSpace

      NEXT i

      cReport += '    END SUMMARY' + CR

   ENDIF


   // Group Definition *********************************************

   IF .NOT. Empty ( AllTrim( groupingoptions.groupby.value ) )

      cReport += '' + CR
      cReport += '    BEGIN GROUP' + CR
      cReport += '' + CR
      cReport += '        GROUPEXPRESSION ' + AllTrim( groupingoptions.groupby.value ) + CR
      cReport += '' + CR
      cReport += '        BEGIN GROUPHEADER' + CR
      cReport += '' + CR
      cReport += '            BANDHEIGHT 15' + CR
      cReport += '' + CR
      cReport += '            BEGIN TEXT' + CR

      IF lPreview

         cReport += '                EXPRESSION ' + '"' + hb_utf8StrTran( AllTrim( groupingoptions.groupheader.value ), '"', "'" ) + '"' + CR

      ELSE

         cReport += '                EXPRESSION ' + AllTrim( groupingoptions.groupheader.value ) + CR

      ENDIF

      cReport += '                ROW         5' + CR
      cReport += '                COL         5' + CR
      cReport += '                WIDTH       ' + AllTrim( Str( GetPaperWidth() ) ) + CR
      cReport += '                HEIGHT      20' + CR
      cReport += '                FONTNAME    "' + _ReportFontName + '"' + CR
      cReport += '                FONTSIZE    ' + AllTrim( Str( _ReportFontSize ) ) + CR
      cReport += '                FONTBOLD    .T.' + CR
      cReport += '                ALIGNMENT   CENTER' + CR
      cReport += '            END TEXT' + CR
      cReport += '' + CR
      cReport += '        END GROUPHEADER' + CR
      cReport += '' + CR
      cReport += '        BEGIN GROUPFOOTER' + CR
      cReport += '' + CR
      cReport += '            BANDHEIGHT 15' + CR
      cReport += '' + CR
      cReport += '            BEGIN TEXT' + CR

      IF lPreview

         cReport += '                EXPRESSION ' + '"' + hb_utf8StrTran( AllTrim( groupingoptions.groupfooter.value ), '"', "'" ) + '"' + CR

      ELSE

         cReport += '                EXPRESSION ' + AllTrim( groupingoptions.groupfooter.value ) + CR

      ENDIF

      cReport += '                ROW         5' + CR
      cReport += '                COL         5' + CR
      cReport += '                WIDTH       ' + AllTrim( Str( GetPaperWidth() ) ) + CR
      cReport += '                HEIGHT      20' + CR
      cReport += '                FONTNAME    "' + _ReportFontName + '"' + CR
      cReport += '                FONTSIZE    ' + AllTrim( Str( _ReportFontSize ) ) + CR
      cReport += '                FONTBOLD .T.' + CR
      cReport += '                ALIGNMENT   CENTER' + CR
      cReport += '            END TEXT' + CR
      cReport += '' + CR
      cReport += '        END GROUPFOOTER' + CR
      cReport += '' + CR
      cReport += '    END GROUP' + CR

   ENDIF

   // ******************************************************************************

   cReport += '' + CR
   cReport += 'END REPORT' + CR

   cReport += '' + CR

   cReport += '*_REPORT_BUILDER_DATA_BEGIN____________________________________' + CR
   cReport += '*' + CR


   cReport += '*_STEP_1_SELECTED_TABLE_________' + rep_build_step_1.tables.item( rep_build_step_1.tables.value ) + CR



   FOR i := 1 TO rep_build_step_1.availablefields.itemcount

      cReport += '*_STEP_1_AVAILABLE_FIELDS_______' + rep_build_step_1.availablefields.item( i ) + CR

   NEXT i


   FOR i := 1 TO rep_build_step_1.selectedfields.itemcount

      cReport += '*_STEP_1_SELECTED_FIELDS________' + rep_build_step_1.selectedfields.item( i ) + CR

   NEXT i


   cReport += '*_STEP_2_SELECTED_PAPER_SIZE____' + AllTrim( Str( rep_build_step_2.papersize.value ) ) + CR
   cReport += '*_STEP_2_SELECTED_ORIENTATION___' + AllTrim( Str( rep_build_step_2.orientation.value ) ) + CR



   cReport += '*_STEP_3_REPORT_TITLE___________' + AllTrim( rep_build_step_3.title.value ) + CR



   FOR i := 1 TO reporttitlesoptions.titles.itemcount

      cReport += '*_STEP_3_TITLES_FIELD___________' + reporttitlesoptions.titles.cell( i, 1 ) + CR

      cReport += '*_STEP_3_TITLES_TITLE___________' + reporttitlesoptions.titles.cell( i, 2 ) + CR

   NEXT i

   FOR i := 1 TO reportsummaryoptions.fields.itemcount

      cReport += '*_STEP_3_TOTALS_FIELD___________' + reportsummaryoptions.fields.cell( i, 1 ) + CR

      cReport += '*_STEP_3_TOTALS_TOTALIZE________' + reportsummaryoptions.fields.cell( i, 2 ) + CR

   NEXT i


   FOR i := 1 TO reportformatoptions.formats.itemcount

      cReport += '*_STEP_3_FORMATS_FIELD__________' + reportformatoptions.formats.cell( i, 1 ) + CR

      cReport += '*_STEP_3_FORMATS_MASK___________' + reportformatoptions.formats.cell( i, 2 ) + CR

   NEXT i


   cReport += '*_STEP_3_FONT_NAME______________' + AllTrim( _ReportFontName ) + CR
   cReport += '*_STEP_3_FONT_SIZE______________' + AllTrim( Str( _ReportFontSize ) ) + CR
   cReport += '*_STEP_3_FONT_BOLD______________' + if ( _ReportFontBold, '.T.', '.F.' ) + CR
   cReport += '*_STEP_3_FONT_ITALIC____________' + if ( _ReportFontItalic, '.T.', '.F.' ) + CR


   cReport += '*_STEP_3_GROUPEXPRESSION________' + AllTrim( groupingoptions.groupby.value ) + CR
   cReport += '*_STEP_3_GROUPHEADER____________' + AllTrim( groupingoptions.groupheader.value ) + CR
   cReport += '*_STEP_3_GROUPFOOTER____________' + AllTrim( groupingoptions.groupfooter.value ) + CR


   cReport += '*' + CR
   cReport += '*_REPORT_BUILDER_DATA_END______________________________________' + CR
   cReport += '' + CR

RETURN cReport

PROCEDURE reportsummaryoptions

   reportsummaryoptions.CENTER
   reportsummaryoptions.show

RETURN

PROCEDURE resettotals

   LOCAL i

   reportsummaryoptions.fields.deleteallitems

   FOR i := 1 TO rep_build_step_1.selectedfields.itemcount

      reportsummaryoptions.fields.additem ( { rep_build_step_1.selectedfields.item( i ), ".F." } )

   NEXT i

RETURN

PROCEDURE resettitles

   LOCAL cTitle, i, s

   reporttitlesoptions.titles.deleteallitems

   FOR i := 1 TO rep_build_step_1.selectedfields.itemcount

      cTitle := rep_build_step_1.selectedfields.item( i )

      s := hb_UAt ( '>', cTitle )

      cTitle := hb_USubStr ( cTitle, s + 1, 255 )

      IF hb_ULeft ( cTitle, 2 ) == '* '

         cTitle := hb_USubStr ( cTitle, 3, 255 )

      ENDIF

      reporttitlesoptions.titles.additem ( { rep_build_step_1.selectedfields.item( i ), Capitalize ( cTitle ) } )

   NEXT i

RETURN

PROCEDURE resetformats

   LOCAL i

   reportformatoptions.formats.deleteallitems

   FOR i := 1 TO rep_build_step_1.selectedfields.itemcount

      reportformatoptions.formats.additem ( { rep_build_step_1.selectedfields.item( i ), '' } )

   NEXT i

RETURN

PROCEDURE reporttitlesoptions

   reporttitlesoptions.CENTER
   reporttitlesoptions.show

RETURN

PROCEDURE reporttitleedit

   LOCAL i
   LOCAL cTemp

   i := reporttitlesoptions.titles.VALUE

   IF i == 0
      RETURN
   ENDIF

   cTemp := InputBox ( '', aMsgs[ 277 ], reporttitlesoptions.titles.cell( i, 2 ) )

   IF Empty ( cTemp )
      RETURN
   ENDIF

   reporttitlesoptions.titles.cell( i, 2 ) := cTemp

RETURN

PROCEDURE reportformatoptions

   reportformatoptions.CENTER
   reportformatoptions.show

RETURN

PROCEDURE ReportFormatsEdit

   LOCAL i
   LOCAL cTemp

   i := ReportFormatOptions.formats.VALUE

   IF i == 0
      RETURN
   ENDIF

   cTemp := InputBox ( '', aMsgs[ 276 ], ReportFormatOptions.formats.cell( i, 2 ) )

   IF _HMG_DialogCancelled == .T.
      RETURN
   ENDIF

   ReportFormatOptions.formats.cell( i, 2 ) := cTemp

RETURN

PROCEDURE TotalizeChange()

   LOCAL i

   i := reportsummaryoptions.fields.VALUE

   IF reportsummaryoptions.fields.cell( i, 1 ) = '*'

      If ! MsgYesNo ( aMsgs[ 274 ], 'HMG IDE' )
         RETURN
      ENDIF

   ENDIF

   IF reportsummaryoptions.fields.cell( i, 2 ) = '.T.'

      reportsummaryoptions.fields.cell( i, 2 ) := '.F.'

   ELSEIF reportsummaryoptions.fields.cell( i, 2 ) = '.F.'

      reportsummaryoptions.fields.cell( i, 2 ) := '.T.'

   ENDIF

RETURN


*------------------------------------------------------------------------------*
STATIC FUNCTION IdeGetFont( cInitFontName, nInitFontSize, lBold, lItalic, anInitColor, lUnderLine, lStrikeOut, nCharset )
*------------------------------------------------------------------------------*
   LOCAL RetArray /*[8]*/, Tmp, rgbcolor

   IF ValType ( cInitFontName ) == 'U'
      cInitFontName := ""
   ENDIF

   IF ValType ( nInitFontSize ) == 'U'
      nInitFontSize := 0
   ENDIF

   IF ValType ( lBold ) == 'U'
      lBold := .F.
   ENDIF

   IF ValType ( lItalic ) == 'U'
      lItalic := .F.
   ENDIF

   IF ValType ( anInitColor ) == 'U'
      rgbcolor := 0
   ELSE
      rgbcolor := RGB( anInitColor[ 1 ], anInitColor[ 2 ], anInitColor[ 3 ] )
   ENDIF

   IF ValType ( lUnderLine ) == 'U'
      lUnderLine := .F.
   ENDIF

   IF ValType ( lStrikeOut ) == 'U'
      lStrikeOut := .F.
   ENDIF

   IF ValType ( nCharSet ) == 'U'
      nCharSet := 0
   ENDIF

   RetArray := IdeChooseFont( cInitFontName, nInitFontSize, lBold, lItalic, rgbcolor, lUnderLine, lStrikeOut, nCharSet )

   IF ! Empty ( RetArray[ 1 ] )
      Tmp := RetArray[ 5 ]
      RetArray[ 5 ] := { GetRed( Tmp ), GetGreen( Tmp ), GetBlue( Tmp ) }
   ELSE
      RetArray[ 5 ] := { NIL, NIL, Nil }
   ENDIF

RETURN RetArray


PROCEDURE ReportGetFont

   LOCAL a

   a := IdeGetFont ( _ReportFontName, _ReportFontSize, _ReportFontBold, _ReportFontItalic, { 0, 0, 0 }, .F., .F., 0 )

   if ! Empty ( a[ 1 ] )

      _ReportFontName := a[ 1 ]

      _ReportFontSize := a[ 2 ]

      IF a[ 3 ] == .T.
         _ReportFontBold := .T.
      ELSE
         _ReportFontBold := .F.
      ENDIF

      IF a[ 4 ] == .T.
         _ReportFontItalic := .T.
      ELSE
         _ReportFontItalic := .F.
      ENDIF

   ENDIF

RETURN


PROCEDURE addcustomfield

   LOCAL cField

   cField := InputBox ( '', aMsgs[ 272 ], '' )

   If ! Empty( cField )

      rep_build_step_1.selectedfields.additem ( '* ' + cField )

      resetformats()
      resettitles()
      resettotals()

   ENDIF

RETURN

PROCEDURE deletecustomfield()

   LOCAL i

   i := rep_build_step_1.selectedfields.VALUE

   IF i == 0
      RETURN
   ENDIF

   IF hb_ULeft ( rep_build_step_1.selectedfields.item ( i ), 2 ) == '* '

      IF MsgYesNo( aMsgs[ 099 ] )

         rep_build_step_1.selectedfields.deleteitem ( i )

         resetformats()
         resettitles()
         resettotals()

      ENDIF

   ELSE

      MsgStop ( aMsgs[ 275 ], 'HMG IDE' )

   ENDIF

RETURN

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

*------------------------------------------------------------------------------*
PROCEDURE showlog ( clog )
*------------------------------------------------------------------------------*
   LOCAL nLeftPar, nRightPar, cLine, cLine1, cLine2, cLineOriginal, /*cLineFixed,*/ cPrgName, nLineNo
   LOCAL i

   cLog := hb_utf8StrTran ( cLog, Chr( 13 ) + Chr( 13 ), CRLF )

   IF HMG_UPPER( "HMG_IDE_NoRunApp" ) $ HMG_UPPER ( cLog ) // ADD: App is running
      RETURN
   ENDIF

   DEFINE WINDOW showlog AT 0, 0 WIDTH 800 HEIGHT 580 TITLE aMsgs[ 092 ] MODAL

      ON KEY F5 OF showlog ACTION ( showlog.RELEASE, DoEvents(), newbuild.RELEASE, DoEvents(), RunApplication() )
      ON KEY F8 OF showlog ACTION ( showlog.RELEASE, DoEvents(), newbuild.RELEASE, DoEvents(), ENABLEDEBUGGER := .T., RunApplication() )
      ON KEY ESCAPE OF showlog ACTION ( showlog.RELEASE, DoEvents(), DoEvents(), DoEvents(), DoEvents(), newbuild.RELEASE, DoEvents(), DoEvents(), DoEvents(), DoEvents() )

      DEFINE GRID grid_0
         ROW 10
         COL 10
         WIDTH 770
         HEIGHT 090
         ITEMS { { '' } }
         HEADERS { aMsgs[ 091 ] }
         ONCHANGE geterrorprocname( this.value )
         lines .F.
         WIDTHS { 730 }

         FONTNAME 'courier new'
         FONTSIZE 9

      END GRID

      DEFINE GRID grid_1
         ROW 110
         COL 10
         WIDTH 770
         HEIGHT 390
         HEADERS { '', '' }
         WIDTHS { 45, 670 }

         allowedit .T.
         inplaceedit {}
         lines .F.

         columnwhen { {|| .F. }, {|| .T. } }

         VIRTUAL .T.
         ITEMCOUNT 0
         ONQUERYDATA QueryTest()
         FONTNAME 'courier new'
         FONTSIZE 9

         columnvalid { NIL, {|| SaveFixedModule() } }

      END GRID

      DEFINE BUTTON rebuild
         ROW 510
         COL 565
         CAPTION aMsgs[ 021 ] + ' [F5]'
         ACTION ( showlog.RELEASE, DoEvents(), newbuild.RELEASE, DoEvents(), RunApplication() )
      END BUTTON

      DEFINE BUTTON CLOSE
         ROW 510
         COL 675
         CAPTION aMsgs[ 106 ] + ' [ESC]'
         ACTION showlog.RELEASE
      END BUTTON



      DEFINE LABEL label1
         ROW 511
         COL 10
         WIDTH 400
         VALUE aMsgs[ 90 ]
      END LABEL

   END WINDOW

   showlog.grid_0.deleteallitems

   FOR i := 1 TO MLCount ( cLog )

      cLine := AllTrim ( MemoLine ( clog, 1024, i ) )

      cLine := hb_ULeft ( cLine, HMG_LEN( cLine ) - 1 )

      IF "Can't delete previous" $ cLine

         showlog.grid_0.additem( { 'HMG-IDE Builder: ' + cLine } )
         showlog.debug.enabled := .F.
         showlog.rebuild.enabled := .F.

      ENDIF

      IF '.prg(' $ HMG_LOWER( cLine )

         showlog.grid_0.additem( { 'Harbour: ' + cLine } )

      ENDIF

      IF '.fmg(' $ HMG_LOWER( cLine )

         showlog.grid_0.additem( { 'Harbour: ' + cLine } )

      ENDIF

      IF '.ch(' $ HMG_LOWER( cLine )

         showlog.grid_0.additem( { 'Harbour: ' + cLine } )

      ENDIF

      IF 'reference' $ HMG_LOWER( cLine ) ;
            .OR. ;
            'multiple definition' $ HMG_LOWER( cLine ) ;
            .OR. ;
            'first defined here' $ HMG_LOWER( cLine )


         cLine := hb_utf8StrTran ( cLine, 'HB_FUN_', '' )

         nLeftPar := hb_UAt ( '(', cLine )
         nRightPar := hb_UAt ( ')', cLine )

         cLine1 := hb_USubStr ( cLine, 1, nLeftPar - 1 )
         cLine2 := hb_USubStr ( cLine, nRightPar + 1, 255 )

         cLine := cLine1 + cLine2

         cLineOriginal := cLine

         nRightPar := hb_utf8RAt ( ':', cLine )

         cLine1 := hb_USubStr ( cLine, 1, nRightPar - 3 ) + 'prg:'
         cLine2 := hb_USubStr ( cLine, nRightPar + 1, 255 )

         cLine := cLine1 + cLine2

         // cLineFixed := cLine

         // get prg name

         nLeftPar := hb_UAt ( ':', cLine )
         nRightPar := hb_utf8RAt ( ':', cLine )

         cPrgName := hb_USubStr ( cLine, nLeftPar + 1, nRightPar - nLeftPar - 1 )

         if ! File( cPrgName )
            cLine := cLineOriginal
         ENDIF

         showlog.grid_0.additem( { 'Linker ' + cLine } )

      ENDIF

      IF 'windres' $ HMG_LOWER( cLine )
         cLine := hb_utf8StrTran ( cLine, 'windres:', '' )
         cLine := hb_utf8StrTran ( cLine, '_temp.rc:', 'line:' )


         nLeftPar := hb_UAt ( ':', cLine )
         nRightPar := hb_utf8RAt ( ':', cLine )

         nLineNo := Val ( hb_USubStr( cLine, nLeftPar + 1, nRightPar - nLeftPar - 1 ) ) - 42

         cLine := AllTrim ( hb_USubStr ( cLine, 1, nLeftPar ) + AllTrim( Str( nLineNo ) ) + hb_USubStr ( cLine, nRightPar, 1024 ) )

         showlog.grid_0.additem( { 'Resource compiler ' + cLine } )

      ENDIF

   NEXT i


   showlog.grid_0.VALUE := 1
   showlog.grid_0.setfocus

   showlog.CENTER

   showlog.ACTIVATE

RETURN


STATIC PROCEDURE QueryTest()

   IF This.QueryColIndex == 1

      This.QueryData := StrZero ( This.QueryRowIndex, 5 )

   ELSE

      IF .T.

         This.QueryData := RTrim ( MemoLine ( cSourceBuffer, 1024, This.QueryRowIndex, 8 ) )

      ELSE

         This.QueryData := RTrim ( MyMemoline ( cSourceBuffer, 1024, This.QueryRowIndex ) )

      ENDIF

   ENDIF

RETURN


PROCEDURE SaveFixedModule()

   LOCAL c
   LOCAL nCellRow
   // local nCellCol
   LOCAL cNewLine
   LOCAL string1, string2, string3, pos1, pos2
   LOCAL mlc

   nCellRow := This.CellRowIndex
   // nCellCol := This.CellColIndex
   cNewLine := This.CellValue

   cNewLine := hb_utf8StrTran( cNewLine, Space ( 4 ), Chr( 9 ) )

   c := hb_MemoRead ( cCurrentFixedFile )

   mlc := MLCount ( c )

   pos1 := MLPos( c, 1024, nCellRow )
   pos2 := MLPos( c, 1024, nCellRow + 1 )

   IF nCellRow <> mlc

      string1 := hb_USubStr ( c, 1, pos1 - 1 )
      string2 := cNewLine + CRLF
      string3 := hb_USubStr ( c, pos2, HMG_LEN( c ) )

   ELSE

      string1 := hb_USubStr ( c, 1, pos1 - 1 )
      string2 := cNewLine
      string3 := ''

   ENDIF

   cSourceBuffer := string1 + string2 + string3

   savestring ( cCurrentFixedFile, cSourceBuffer )

   IF HMG_LOWER ( hb_URight ( cCurrentFixedFile, 3 ) ) == '.rc'
      project.edit_1.VALUE := cSourceBuffer
   ENDIF

   showlog.rebuild.enabled := .T.
   showlog.close.enabled := .T.

RETURN


#define EM_SCROLLCARET 183
#define EM_SETSEL 177

*------------------------------------------------------------------------------*
PROCEDURE geterrorprocname ( i )
*------------------------------------------------------------------------------*
   LOCAL cFileName, nLineNo, cPrgFile
   LOCAL cSearch
   LOCAL nPos
   LOCAL aLineColumn
   LOCAL cLine
   LOCAL nLeftPar
   LOCAL nRightPar
   LOCAL mlc
   LOCAL cMissingProc

   PUBLIC cCurrentFixedFile

   IF hb_ULeft ( showlog.grid_0.cell( i, 1 ), 16 ) == 'HMG-IDE Builder:'

      showlog.grid_1.caption( 1 ) := ''
      showlog.grid_1.caption( 2 ) := ''
      showlog.grid_1.itemcount := 0

      showlog.grid_0.VALUE := 1
      showlog.grid_0.setfocus

      RETURN

   ELSEIF hb_ULeft ( showlog.grid_0.cell( i, 1 ), 6 ) == 'Linker'

      cLine := Showlog.grid_0.cell( i, 1 )

      // get prg name

      nLeftPar := hb_UAt ( ':', cLine )
      nRightPar := hb_utf8RAt ( ':', cLine )

      cFileName := hb_USubStr ( cLine, nLeftPar + 1, nRightPar - nLeftPar - 1 )

      if ! File( cFileName )

         showlog.grid_1.itemcount := 0
         showlog.grid_1.caption( 1 ) := ''
         showlog.grid_1.caption( 2 ) := ''

         RETURN

      ELSE

         // nLineNo := 1

         cCurrentFixedFile := cFileName

         cPrgFile := hb_MemoRead ( cFileName )

         cSourceBuffer := cPrgFile

         mlc := MLCount ( cPrgFile )

         showlog.grid_1.caption( 1 ) := '#'
         showlog.grid_1.caption( 2 ) := cFileName

         showlog.grid_1.itemcount := mlc


         nLeftPar := hb_UAt ( "`", cLine )
         nRightPar := hb_UAt ( "'", cLine )
         cMissingProc := hb_USubStr ( cLine, nLeftPar + 1, nRightPar - nLeftPar - 1 )

         cSearch := HMG_LOWER( cMissingProc )

         if ! Empty ( cSearch )

            nPos := hb_UAt ( cSearch, HMG_LOWER( cPrgFile ) )

            aLineColumn := MPosToLC( cPrgFile, 1024, nPos )

            nLineNo := aLineColumn[ 1 ]

         ELSE

            cLine := Showlog.grid_0.cell( i - 1, 1 )
            nLeftPar := hb_UAt ( "`", cLine )
            nRightPar := hb_UAt ( "'", cLine )
            cMissingProc := hb_USubStr ( cLine, nLeftPar + 1, nRightPar - nLeftPar - 1 )
            cSearch := HMG_LOWER( cMissingProc )
            if ! Empty ( cSearch )
               nPos := hb_UAt ( cSearch, HMG_LOWER( cPrgFile ) )
               aLineColumn := MPosToLC( cPrgFile, 1024, nPos )
               nLineNo := aLineColumn[ 1 ]
            ELSE
               nLineNo := 1
            ENDIF

         ENDIF

         showlog.grid_1.VALUE := nLineNo
         showlog.grid_1.setfocus

         RETURN

      ENDIF

   ENDIF

   cLine := Showlog.grid_0.cell( i, 1 )

   nLeftPar := hb_UAt ( '(', cLine )
   nRightPar := hb_UAt ( ')', cLine )

   IF nLeftPar == 0 .AND. nRightPar == 0

      nLeftPar := hb_UAt ( ':', cLine )
      nRightPar := hb_utf8RAt ( ':', cLine )

      cFileName := hb_URight ( ProjectName, HMG_LEN( Projectname ) - hb_utf8RAt ( '\', ProjectName ) )
      cFileName := hb_ULeft ( cFileName, HMG_LEN( cFileName ) - 4 ) + '.rc'

      nLineNo := Val ( hb_USubStr( cLine, nLeftPar + 1, nRightPar - nLeftPar - 1 ) )

   ELSE

      cFileName := hb_USubStr ( cLine, 10, hb_UAt ( '(', cLine ) - 10 )
      cFileName := hb_utf8StrTran ( cFileName, '/', '\' )

      nLineNo := Val ( hb_USubStr( cLine, nLeftPar + 1, nRightPar - nLeftPar - 1 ) )

   ENDIF

   cCurrentFixedFile := cFileName

   showlog.grid_1.caption( 1 ) := '#'
   showlog.grid_1.caption( 2 ) := cFileName

   cPrgFile := hb_MemoRead ( cFileName )
   cSourceBuffer := cPrgFile
   mlc := MLCount ( cPrgFile )

   showlog.grid_1.itemcount := 0
   showlog.grid_1.itemcount := mlc

   showlog.grid_1.VALUE := nLineNo
   showlog.grid_1.setfocus

RETURN

*------------------------------------------------------------------------------*
PROCEDURE NewInclude ( cNewModule )
*------------------------------------------------------------------------------*
   LOCAL Result
   LOCAL i
   LOCAL cProgram

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   IF ValType ( cNewModule ) = 'U'
      Result := AllTrim ( InputBox ( aMsgs[ 152 ], aMsgs[ 280 ], '' ) )
      cProgram := ''
   ELSE
      Result := cNewModule
      cProgram := ''
   ENDIF

   IF _HMG_DialogCancelled == .T.
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN
   ENDIF

   IF Empty ( Result )
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN
   ENDIF

   Result := AllTrim ( Result )

   IF HMG_UPPER ( hb_URight ( Result, 4 ) ) != '.CH'
      Result := Result + '.ch'
   ENDIF

   FOR i := 1 TO Project.List_4.ItemCount
      IF AllTrim( HMG_UPPER( Project.List_4.Item( i ) ) ) == AllTrim( HMG_UPPER( result ) )
         MsgStop( aMsgs[ 156 ], 'HMG IDE' )
         RETURN
      ENDIF
   NEXT i

   IF File ( Result )

      IF MsgYesNo ( Result + ' ' + aMsgs[ 227 ] )

         SaveString ( Result, cProgram )

      ELSE

         RETURN

      ENDIF

   ELSE

      SaveString ( Result, cProgram )

   ENDIF

   Project.List_4.AddItem ( Result )

   SortIncludeList()

   EXECUTE FILE ProgramEditor PARAMETERS Result

   SaveProject()

   Project.Tab_1.VALUE := 6

   IF _IsWindowDefined ( DesignForm )
      SelectControl ( SelectedControlName )
      DrawGrid()
   ENDIF

RETURN


*------------------------------------------------------------------------------*
PROCEDURE SaveResources
*------------------------------------------------------------------------------*
   LOCAL xName
   LOCAL cData

   IF Empty ( Projectname )
      RETURN
   ENDIF

   IF Project.List_1.ItemCount == 0
      RETURN
   ENDIF

   xName := hb_URight ( ProjectName, HMG_LEN( Projectname ) - hb_utf8RAt ( '\', ProjectName ) )
   xName := hb_ULeft ( xName, HMG_LEN( xName ) - 4 ) + '.rc'

   SaveString ( xName, Project.Edit_1.Value )


   xName := hb_URight ( ProjectName, HMG_LEN( Projectname ) - hb_utf8RAt ( '\', ProjectName ) )
   xName := hb_ULeft ( xName, HMG_LEN( xName ) - 4 ) + '.hbc'

   cData := project.config.VALUE

   SaveString ( xName, cData )

RETURN

*------------------------------------------------------------------------------*
PROCEDURE EventEdit()
*------------------------------------------------------------------------------*
   LOCAL Result
   LOCAL i, aRow, EventName, st, cSnippetName, x, cDefaultValue, cWindowName, cTemp

   i := Properties.Grid_2.VALUE

   IF i == 0
      RETURN
   ENDIF

   aRow := Properties.Grid_2.Item ( i )

   EventName := AllTrim ( HMG_UPPER ( aRow[ 1 ] ) )

	***********************************************************************
	* Begin User *
	***********************************************************************

   IF SelectedControlType == 'USER'

      Result := AllTrim ( PickCharacterPropertyValue ( aMsgs[ 131 ], aRow[ 1 ] + ':', aRow[ 2 ] ) )

      IF _HMG_DialogCancelled == .F.

         DesignFormModified := .T.

         if ! Empty ( SelectedControlName )

            __mvPut( SelectedControlName + EventName, Result )
            SelectControl ( SelectedControlName )

         ENDIF

      ENDIF

      RETURN

   ENDIF

	***********************************************************************
	* End User *
	***********************************************************************

   IF EventName == 'ONHSCROLLBOX' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF
   IF EventName == 'ONVSCROLLBOX' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF
   IF EventName == 'ONSCROLLDOWN' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF
   IF EventName == 'ONSCROLLLEFT' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF
   IF EventName == 'ONSCROLLRIGHT' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF
   IF EventName == 'ONSCROLLEIGHT' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF
   IF EventName == 'ONSCROLLUP' .AND. ! lVirtualForm
      Playhand()
      RETURN
   ENDIF

   IF This.CellColIndex == 1

      RETURN

   ELSEIF This.CellColIndex == 2

      Result := AllTrim ( PickCharacterPropertyValue ( aMsgs[ 131 ], aRow[ 1 ] + ':', aRow[ 2 ] ) )

   ELSEIF This.CellColIndex == 3

      cDefaultValue := AllTrim( hb_USubStr ( properties.TITLE, hb_UAt( '[', properties.title ) + 1, 255 ) )

      cDefaultValue := hb_ULeft ( cDefaultValue, hb_UAt( '.', cDefaultValue ) - 1 ) + '_'

      cDefaultValue += AllTrim( properties.combo_1.item( properties.combo_1.value ) ) + '_' + AllTrim( aRow[ 1 ] )

      cDefaultValue := HMG_LOWER( cDefaultValue )

      Result := AllTrim ( PickCharacterPropertyValue ( aMsgs[ 071 ], aRow[ 1 ] + ':', cDefaultValue ) )


      IF hb_URight ( result, 2 ) == '()'

         result := hb_ULeft ( result, HMG_LEN( result ) - 2 )

      ENDIF

      IF HMG_LOWER( AllTrim( hb_URight ( result, 4 ) ) ) == '.prg'

         result := hb_ULeft ( result, HMG_LEN( result ) - 4 )

      ENDIF


      cTemp := aRow[ 2 ]

      IF hb_URight ( cTemp, 2 ) == '()'

         cTemp := hb_ULeft ( cTemp, HMG_LEN( cTemp ) - 2 )

      ENDIF



      IF File ( cTemp + '.prg' )

         IF MsgYesNo ( aMsgs[ 073 ], 'HMG-IDE' )

            DELETE File ( cTemp + '.prg' )

            FOR x := 1 TO Project.List_1.ItemCount

               IF HMG_UPPER( AllTrim( Project.List_1.Item( x ) ) ) == HMG_UPPER( AllTrim( cTemp + '.prg' ) )

                  Project.List_1.DeleteItem ( x )

                  SaveProject()

                  SortModuleList()

               ENDIF

            NEXT x

         ENDIF

      ENDIF


      IF _HMG_DialogCancelled == .F.

         cTemp := AllTrim( hb_USubStr ( properties.TITLE, hb_UAt( '[', properties.title ) + 1, 255 ) )

         cWindowName := hb_ULeft ( cTemp, hb_UAt( '.', cTemp ) - 1 )


         st := CreateCodeSnippet( Result, cWindowName )

         IF st == .F.

            _HMG_DialogCancelled := .T.

         ELSE

            result := result + '()'

         ENDIF

      ENDIF

   ELSEIF This.CellColIndex == 4

      cSnippetName := AllTrim ( aRow[ 2 ] )

      IF hb_URight ( cSnippetName, 2 ) == '()'

         cSnippetName := hb_ULeft ( cSnippetName, HMG_LEN( cSnippetName ) - 2 )

      ENDIF

      cSnippetName += '.prg'

      IF File ( cSnippetName )

         IF msgyesno( aMsgs[ 099 ], aMsgs[ 007 ] + ' ' + cSnippetName )

            DELETE File ( cSnippetName )

            Properties.Grid_2.cell( i, 2 ) := 'Nil'

            Result := 'Nil'

            FOR x := 1 TO Project.List_1.ItemCount

               IF HMG_UPPER( AllTrim( Project.List_1.Item( x ) ) ) == HMG_UPPER( AllTrim( cSnippetName ) )

                  Project.List_1.DeleteItem ( x )

                  SaveProject()

                  SortModuleList()

               ENDIF

            NEXT x

         ENDIF

      ELSE

         MsgStop ( aMsgs[ 162 ], 'HMG-IDE' )
         _HMG_DialogCancelled := .T.

      ENDIF

   ELSEIF This.CellColIndex == 5

      cSnippetName := AllTrim ( aRow[ 2 ] )

      IF hb_URight ( cSnippetName, 2 ) == '()'

         cSnippetName := hb_ULeft ( cSnippetName, HMG_LEN( cSnippetName ) - 2 )

      ENDIF

      cSnippetName += '.prg'

      IF File ( cSnippetName )

         EXECUTE FILE ProgramEditor PARAMETERS cSnippetName

         RETURN

      ELSE

         MsgStop ( aMsgs[ 162 ], 'HMG-IDE' )

         RETURN

      ENDIF

   ELSE

      RETURN

   ENDIF

   IF _HMG_DialogCancelled == .F.

      DesignFormModified := .T.

      if ! Empty ( SelectedControlName )

         Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }

         IF SelectedControlType == 'BUTTON'

            IF EventName == 'ACTION'
               __mvPut( SelectedControlName + 'Action', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'CHECKBOX'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'LISTBOX'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONDBLCLICK'
               __mvPut( SelectedControlName + 'OnDblClick', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'COMBOBOX'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONENTER'
               __mvPut( SelectedControlName + 'OnEnter', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONDISPLAYCHANGE'
               __mvPut( SelectedControlName + 'OnDisplayChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONDROPDOWN'
               __mvPut( SelectedControlName + 'OnDropDown', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONCLOSEUP'
               __mvPut( SelectedControlName + 'OnCloseUp', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'CHECKBUTTON'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'GRID'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONDBLCLICK'
               __mvPut( SelectedControlName + 'OnDblClick', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONHEADCLICK'
               __mvPut( SelectedControlName + 'OnHeadClick', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONQUERYDATA'
               __mvPut( SelectedControlName + 'OnQueryData', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONSAVE'
               __mvPut( SelectedControlName + 'OnSave', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'SLIDER'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'SPINNER'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'IMAGE'

            IF EventName == 'ACTION'
               __mvPut( SelectedControlName + 'Action', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'TREE'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONDBLCLICK'
               __mvPut( SelectedControlName + 'OnDblClick', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'DATEPICKER'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONENTER'
               __mvPut( SelectedControlName + 'OnEnter', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'TEXTBOX'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONENTER'
               __mvPut( SelectedControlName + 'OnEnter', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'EDITBOX'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'LABEL'
            IF EventName == 'ACTION'
               __mvPut( SelectedControlName + 'Action', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'BROWSE'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONDBLCLICK'
               __mvPut( SelectedControlName + 'OnDblClick', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONHEADCLICK'
               __mvPut( SelectedControlName + 'OnHeadClick', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'RADIOGROUP'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'FRAME'

         ELSEIF SelectedControlType == 'ANIMATEBOX'

         ELSEIF SelectedControlType == 'HYPERLINK'

         ELSEIF SelectedControlType == 'MONTHCALENDAR'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'RICHEDITBOX'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'PROGRESSBAR'

         ELSEIF SelectedControlType == 'PLAYER'

         ELSEIF SelectedControlType == 'IPADDRESS'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONGOTFOCUS'
               __mvPut( SelectedControlName + 'OnGotFocus', Result )
               SelectControl ( SelectedControlName )
            ELSEIF EventName == 'ONLOSTFOCUS'
               __mvPut( SelectedControlName + 'OnlostFocus', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'TAB'

            IF EventName == 'ONCHANGE'
               __mvPut( SelectedControlName + 'OnChange', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ELSEIF SelectedControlType == 'TIMER'

            IF EventName == 'ACTION'
               __mvPut( SelectedControlName + 'Action', Result )
               SelectControl ( SelectedControlName )
            ENDIF

         ENDIF

      ELSE

         IF EventName == 'ONINIT'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnInit', Result )

         ELSEIF EventName == 'ONRELEASE'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnRelease', Result )

         ELSEIF EventName == 'ONINTERACTIVECLOSE'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnInteractiveClose', Result )

         ELSEIF EventName == 'ONMOUSECLICK'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnMouseClick', Result )

         ELSEIF EventName == 'ONMOUSEDRAG'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnMouseDrag', Result )

         ELSEIF EventName == 'ONMOUSEMOVE'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnMouseMove', Result )

         ELSEIF EventName == 'ONSIZE'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnSize', Result )

         ELSEIF EventName == 'ONMAXIMIZE'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnMaximize', Result )

         ELSEIF EventName == 'ONMINIMIZE'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnMinimize', Result )

         ELSEIF EventName == 'ONPAINT'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnPaint', Result )

         ELSEIF EventName == 'ONNOTIFYCLICK'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnNotifyClick', Result )

         ELSEIF EventName == 'ONGOTFOCUS'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnGotFocus', Result )

         ELSEIF EventName == 'ONLOSTFOCUS'

            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'OnLostFocus', Result )

         ELSEIF EventName == 'ONSCROLLUP'
            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'ONSCROLLUP', Result )

         ELSEIF EventName == 'ONSCROLLDOWN'
            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'ONSCROLLDOWN', Result )

         ELSEIF EventName == 'ONSCROLLLEFT'
            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'ONSCROLLLEFT', Result )

         ELSEIF EventName == 'ONSCROLLRIGHT'
            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'ONSCROLLRIGHT', Result )

         ELSEIF EventName == 'ONHSCROLLBOX'
            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'ONHSCROLLBOX', Result )

         ELSEIF EventName == 'ONVSCROLLBOX'
            Properties.Grid_2.Item ( i ) := { aRow[ 1 ], Result }
            __mvPut( DesignForm + 'ONVSCROLLBOX', Result )

         ENDIF

      ENDIF

      Properties.Grid_2.VALUE := i
      Properties.Grid_2.SetFocus

   ELSE

      if ! Empty ( SelectedControlName )
         SelectControl ( SelectedControlName )
      ENDIF

      Properties.Grid_2.VALUE := i
      Properties.Grid_2.SetFocus

   ENDIF

RETURN

*------------------------------------------------------------------------------*
FUNCTION CreateCodeSnippet( cArg, cWindowName )
*------------------------------------------------------------------------------*
   LOCAL cModule
   LOCAL cFileName
   LOCAL i, ITEM

   cArg := AllTrim ( cArg )

   cFileName := cArg + '.prg'

   FOR i := 1 TO Project.List_1.ItemCount
      ITEM := Project.List_1.Item( i )
      IF AllTrim ( HMG_UPPER( Item ) ) == AllTrim( HMG_UPPER( cFileName ) ) .OR. AllTrim ( HMG_UPPER( cFileName ) ) == AllTrim( HMG_UPPER( cFileName ) ) + ' (MAIN)'
         MsgStop( aMsgs[ 165 ], 'HMG IDE' )
         RETURN .F.
      ENDIF
   NEXT i

   IF File ( cFileName )

      if ! MsgYesNo ( aMsgs[ 227 ], 'HMG-IDE' )

         RETURN .F.

      ENDIF

   ENDIF

   cModule := ''

   cModule += '#include "hmg.ch"' + CRLF

   cModule += '' + CRLF

   cModule += 'declare window ' + cWindowName + CRLF

   cModule += '' + CRLF

   cModule += 'Function ' + cArg + CRLF
   cModule += '' + CRLF
   cModule += '' + CRLF
   cModule += 'Return Nil' + CRLF

   SaveString ( cFileName, cModule )

   Project.List_1.AddItem ( cFileName )

   SaveProject()

   SortModuleList()

   EXECUTE FILE ProgramEditor PARAMETERS AllTrim( cArg ) + '.prg'

RETURN .T.



PROCEDURE LoadNewReport( cFileName )

   LOCAL cLine, cToken, cValue, cTemp
   LOCAL creport
   LOCAL i
   LOCAL x

   reporttitlesoptions.titles.deleteallitems
   reportsummaryoptions.fields.deleteallitems
   reportformatoptions.formats.deleteallitems


   cReport := hb_MemoRead ( cFileName )


   FOR i := 1 TO MLCount ( cReport )


      cLine := AllTrim ( MemoLine ( cReport, 254, i ) )

      cToken := hb_ULeft ( cLine, 32 )

      cValue := AllTrim ( hb_USubStr ( cLine, 33, 254 ) )


      IF cToken == '*_STEP_1_SELECTED_TABLE_________'


         FOR x := 1 TO rep_build_step_1.tables.itemcount

            IF AllTrim ( HMG_LOWER ( rep_build_step_1.tables.item( x ) ) ) == AllTrim ( HMG_LOWER ( cValue ) )

               rep_build_step_1.tables.VALUE := x
               rep_build_step_1.availablefields.deleteallitems
               EXIT

            ENDIF

         NEXT x

      ENDIF

      IF cToken == '*_STEP_1_SELECTED_FIELDS________'

         rep_build_step_1.selectedfields.additem( cValue )

      ENDIF


      IF cToken == '*_STEP_1_AVAILABLE_FIELDS_______'

         rep_build_step_1.availablefields.additem( cValue )

      ENDIF


      IF cToken == '*_STEP_2_SELECTED_PAPER_SIZE____'

         rep_build_step_2.papersize.VALUE := Val ( cValue )

      ENDIF

      IF cToken == '*_STEP_2_SELECTED_ORIENTATION___'

         rep_build_step_2.orientation.VALUE := Val ( cValue )

      ENDIF

      IF cToken == '*_STEP_3_REPORT_TITLE___________'

         rep_build_step_3.title.VALUE := cValue

      ENDIF

      IF cToken == '*_STEP_3_TITLES_FIELD___________'

         cTemp := cValue

      ENDIF

      IF cToken == '*_STEP_3_TITLES_TITLE___________'

         reporttitlesoptions.titles.additem ( { cTemp, cValue } )

      ENDIF

      IF cToken == '*_STEP_3_TOTALS_FIELD___________'

         cTemp := cValue

      ENDIF

      IF cToken == '*_STEP_3_TOTALS_TOTALIZE________'

         reportsummaryoptions.fields.additem ( { cTemp, cValue } )

      ENDIF

      IF cToken == '*_STEP_3_FORMATS_FIELD__________'

         cTemp := cValue

      ENDIF

      IF cToken == '*_STEP_3_FORMATS_MASK___________'

         reportformatoptions.formats.additem ( { cTemp, cValue } )

      ENDIF

      IF cToken == '*_STEP_3_FONT_NAME______________'

         _ReportFontName := cValue

      ENDIF

      IF cToken == '*_STEP_3_FONT_SIZE______________'

         _ReportFontSize := Val ( cValue )

      ENDIF

      IF cToken == '*_STEP_3_FONT_BOLD______________'

         _ReportFontBold := if ( cValue == '.T.', .T., .F. )

      ENDIF

      IF cToken == '*_STEP_3_FONT_ITALIC____________'

         _ReportFontItalic := if ( cValue == '.T.', .T., .F. )

      ENDIF

      IF cToken == '*_STEP_3_GROUPEXPRESSION________'

         groupingoptions.groupby.VALUE := cValue

      ENDIF

      IF cToken == '*_STEP_3_GROUPHEADER____________'

         groupingoptions.groupheader.VALUE := cValue

      ENDIF

      IF cToken == '*_STEP_3_GROUPFOOTER____________'

         groupingoptions.groupfooter.VALUE := cValue

      ENDIF


   NEXT i

RETURN


STATIC FUNCTION Capitalize ( cString )

   cString := HMG_LOWER ( cString )

   cString := HMG_UPPER ( hb_ULeft( cString, 1 ) ) + hb_URight ( cString, HMG_LEN( cString ) - 1 )

RETURN cString


PROCEDURE groupingoptions

   groupingoptions.CENTER
   groupingoptions.groupby.setfocus
   groupingoptions.show

RETURN

PROCEDURE fieldselector

   LOCAL i

   LOAD WINDOW fieldselector

   fieldselector.ok.CAPTION := aMsgs[ 116 ]
   fieldselector.cancel.CAPTION := aMsgs[ 117 ]

   fieldselector.fields.deleteallitems

   FOR i := 1 TO rep_build_step_1.selectedfields.itemcount

      fieldselector.fields.additem ( rep_build_step_1.selectedfields.item( i ) )

   NEXT i

   FOR i := 1 TO rep_build_step_1.availablefields.itemcount

      fieldselector.fields.additem ( rep_build_step_1.availablefields.item( i ) )

   NEXT i


   fieldselector.CENTER
   fieldselector.ACTIVATE

   groupingoptions.groupheader.setfocus

RETURN


FUNCTION fieldselector_ok_action

   LOCAL i

   i := fieldselector.fields.VALUE

   IF i == 0
      RETURN NIL
   ENDIF

   groupingoptions.groupby.setfocus
   groupingoptions.groupby.VALUE := fieldselector.fields.item( i )

   DoMethod ( "fieldselector", "release" )

RETURN NIL


FUNCTION groupingoptions_button_1_action

   groupingoptions.groupby.VALUE := ''

RETURN NIL


PROCEDURE TableView ( cFileName )

   LOCAL cData := ''
   LOCAL aStruct
   LOCAL i
   LOCAL nFieldCount

   USE ( cFileName )

   nFieldCount := FCount()

   aStruct := dbStruct()

   cData += 'File Name: "' + cFileName + '"  -  Field Count: ' + AllTrim( Str( nFieldCount ) ) + '  -  Record Count: ' + AllTrim( Str( RecCount() ) )

   USE

   LOAD WINDOW TABLEVIEW

   TABLEVIEW.LABEL_1.VALUE := cData

   TABLEVIEW.TITLE := aMsgs[ 287 ]
   TABLEVIEW.browse.CAPTION := aMsgs[ 288 ]
   TABLEVIEW.modifystructure.CAPTION := aMsgs[ 289 ]
   TABLEVIEW.close.CAPTION := aMsgs[ 106 ]

   TABLEVIEW.GRID_1.Header( 1 ) := aMsgs[ 174 ]
   TABLEVIEW.GRID_1.Header( 2 ) := aMsgs[ 175 ]
   TABLEVIEW.GRID_1.Header( 3 ) := aMsgs[ 290 ]
   TABLEVIEW.GRID_1.Header( 4 ) := aMsgs[ 291 ]

   TABLEVIEW.GRID_1.DELETEALLITEMS


   FOR i := 1 TO nFieldCount

      aStruct[ i ][ 1 ] := Capitalize ( aStruct[ i ][ 1 ] )

      IF aStruct[ i ][ 2 ] == 'N'

         aStruct[ i ][ 2 ] := 'Numeric'

      ELSEIF aStruct[ i ][ 2 ] == 'C'

         aStruct[ i ][ 2 ] := 'Character'

      ELSEIF aStruct[ i ][ 2 ] == 'D'

         aStruct[ i ][ 2 ] := 'Date'

      ELSEIF aStruct[ i ][ 2 ] == 'L'

         aStruct[ i ][ 2 ] := 'Logical'

      ELSEIF aStruct[ i ][ 2 ] == 'M'

         aStruct[ i ][ 2 ] := 'Memo'

      ENDIF

   NEXT i


   FOR i := 1 TO nFieldCount
      TABLEVIEW.GRID_1.ADDITEM ( { aStruct[ i ][ 1 ], aStruct[ i ][ 2 ], Str ( aStruct[ i ][ 3 ] ), Str ( aStruct[ i ][ 4 ] ) } )
   NEXT i


   TABLEVIEW.CENTER

   TABLEVIEW.ACTIVATE

RETURN

PROCEDURE TableBrowse ( cFileName )

   LOCAL cData := ''
   LOCAL i
   LOCAL cBrowseArea
   LOCAL nFieldCount
   LOCAL aFieldNames := {}
   LOCAL aHeaders := {}
   LOCAL aWidths := {}

   USE ( cFileName )

   cBrowseArea := Alias()
   nFieldCount := FCount()

   cData += 'File Name: "' + cFileName + '"  -  Field Count: ' + AllTrim( Str( nFieldCount ) ) + '  -  Record Count: ' + AllTrim( Str( RecCount() ) )

   GO TOP

   LOAD WINDOW TABLEBROWSE

   TABLEBROWSE.LABEL_1.VALUE := cData

   TABLEBROWSE.LABEL_2.VALUE := '[Alt+A] : Append - [Del] : Delete - [Enter] / [DblClick] : Modify'

   TABLEBROWSE.TITLE := 'Table Browse'
   TABLEBROWSE.close.CAPTION := 'Close'


   FOR i := 1 TO nFieldCount
      AAdd ( aFieldNames, cBrowseArea + '->' + field( i ) )
      AAdd ( aHeaders, Capitalize ( field( i ) ) )
      AAdd ( aWidths, 120 )
   NEXT i


   DEFINE BROWSE browse_1
      parent tablebrowse
      workarea &cBrowseArea
      ROW 38
      COL 13
      WIDTH 596
      HEIGHT 357
      HEADERS aHeaders
      fields aFieldNames
      WIDTHS aWidths
      allowedit .T.
      allowappend .T.
      allowdelete .T.
   END BROWSE

   TABLEBROWSE.BROWSE_1.SETFOCUS

   TABLEBROWSE.CENTER

   TABLEBROWSE.ACTIVATE

   USE

RETURN


PROCEDURE TableModify ( cFileName )

   LOCAL i, cTemp
   LOCAL aItems := {}
   LOCAL nTemp := 1

   IF File ( cFileName )

      FOR i := 1 TO tableview.grid_1.itemcount

         cTemp := tableview.grid_1.cell( i, 2 )

         IF cTemp = 'Character'
            nTemp := 1

         ELSEIF cTemp = 'Numeric'
            nTemp := 2

         ELSEIF cTemp = 'Date'
            nTemp := 3

         ELSEIF cTemp = 'Logical'
            nTemp := 4

         ELSEIF cTemp = 'Memo'
            nTemp := 5

         ENDIF

         AAdd ( aItems, { tableview.grid_1.cell( i, 1 ), nTemp, Val ( tableview.grid_1.cell( i, 3 ) ), Val ( tableview.grid_1.cell( i, 4 ) ) } )

      NEXT i

   ENDIF

   LOAD WINDOW TABLEMODIFY

   TABLEMODIFY.LABEL_1.VALUE := 'File Name: "' + cFileName + '" '

   TABLEMODIFY.TITLE := aMsgs[ 292 ]
   TABLEMODIFY.addfield.CAPTION := aMsgs[ 293 ]
   TABLEMODIFY.deletefield.CAPTION := aMsgs[ 294 ]
   TABLEMODIFY.save.CAPTION := aMsgs[ 295 ]
   TABLEMODIFY.cancel.CAPTION := aMsgs[ 117 ]

   TABLEMODIFY.GRID_1.Header( 1 ) := aMsgs[ 174 ]
   TABLEMODIFY.GRID_1.Header( 2 ) := aMsgs[ 175 ]
   TABLEMODIFY.GRID_1.Header( 3 ) := aMsgs[ 290 ]
   TABLEMODIFY.GRID_1.Header( 4 ) := aMsgs[ 291 ]

   TABLEMODIFY.GRID_1.COLUMNVALID( 2 ) := {|| tablemodify01() }

   TABLEMODIFY.CENTER

   TABLEMODIFY.ACTIVATE

RETURN

PROCEDURE tablemodify01

   LOCAL nCellRow := This.CellRowIndex
   LOCAL nCellCol := This.CellColIndex
   LOCAL cNewLine := This.CellValue

   IF nCellCol == 2

      IF cNewLine == 1 // Character

         TABLEMODIFY.GRID_1.CELL ( nCellRow, 4 ) := 0

      ELSEIF cNewLine == 2 // Numeric

         // no needed

      ELSEIF cNewLine == 3 // Date

         TABLEMODIFY.GRID_1.CELL ( nCellRow, 3 ) := 8
         TABLEMODIFY.GRID_1.CELL ( nCellRow, 4 ) := 0

      ELSEIF cNewLine == 4 // Logical

         TABLEMODIFY.GRID_1.CELL ( nCellRow, 3 ) := 1
         TABLEMODIFY.GRID_1.CELL ( nCellRow, 4 ) := 0

      ELSEIF cNewLine == 5 // Memo

         TABLEMODIFY.GRID_1.CELL ( nCellRow, 3 ) := 10
         TABLEMODIFY.GRID_1.CELL ( nCellRow, 4 ) := 0

      ENDIF

   ENDIF

RETURN

FUNCTION EvalLength()

   LOCAL r

   r := ( TABLEMODIFY.GRID_1.CELL ( This.CellRowIndex, 2 ) < 3 ) // Editing is not allowed for Date, Logical and Memo types

RETURN r

FUNCTION EvalDec()

   LOCAL r

   r := ( TABLEMODIFY.GRID_1.CELL ( This.CellRowIndex, 2 ) == 2 ) // Editing is allowed for Numeric type

RETURN r

PROCEDURE tableaddfield()

   LOCAL cTemp, lFound
   LOCAL n
   LOCAL i

   n := 1

   DO WHILE .T.

      lFound := .F.

      cTemp := 'NewField' + AllTrim ( Str ( n ) )

      FOR i := 1 TO TABLEMODIFY.GRID_1.ITEMCOUNT

         IF HMG_UPPER( AllTrim( TABLEMODIFY.GRID_1.CELL ( i, 1 ) ) ) == HMG_UPPER( AllTrim ( cTemp ) )

            lFound := .T.
            EXIT

         ENDIF

      NEXT i

      IF lFound == .F.
         EXIT
      ENDIF

      n++

   ENDDO

   TABLEMODIFY.GRID_1.ADDITEM ( { 'NewField' + AllTrim( Str( n ) ), 1, 10, 0 } )
   TABLEMODIFY.GRID_1.VALUE := { TABLEMODIFY.GRID_1.ITEMCOUNT, 1 }
   TABLEMODIFY.GRID_1.SETFOCUS

RETURN

PROCEDURE tabledeletefield()

   LOCAL aTemp

   IF TABLEMODIFY.GRID_1.ITEMCOUNT == 0
      RETURN
   ENDIF

   aTemp := TABLEMODIFY.GRID_1.VALUE

   IF aTemp[ 1 ] == 0
      RETURN
   ENDIF

   IF msgyesno ( aMsgs[ 099 ], 'HMG-IDE' )

      TABLEMODIFY.GRID_1.DELETEITEM ( aTemp[ 1 ] )

      IF TABLEMODIFY.GRID_1.ITEMCOUNT > 0

         IF aTemp[ 1 ] <= TABLEMODIFY.GRID_1.ITEMCOUNT

            TABLEMODIFY.GRID_1.VALUE := { aTemp[ 1 ], aTemp[ 2 ] }

         ELSE

            TABLEMODIFY.GRID_1.VALUE := { TABLEMODIFY.GRID_1.ITEMCOUNT, aTemp[ 2 ] }

         ENDIF

      ENDIF

   ENDIF

RETURN

PROCEDURE tablefieldmoveup()

   LOCAL i
   LOCAL anterior
   LOCAL actual
   LOCAL aTemp
   LOCAL j

   aTemp := TABLEMODIFY.GRID_1.VALUE

   i := aTemp[ 1 ]

   j := aTemp[ 2 ]

   IF i < 2
      RETURN
   ENDIF

   anterior := TABLEMODIFY.GRID_1.ITEM ( i - 1 )

   actual := TABLEMODIFY.GRID_1.ITEM ( i )

   TABLEMODIFY.GRID_1.ITEM ( i - 1 ) := actual

   TABLEMODIFY.GRID_1.ITEM ( i ) := anterior

   TABLEMODIFY.GRID_1.VALUE := { i - 1, j }

RETURN

PROCEDURE tablefieldmovedown()

   LOCAL i
   LOCAL actual, posterior
   LOCAL aTemp
   LOCAL j

   aTemp := TABLEMODIFY.GRID_1.VALUE

   i := aTemp[ 1 ]

   j := aTemp[ 2 ]

   IF i > TABLEMODIFY.GRID_1.ITEMCOUNT - 1
      RETURN
   ENDIF

   IF i == 0
      RETURN
   ENDIF

   actual := TABLEMODIFY.GRID_1.ITEM ( i )

   posterior := TABLEMODIFY.GRID_1.ITEM ( i + 1 )


   TABLEMODIFY.GRID_1.ITEM ( i + 1 ) := actual

   TABLEMODIFY.GRID_1.ITEM ( i ) := posterior

   TABLEMODIFY.GRID_1.VALUE := { i + 1, j }

RETURN


PROCEDURE tablesave( cFileName )

   LOCAL i
   LOCAL aStruct := {}
   LOCAL cName, cType, nLength, nDecimals
   LOCAL cData := ''
   LOCAL lNew
   LOCAL nTables, nFieldCount
   LOCAL aTables := {}
   LOCAL v

   if ! File ( cFileName )
      lNew := .T.
   ELSE
      lNew := .F.
   ENDIF


   FOR i := 1 TO TABLEMODIFY.GRID_1.ITEMCOUNT

      cName := AllTrim( TABLEMODIFY.GRID_1.CELL ( i, 1 ) )

      IF TABLEMODIFY.GRID_1.CELL ( i, 2 ) == 1 // Character

         cType := 'C'

      ELSEIF TABLEMODIFY.GRID_1.CELL ( i, 2 ) == 2 // Numeric

         cType := 'N'

      ELSEIF TABLEMODIFY.GRID_1.CELL ( i, 2 ) == 3 // Date

         cType := 'D'

      ELSEIF TABLEMODIFY.GRID_1.CELL ( i, 2 ) == 4 // Logical

         cType := 'L'

      ELSEIF TABLEMODIFY.GRID_1.CELL ( i, 2 ) == 5 // Memo

         cType := 'M'

      ENDIF

      nLength := TABLEMODIFY.GRID_1.CELL ( i, 3 )

      nDecimals := TABLEMODIFY.GRID_1.CELL ( i, 4 )

      AAdd ( aStruct, { cName, cType, nLength, nDecimals } )

   NEXT i


   // Create a temporary file

   dbCreate ( 'temp.dbf', aStruct )


   // Append records from original to temporary

   IF File ( cFileName )

      USE TEMP.DBF

      APPEND FROM ( cFileName )

      USE

   ENDIF


   // Create a Backup

   IF File ( cFileName )

      COPY File ( cFileName ) TO ( hb_ULeft( cFileName, HMG_LEN( cFileName ) - 3 ) + 'bak' )

   ENDIF


   // Delete Original File

   IF File ( cFileName )

      DELETE File ( cFileName )

   ENDIF


   // Rename temporary file as original file

   RENAME TEMP.DBF TO ( cFileName )


   // Update TableView

   IF lNew == .F.

      USE ( cFileName )

      nFieldCount := FCount()

      aStruct := dbStruct()

      cData += 'File Name: "' + cFileName + '"  -  Field Count: ' + AllTrim( Str( nFieldCount ) ) + '  -  Record Count: ' + AllTrim( Str( RecCount() ) )

      USE

      TABLEVIEW.LABEL_1.VALUE := cData


      FOR i := 1 TO nFieldCount

         aStruct[ i ][ 1 ] := Capitalize ( aStruct[ i ][ 1 ] )

         IF aStruct[ i ][ 2 ] == 'N'

            aStruct[ i ][ 2 ] := 'Numeric'

         ELSEIF aStruct[ i ][ 2 ] == 'C'

            aStruct[ i ][ 2 ] := 'Character'

         ELSEIF aStruct[ i ][ 2 ] == 'D'

            aStruct[ i ][ 2 ] := 'Date'

         ELSEIF aStruct[ i ][ 2 ] == 'L'

            aStruct[ i ][ 2 ] := 'Logical'

         ELSEIF aStruct[ i ][ 2 ] == 'M'

            aStruct[ i ][ 2 ] := 'Memo'

         ENDIF

      NEXT i


      TABLEVIEW.GRID_1.DELETEALLITEMS

      FOR i := 1 TO nFieldCount
         TABLEVIEW.GRID_1.ADDITEM ( { aStruct[ i ][ 1 ], aStruct[ i ][ 2 ], Str ( aStruct[ i ][ 3 ] ), Str ( aStruct[ i ][ 4 ] ) } )
      NEXT i

   ELSE

      // Tables

      nTables := ADir( "*.dbf" )
      ASize ( aTables, nTables )
      ADir( "*.dbf", aTables )
      aTables := ASort ( aTables )

      Project.tables.deleteallitems

      v := 0

      FOR i := 1 TO nTables
         Project.tables.AddItem ( aTables[ i ] )
         IF AllTrim( HMG_UPPER( cFileName ) ) == AllTrim( HMG_UPPER( aTables[ i ] ) )
            v := i
         ENDIF
      NEXT i

      IF i <> 0
         Project.tables.VALUE := v
      ENDIF

   ENDIF


   ThisWindow.RELEASE

RETURN


*------------------------------------------------------------------------------*
PROCEDURE Newtable()
*------------------------------------------------------------------------------*
   LOCAL Result
   LOCAL i


   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   Result := AllTrim ( InputBox ( aMsgs[ 152 ], aMsgs[ 096 ], '' ) )


   IF _HMG_DialogCancelled == .T.
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN
   ENDIF

   IF Empty ( Result )
      IF _IsWindowDefined ( DesignForm )
         SelectControl ( SelectedControlName )
         DrawGrid()
      ENDIF
      RETURN
   ENDIF

   Result := AllTrim ( Result )

   IF HMG_UPPER ( hb_URight ( Result, 4 ) ) != '.DBF'
      Result := Result + '.dbf'
   ENDIF

   FOR i := 1 TO Project.tables.ItemCount
      IF AllTrim( HMG_UPPER( Project.tables.Item( i ) ) ) == AllTrim( HMG_UPPER( result ) )
         MsgStop( aMsgs[ 097 ], 'HMG IDE' )
         RETURN
      ENDIF
   NEXT i

   IF File ( Result )

      If ! MsgYesNo ( Result + ' ' + aMsgs[ 227 ] )

         RETURN

      ENDIF

   ENDIF

   Project.Tab_1.VALUE := 7

   TableModify ( Result )

   IF _IsWindowDefined ( DesignForm )
      SelectControl ( SelectedControlName )
      DrawGrid()
   ENDIF

RETURN

*------------------------------------------------------------------------------*
PROCEDURE AddItem
*------------------------------------------------------------------------------*
   LOCAL ProjectFolder
   LOCAL FileFolder
   LOCAL lAborted
   LOCAL FileName
   LOCAL Result
   LOCAL BaseFileName
   LOCAL lLocalPrg
   LOCAL i

   IF Empty ( Projectname )
      MsgStop ( aMsgs[ 085 ], 'HMG IDE' )
      RETURN
   ENDIF

   Result := Getfile ( { { 'Modules (*.prg)', '*.prg' }, { 'Forms (*.fmg)', '*.fmg' }, { 'Includes (*.ch)', '*.ch' }, { 'Reports (*.rmg)', '*.rmg' }, { 'Reports (*.rpt)', '*.rpt' }, { 'Tables (*.dbf)', '*.dbf' }, { 'Icons (*.ico)', '*.ico' }, { 'Images (*.bmp)', '*.bmp' }, { 'Images (*.gif)', '*.gif' }, { 'Images (*.jpg)', '*.jpg' }, { 'Cursors (*.cur)', '*.cur' }, { 'Audio (*.wav)', '*.wav' }, { 'Video (*.avi)', '*.avi' } }, aMsgs[ 027 ], , .F., .T. )

   IF Empty ( Result )
      RETURN
   ENDIF

   Result := AllTrim ( Result )

   FileName := hb_URight ( Result, HMG_LEN( Result ) - hb_utf8RAt ( '\', Result ) )

   ProjectFolder := HMG_UPPER ( AllTrim ( hb_ULeft ( Projectname, hb_utf8RAt ('\', ProjectName ) ) ) )
   FileFolder := HMG_UPPER ( AllTrim ( hb_ULeft ( Result, hb_utf8RAt ('\',Result ) ) ) )


   IF ProjectFolder == FileFolder ;
         .AND. ;
         HMG_UPPER ( hb_URight ( FileName, 4 ) ) != '.PRG'

      MsgStop ( aMsgs[ 163 ], 'HMG-IDE' )

      RETURN

   ENDIF

   IF ProjectFolder == FileFolder ;
         .AND. ;
         HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.PRG'

      lLocalPrg := .T.

   ELSE

      lLocalPrg := .F.

   ENDIF

   IF lLocalPrg == .F.

      IF File ( ProjectFolder + FileName )

         If ! MsgYesNo ( aMsgs[ 227 ], 'HMG-IDE' )
            RETURN
         ENDIF

      ENDIF

      BaseFileName := hb_ULeft ( AllTrim( FileName ), HMG_LEN( AllTrim( FileName ) ) - 4 )

      COPY File ( FileFolder + FileName ) TO ( ProjectFolder + FileName )

      IF HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.DBF'

         IF File ( FileFolder + BaseFileName + '.dbt' )

            COPY File ( FileFolder + BaseFileName + '.dbt' ) TO ( ProjectFolder + BaseFileName + '.dbt' )

         ENDIF

         IF File ( FileFolder + BaseFileName + '.fpt' )

            COPY File ( FileFolder + BaseFileName + '.fpt' ) TO ( ProjectFolder + BaseFileName + '.fpt' )

         ENDIF

      ENDIF

   ENDIF

   lAborted := .F.

   IF HMG_UPPER ( hb_URight ( FileName, 4 ) ) == '.PRG'

      FOR i := 1 TO Project.List_1.ItemCount

         IF HMG_LOWER( AllTrim( Project.List_1.Item ( i ) ) ) == HMG_LOWER( AllTrim( FileName ) ) ;
               .OR. ;
               HMG_LOWER( AllTrim( Project.List_1.Item ( i ) ) ) == HMG_LOWER( AllTrim( FileName ) ) + ' (main)' ;

               MsgStop ( aMsgs[ 165 ], 'HMG-IDE' )

            lAborted := .T.

            EXIT

         ENDIF


      NEXT i

      IF lAborted == .F.

         Project.List_1.AddItem ( FileName )

         IF Project.List_1.ItemCount == 1
            Project.List_1.Item ( 1 ) := Project.List_1.Item ( 1 ) + ' (Main)'
         ELSE
            SortModuleList()
         ENDIF

      ENDIF

   ENDIF

   refreshproject()

   SaveProject()

RETURN
